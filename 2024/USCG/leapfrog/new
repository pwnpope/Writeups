0xa1d90: endbr64 ; pushrbp; mov rbp, rdi; pushrbx; sub rsp, 0x8; calljump___GI___strnlen; 
0x102b50: endbr64 ; pushrbp; mov rbp, rsp; pushr12; mov r12, rdi; mov rdi, rsi; pushrbx; mov rbx, rsi; callsub_244b0; mov rsi, rbx; mov rdx, rax; add rax, 0x12; and rax, 0xfffffffffffffff0; sub rsp, rax; mov rdi, rsp; calljump___GI_mempcpy; 
0xc1b90: endbr64 ; shl rdx, 0x2; jmp jump___GI_mempcpy; 
0x9e570: endbr64 ; pushr12; mov r12, rcx; pushrbp; mov rbp, rdi; pushrbx; mov rbx, rsi; mov esi, edx; mov rdx, rcx; mov rdi, rbx; calljump___GI_memchr; 
0x9e150: endbr64 ; mov rax, rdi; mov rdi, rsi; mov rsi, rax; jmp jump___GI_memmove; 
0xc1b80: endbr64 ; shl rdx, 0x2; jmp jump___GI_memmove; 
0x151060: endbr64 ; pushr13; xor eax, eax; mov r13, rdi; mov ecx, 0x30; pushr12; mov r12, rdx; pushrbp; pushrbx; mov rbx, rsi; sub rsp, 0x198; lea rbp, [rsp+0x10]; mov rdi, rbp; rep stosq qword [rdi]; call__GI___getpid; cmp byte [rbx], 0x1; lea rdi, [rsp+0x18]; mov rsi, r13; mov dword [rsp+0x14], eax; mov eax, 0x7; mov edx, 0x20; adc ax, 0x0; mov word [rsp+0x10], ax; calljump___GI_strncpy; 
0x151060: endbr64 ; pushr13; xor eax, eax; mov r13, rdi; mov ecx, 0x30; pushr12; mov r12, rdx; pushrbp; pushrbx; mov rbx, rsi; sub rsp, 0x198; lea rbp, [rsp+0x10]; mov rdi, rbp; rep stosq qword [rdi]; call__GI___getpid; cmp byte [rbx], 0x1; lea rdi, [rsp+0x18]; mov rsi, r13; mov dword [rsp+0x14], eax; mov eax, 0x7; mov edx, 0x20; adc ax, 0x0; mov word [rsp+0x10], ax; calljump___GI_strncpy; lea rdi, [rsp+0x3c]; mov rsi, rbx; mov edx, 0x20; calljump___GI_strncpy; 
0x151060: endbr64 ; pushr13; xor eax, eax; mov r13, rdi; mov ecx, 0x30; pushr12; mov r12, rdx; pushrbp; pushrbx; mov rbx, rsi; sub rsp, 0x198; lea rbp, [rsp+0x10]; mov rdi, rbp; rep stosq qword [rdi]; call__GI___getpid; cmp byte [rbx], 0x1; lea rdi, [rsp+0x18]; mov rsi, r13; mov dword [rsp+0x14], eax; mov eax, 0x7; mov edx, 0x20; adc ax, 0x0; mov word [rsp+0x10], ax; calljump___GI_strncpy; lea rdi, [rsp+0x3c]; mov rsi, rbx; mov edx, 0x20; calljump___GI_strncpy; lea rdi, [rsp+0x5c]; mov edx, 0x100; mov rsi, r12; calljump___GI_strncpy; 
0x139420: endbr64 ; mov rax, rdi; mov rdi, rdx; pushr12; mov rdx, rcx; lea r12, [rdi+rcx-0x1]; pushrbp; mov rbp, r8; pushrbx; mov rbx, rsi; mov rsi, rax; mov byte [r12], 0x0; calljump___GI_strncpy; 
0x10b150: endbr64 ; pushr15; pushr14; pushr13; mov r13, rdi; pushr12; pushrbp; xor ebp, ebp; pushrbx; mov rbx, rsi; sub rsp, 0x8; calljump___GI_strlen; 
0x112e20: endbr64 ; pushr12; mov r12, rdx; pushrbp; mov rbp, rdi; mov rdi, rsi; pushrbx; mov rbx, rsi; calljump___GI_strlen; 
0x9da30: endbr64 ; pushr14; pushr13; mov r13d, esi; pushr12; mov r12, rcx; pushrbp; mov rbp, rdx; pushrbx; mov rbx, rdi; calljump___GI_strlen; 
0x792f0: endbr64 ; pushr14; pushr13; pushr12; pushrbp; mov rbp, rdi; pushrbx; sub rsp, 0x10; calljump___GI_strlen; 
0x102b50: endbr64 ; pushrbp; mov rbp, rsp; pushr12; mov r12, rdi; mov rdi, rsi; pushrbx; mov rbx, rsi; calljump___GI_strlen; 
0x10a8a0: endbr64 ; pushr15; pushr14; pushr13; mov r13, rdi; pushr12; pushrbp; xor ebp, ebp; pushrbx; sub rsp, 0x8; calljump___GI_strlen; 
0xc87a0: endbr64 ; pushrbx; mov rbx, rdi; calljump___GI_strlen; 
0x14bec0: endbr64 ; pushr14; mov r14, r8; pushr13; mov r13, rcx; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; calljump___GI_strlen; 
0xa1980: endbr64 ; pushr14; pushr13; mov r13, rsi; pushr12; mov r12, rdi; mov rdi, rsi; pushrbp; pushrbx; mov rbx, rdx; calljump___GI_strlen; 
0x9d8a0: endbr64 ; pushr15; pushr14; pushr13; mov r13, rdx; pushr12; mov r12, rdi; mov rdi, rdx; pushrbp; pushrbx; mov rbx, rsi; sub rsp, 0x8; calljump___GI_strlen; 
0x114400: endbr64 ; pushr15; mov r15, rdi; pushr14; xor r14d, r14d; pushr13; pushr12; pushrbp; pushrbx; xor ebx, ebx; sub rsp, 0x18; mov qword [rsp+0x8], 0x0; lea r12, [rsp+0x8]; lea rbp, [rsp+0x4]; calljump___GI_strlen; 
0x59360: endbr64 ; pushr15; movsxd  rcx, ecx; lea rax, [rel tryfunc]; pushr14; mov r14, rdi; pushr13; pushr12; pushrbp; movsxd  rbp, esi; pushrbx; sub rsp, 0x78; mov rsi, qword [rax+rcx*8]; mov rax, qword [rel data_1d6df8]; mov dword [rsp+0x4c], edx; lea rcx, [rsp+0x50]; mov qword [rsp+0x8], rdi; shr rcx, 0x4; mov qword [rsp+0x10], rsi; mov ebx, dword [fs:rax]; lea rax, [rel try_nocreate]; mov r15, rcx; cmp rsi, rax; mov qword [rsp+0x50], rcx; seter9b; mov byte [rsp], r9b; calljump___GI_strlen; 
0x14c940: endbr64 ; pushr15; mov r15, r9; pushr14; xor r14d, r14d; pushr13; mov r13, r8; pushr12; mov r12, rcx; pushrbp; mov rbp, rdx; pushrbx; mov rbx, rdi; sub rsp, 0x8; cmp esi, 0xa; seter14b; calljump___GI_strlen; 
0x114500: endbr64 ; pushr12; pushrbp; pushrbx; mov rbx, rdi; sub rsp, 0x30; calljump___GI_strlen; 
0x14ebe0: endbr64 ; pushrbp; mov rbp, rsp; pushr15; mov r15, rdx; pushr14; pushr13; mov r13, rsi; pushr12; pushrbx; mov ebx, edi; mov rdi, rsi; sub rsp, 0x158; mov qword [rbp-0x170], rsi; calljump___GI_strlen; 
0x91e90: endbr64 ; pushr13; mov r13d, 0x22; pushr12; mov r12, rdi; mov rdi, rsi; pushrbp; mov rbp, rsi; pushrbx; sub rsp, 0x28; calljump___GI_strlen; 
0x14e310: endbr64 ; pushrbp; mov rbp, rsp; pushr15; mov r15, rdi; pushr14; mov r14, rsi; pushr13; mov r13, rdx; pushr12; mov r12, rcx; pushrbx; sub rsp, 0x28; calljump___GI_strlen; 
0x14c8e0: endbr64 ; pushr15; mov r15, r9; pushr14; mov r14, r8; pushr13; mov r13, rcx; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; sub rsp, 0x8; calljump___GI_strlen; 
0x11cb20: endbr64 ; pushr13; mov r13, rdx; pushr12; mov r12, rdi; pushrbp; mov rbp, rsi; pushrbx; sub rsp, 0x8; calljump___GI_strlen; 
0x10bb80: endbr64 ; pushr12; mov r12, rsi; pushrbp; mov rbp, rdi; mov rdi, rsi; pushrbx; calljump___GI_strlen; 
0x9d370: endbr64 ; pushr12; mov r12, rdi; mov rdi, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdx; calljump___GI_strlen; 
0x14d030: endbr64 ; pushr15; pushr14; mov r14, rcx; pushr13; pushr12; mov r12, rdi; pushrbp; xor ebp, ebp; pushrbx; mov ebx, esi; sub rsp, 0x38; mov qword [rsp+0x10], rdx; calljump___GI_strlen; 
0xa10e0: endbr64 ; pushrbp; pushrbx; mov rbx, rdi; sub rsp, 0x8; calljump___GI_strlen; 
0x1497f0: endbr64 ; pushr14; pushr13; pushr12; mov r12, rsi; pushrbp; mov rbp, rdi; pushrbx; sub rsp, 0x10; calljump___GI_strlen; 
0x82050: endbr64 ; pushr13; pushr12; pushrbp; mov rbp, rdi; pushrbx; mov rbx, rsi; sub rsp, 0x8; calljump___GI_strlen; 
0x11cab0: endbr64 ; pushr12; mov r12d, edi; mov rdi, rsi; pushrbp; mov rbp, rdx; pushrbx; mov rbx, rsi; calljump___GI_strlen; 
0x14e040: endbr64 ; pushr15; pushr14; pushr13; mov r13, rsi; pushr12; mov r12, rdi; pushrbp; xor ebp, ebp; pushrbx; sub rsp, 0x48; calljump___GI_strlen; 
0xc9b60: endbr64 ; pushr15; pushr14; mov r14d, ecx; pushr13; mov r13, rsi; pushr12; mov r12, rdi; pushrbp; pushrbx; mov ebx, edx; sub rsp, 0x38; calljump___GI_strlen; 
0xc9b60: endbr64 ; pushr15; pushr14; mov r14d, ecx; pushr13; mov r13, rsi; pushr12; mov r12, rdi; pushrbp; pushrbx; mov ebx, edx; sub rsp, 0x38; calljump___GI_strlen; mov rdi, r13; lea rbp, [rax+0x1]; calljump___GI_strlen; 
0x77ac0: endbr64 ; pushr13; pushr12; pushrbp; mov rbp, rdi; pushrbx; mov rbx, rsi; sub rsp, 0x8; calljump___GI_strlen; 
0x149740: endbr64 ; pushr14; pushr13; pushr12; mov r12, rsi; pushrbp; mov rbp, rdi; pushrbx; sub rsp, 0x10; calljump___GI_strlen; 
0x112d40: endbr64 ; pushr13; mov r13, rdi; mov rdi, rsi; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; sub rsp, 0x8; calljump___GI_strlen; 
0x359f0: endbr64 ; pushr15; lea r15, [rel _nl_loaded_domains]; pushr14; lea r14, [rel lock]; pushr13; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; mov rdi, r14; sub rsp, 0x58; mov qword [rsp+0x8], rcx; call__pthread_rwlock_rdlock; mov rdi, rbx; calljump___GI_strlen; 
0x3fbc0: endbr64 ; pushr15; pushr14; mov r14, rdx; pushr13; pushr12; pushrbp; mov rbp, rdi; pushrbx; sub rsp, 0x28; mov qword [rsp+0x10], rsi; mov qword [rsp], rdx; mov dword [rsp+0xc], ecx; calljump___GI_strlen; 
0x11edf0: endbr64 ; pushr15; pushr14; pushr13; pushr12; mov r12, rdi; pushrbp; pushrbx; sub rsp, 0x8; calljump___GI_strlen; 
0x92ab0: endbr64 ; pushr15; pushr14; xor r14d, r14d; pushr13; mov r13d, esi; pushr12; pushrbp; mov rbp, rdi; pushrbx; mov rbx, rdx; sub rsp, 0x1c8; calljump___GI_strlen; 
0x12b3b0: endbr64 ; pushr15; pushr14; mov r14, rsi; pushr13; mov r13, rdx; pushr12; pushrbp; pushrbx; sub rsp, 0x38; mov eax, dword [rsp+0x80]; mov rbx, qword [rsp+0x70]; mov qword [rsp+0x8], rdi; mov qword [rsp+0x20], rsi; mov rbp, qword [rsp+0x78]; mov dword [rsi+0x10], eax; mov rdi, rbx; mov r15, qword [rsp+0x88]; mov qword [rsp+0x18], rcx; calljump___GI_strlen; 
0x9d780: endbr64 ; pushr14; pushr13; mov r13, rdi; mov rdi, rdx; pushr12; mov r12d, ecx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdx; calljump___GI_strlen; 
0x14df10: endbr64 ; pushr15; mov r15, r9; pushr14; mov r14, r8; pushr13; mov r13, rcx; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; sub rsp, 0x8; calljump___GI_strlen; 
0x108690: endbr64 ; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; mov rdi, rsi; sub rsp, 0x8; calljump___GI_strlen; 
0xfde20: endbr64 ; pushr15; mov r15, rdi; pushr14; pushr13; pushr12; pushrbp; mov rbp, r8; pushrbx; sub rsp, 0x38; mov qword [rsp+0x28], rsi; mov dword [rsp+0x20], edx; mov qword [rsp+0x18], rcx; calljump___GI_strlen; 
0xa19f0: endbr64 ; pushr13; mov r13, rdi; mov rdi, rsi; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; sub rsp, 0x8; calljump___GI_strlen; 
0x102c80: endbr64 ; pushr13; pushr12; mov r12, rdi; mov rdi, rsi; pushrbp; pushrbx; mov rbx, rsi; sub rsp, 0x8; calljump___GI_strlen; 
0x37a40: endbr64 ; pushr15; mov r15d, ecx; pushr14; pushr13; mov r13, rdx; pushr12; mov r12, r9; pushrbp; lea rbp, [r13+0x2]; pushrbx; sub rsp, 0x48; mov qword [rsp+0x10], rdi; mov rdi, r8; mov qword [rsp+0x8], rsi; mov dword [rsp], ecx; mov qword [rsp+0x18], r8; mov qword [rsp+0x38], r9; calljump___GI_strlen; 
0x372c0: endbr64 ; mov rsi, qword [rsi]; mov rdi, qword [rdi]; lea rdx, [rel _nl_C_locobj]; jmp jump___GI___strcasecmp_l; 
0x12d2c0: endbr64 ; add rsi, 0x8; add rdi, 0x8; mov edx, 0x10; jmp jump___GI_memcmp; 
0x53860: endbr64 ; pushr15; pushr14; mov r14, rsi; mov esi, 0x25; pushr13; pushr12; pushrbp; pushrbx; mov rbx, rdx; sub rsp, 0x78; mov qword [rsp+0x18], 0x0; calljump___GI___strchrnul; 
0x5bbf0: endbr64 ; pushr15; mov r15, rdx; pushr14; mov r14, rsi; pushr13; pushr12; pushrbp; pushrbx; mov rbx, rdi; mov rdi, r14; sub rsp, 0x4d8; mov rax, qword [rel data_1d6df8]; movdqu  xmm0, xmmword [rdx {__va_list_tag::gp_offset}] {__va_list_tag::fp_offset} {__va_list_tag::overflow_arg_area}; mov dword [rsp+0x4c], ecx; mov qword [rsp+0x70], rsi; mov eax, dword [fs:rax]; mov esi, 0x25; movups  xmmword [rsp+0xc8], xmm0; mov dword [rsp+0x80], eax; mov rax, qword [rdx+0x10 {__va_list_tag::reg_save_area}]; mov qword [rsp+0xd8], rax; calljump___GI___strchrnul; 
0xc4b20: endbr64 ; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; sub rsp, 0x8; call sub_246b0; mov rsi, rbp; lea rdi, [rbx+rax*4]; calljump___GI___wcscpy; 
0xb3240: endbr64 ; pushrbx; mov rbx, rdi; calljump___GI_strcspn; 
0xf4c40: endbr64 ; pushrbp; mov edx, 0x4; mov rbp, rdi; pushrbx; mov rbx, rsi; lea rsi, [rel 0x1997d7]  {"Pid:"}; sub rsp, 0x8; calljump___GI_strncmp; 
0xc6730: endbr64 ; pushrbp; mov rdx, rsi; mov rbp, rdi; pushrbx; mov rbx, rsi; xor esi, esi; sub rsp, 0x8; calljump___GI___wmemchr; 
0x9e120: endbr64 ; pushrbx; mov esi, 0x2f; mov rbx, rdi; calljump___GI_strrchr; 
0x38fa0: endbr64 ; pushr15; pushr14; pushr13; pushr12; mov r12, rdi; pushrbp; pushrbx; mov ebx, esi; mov esi, 0x2f; sub rsp, 0x8; calljump___GI_strchr; 
0x3e810: endbr64 ; pushrbp; mov esi, 0x3d; mov rbp, rsp; pushr13; pushr12; pushrbx; mov rbx, rdi; sub rsp, 0x18; calljump___GI_strchr; 
0x392f0: endbr64 ; pushr15; pushr14; pushr13; pushr12; mov r12, rsi; mov esi, 0x2f; pushrbp; pushrbx; sub rsp, 0xc8; mov qword [rsp+0x10], rdi; mov qword [rsp+0x8], rdx; mov qword [rsp+0x20], rcx; calljump___GI_strchr; 
0x139090: endbr64 ; pushr14; pushr13; pushr12; pushrbp; mov rbp, rsi; mov esi, 0xa; pushrbx; mov rbx, rdi; sub rsp, 0x10; calljump___GI_strchr; 
0x135930: endbr64 ; pushr13; pushr12; pushrbp; mov rbp, rsi; mov esi, 0xa; pushrbx; mov rbx, rdi; sub rsp, 0x18; calljump___GI_strchr; 
0x147580: endbr64 ; pushr12; mov r12, rsi; mov esi, 0x2e; pushrbp; movsxd  rbp, edx; pushrbx; calljump___GI_strchr; 
0x115c60: endbr64 ; pushrbp; movsxd  rax, esi; mov rsi, rdx; mov edx, ecx; pushrbx; add rdi, rax; mov rbx, rax; mov rbp, rdx; sub rsp, 0x8; calljump___GI_memcpy; 
0x115de0: endbr64 ; pushrbp; mov rax, rdi; mov rdi, rdx; mov edx, ecx; pushrbx; movsxd  rcx, esi; mov ebx, esi; mov rbp, rdx; lea rsi, [rax+rcx]; sub rsp, 0x8; calljump___GI_memcpy; 
0xc1b70: endbr64 ; shl rdx, 0x2; jmp jump___GI_memcpy; 
0xb61b0: endbr64 ; pushrbp; pushrbx; mov rbx, rdi; sub rsp, 0x8; calljump___wcslen_ifunc; 
0x7a7d0: endbr64 ; pushr14; pushr13; pushr12; mov r12, rdi; pushrbp; pushrbx; mov rbx, rsi; calljump___wcslen_ifunc; 
0x7a950: endbr64 ; pushr14; pushr13; pushr12; mov r12, rdi; pushrbp; mov rbp, rsi; pushrbx; calljump___wcslen_ifunc; 
0xc4a70: endbr64 ; pushr12; mov r12, rdi; mov rdi, rsi; pushrbp; mov rbp, rsi; pushrbx; calljump___wcslen_ifunc; 
0xc4b20: endbr64 ; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; sub rsp, 0x8; calljump___wcslen_ifunc; 
0xc5c20: endbr64 ; pushr13; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; sub rsp, 0x8; calljump___wcslen_ifunc; 
0xb6280: endbr64 ; pushr13; mov r13, rdi; mov rdi, rsi; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; sub rsp, 0x8; calljump___wcslen_ifunc; 
0xb6200: endbr64 ; pushr14; pushr13; pushr12; mov r12, rdi; mov rdi, rsi; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdx; calljump___wcslen_ifunc; 
0xc59b0: endbr64 ; pushrbp; mov rbp, rdi; mov rdi, rsi; pushrbx; mov rbx, rsi; sub rsp, 0x8; calljump___wcslen_ifunc; 
0x9e170: endbr64 ; mov rdx, rsi; xor esi, esi; jmp jump___GI_memset; 
0x9e520: endbr64 ; sub rsp, 0x8; mov rdx, rsi; xor esi, esi; calljump___GI_memset; 
0xc5c70: endbr64 ; pushr13; mov r13, rdi; pushr12; mov r12, rsi; mov rsi, rdx; pushrbp; mov rdi, r12; pushrbx; mov rbx, rdx; sub rsp, 0x8; calljump___wcsnlen_ifunc; 
0xc4ab0: endbr64 ; pushr13; mov r13, rsi; mov rsi, rdx; pushr12; mov r12, rdi; mov rdi, r13; pushrbp; pushrbx; mov rbx, rdx; sub rsp, 0x8; calljump___wcsnlen_ifunc; 
0xc5c20: endbr64 ; pushr13; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; sub rsp, 0x8; calljump___wcslen_ifunc; mov rsi, r12; mov rdi, rbp; lea r13, [rbx+rax*4]; calljump___wcsnlen_ifunc; 
0xfe000: endbr64 ; pushr12; mov r12, rdx; pushrbp; mov rbp, rdi; pushrbx; mov rbx, rsi; lea rsi, [rel 0x1998e8]  {"__memcmpeq"}; calljump___GI_strcmp; 
0x144e30: endbr64 ; pushrbp; mov rbp, rsp; pushr15; mov r15, rdx; pushr14; pushr13; pushr12; mov r12, rdi; mov rdi, rcx; pushrbx; mov rbx, rcx; sub rsp, 0xa8; mov qword [rbp-0xc8], rsi; lea rsi, [rel OPSYS]  {"unix"}; calljump___GI_strcmp; 
0x26a30: endbr64 ; mov rsi, qword [rsi]; mov rdi, qword [rdi]; jmp jump___GI_strcmp; 
0x150940: endbr64 ; pushr12; pushrbp; mov rbp, rsi; lea rsi, [rel 0x19c04c]  {"/var/run/utmp"}; pushrbx; mov rbx, rdi; calljump___GI_strcmp; 
0x26b50: endbr64 ; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; sub rsp, 0x8; mov rsi, qword [rsi]; mov rdi, qword [rdi]; calljump___GI_strcmp; 
0x2fe90: endbr64 ; mov rsi, qword [rsi]; mov rdi, qword [rdi]; jmp jump___GI_strcmp; 
0x139bd0: endbr64 ; pushr13; pushr12; mov r12, rdi; pushrbp; pushrbx; mov rbx, rsi; lea rsi, [rel 0x19bc13]; sub rsp, 0x18; calljump___GI_strpbrk; 

