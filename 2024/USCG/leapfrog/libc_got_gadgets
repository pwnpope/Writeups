0x0000000000081c10 : endbr64 ; and dword ptr [rdi], 0xffffffcf ; ret
0x0000000000087b70 : endbr64 ; and edi, 2 ; je 0x87b80 ; ret
0x00000000001541a0 : endbr64 ; and r8d, 3 ; jmp 0xeda00
0x0000000000087df0 : endbr64 ; cmp dword ptr [rdi], 1 ; je 0x87e00 ; ret
0x0000000000089b20 : endbr64 ; cmp edi, 0x20 ; je 0x89b30 ; ret
0x0000000000088a60 : endbr64 ; cmp edi, 0x21 ; je 0x88a70 ; ret
0x0000000000095bb0 : endbr64 ; cmp edi, 1 ; ja 0x95bc0 ; jmp 0x957b0
0x000000000008f610 : endbr64 ; cmp esi, 1 ; ja 0x8f620 ; jmp 0x8ecc0
0x0000000000112920 : endbr64 ; cmp r8, rcx ; jb 0x11292e ; jmp 0xf9a40
0x0000000000112250 : endbr64 ; cmp r8, rdx ; jb 0x112260 ; jmp 0xb4a10
0x00000000001127f0 : endbr64 ; cmp r8, rdx ; jb 0x1127fe ; jmp 0xde220
0x0000000000112810 : endbr64 ; cmp r8, rdx ; jb 0x11281e ; jmp 0xde220
0x00000000001134f0 : endbr64 ; cmp r8, rdx ; jb 0x113500 ; jmp 0xb6eb0
0x0000000000112230 : endbr64 ; cmp r9, rcx ; jb 0x112240 ; jmp 0xb4760
0x00000000001134d0 : endbr64 ; cmp r9, rcx ; jb 0x1134e0 ; jmp 0xb6b40
0x0000000000111550 : endbr64 ; cmp rcx, rdx ; jb 0x111560 ; jmp 0xd4010
0x00000000001128e0 : endbr64 ; cmp rcx, rdx ; jb 0x1128ee ; jmp 0xf9970
0x0000000000112900 : endbr64 ; cmp rcx, rdx ; jb 0x11290e ; jmp 0xf9a10
0x0000000000112d90 : endbr64 ; cmp rcx, rdx ; jb 0x112da0 ; jmp 0x245e0
0x0000000000112e60 : endbr64 ; cmp rcx, rdx ; jb 0x112e70 ; jmp 0xa1980
0x0000000000112e80 : endbr64 ; cmp rcx, rdx ; jb 0x112e90 ; jmp 0xa19f0
0x0000000000112fb0 : endbr64 ; cmp rcx, rdx ; jb 0x112fc0 ; jmp 0x244a0
0x0000000000113080 : endbr64 ; cmp rcx, rdx ; jb 0x11308e ; jmp 0xf9f40
0x0000000000113270 : endbr64 ; cmp rcx, rdx ; jb 0x113280 ; jmp 0x24420
0x0000000000113350 : endbr64 ; cmp rcx, rdx ; jb 0x113360 ; jmp 0xb6200
0x0000000000113370 : endbr64 ; cmp rcx, rdx ; jb 0x113380 ; jmp 0xb6280
0x00000000001134b0 : endbr64 ; cmp rcx, rdx ; jb 0x1134c0 ; jmp 0x24660
0x0000000000150c50 : endbr64 ; cmp rcx, rdx ; jb 0x150c5e ; jmp 0x150b40
0x0000000000111f10 : endbr64 ; cmp rdx, rsi ; jb 0x111f1e ; jmp 0xf8530
0x0000000000111f30 : endbr64 ; cmp rdx, rsi ; jb 0x111f3e ; jmp 0xfc800
0x0000000000111fa0 : endbr64 ; cmp rdx, rsi ; jb 0x111fae ; jmp 0xfcad0
0x000000000014f7d0 : endbr64 ; cmp rdx, rsi ; jb 0x14f7de ; jmp 0x14f770
0x0000000000116090 : endbr64 ; jmp 0x115ee0
0x00000000001440a0 : endbr64 ; jmp 0x143930
0x0000000000148c00 : endbr64 ; jmp 0x148660
0x0000000000149de0 : endbr64 ; jmp 0x149c60
0x0000000000149df0 : endbr64 ; jmp 0x149d20
0x000000000014a580 : endbr64 ; jmp 0x14a4c0
0x000000000014a650 : endbr64 ; jmp 0x14a590
0x0000000000151450 : endbr64 ; jmp 0x14f7f0
0x0000000000151440 : endbr64 ; jmp 0x14f840
0x0000000000151490 : endbr64 ; jmp 0x14f910
0x0000000000151460 : endbr64 ; jmp 0x14f980
0x0000000000151470 : endbr64 ; jmp 0x14f9d0
0x0000000000151480 : endbr64 ; jmp 0x14fa30
0x00000000001514a0 : endbr64 ; jmp 0x150850
0x00000000001514b0 : endbr64 ; jmp 0x150940
0x00000000000ee540 : endbr64 ; jmp 0x243a0
0x0000000000058bc0 : endbr64 ; jmp 0x58af0
0x000000000006a870 : endbr64 ; jmp 0x69d0c
0x00000000000a1270 : endbr64 ; jmp 0x74fe0
0x00000000000a1280 : endbr64 ; jmp 0x75010
0x0000000000080040 : endbr64 ; jmp 0x76cd0
0x0000000000080ac0 : endbr64 ; jmp 0x860c0
0x0000000000093980 : endbr64 ; jmp 0x8a180
0x0000000000093f20 : endbr64 ; jmp 0x8cf90
0x0000000000093f10 : endbr64 ; jmp 0x8d230
0x0000000000093b10 : endbr64 ; jmp 0x8de90
0x0000000000093910 : endbr64 ; jmp 0x90560
0x0000000000113290 : endbr64 ; jmp 0xb4e30
0x00000000000d4000 : endbr64 ; jmp 0xda620
0x00000000001527f0 : endbr64 ; jmp 0xee740
0x00000000000ef1a0 : endbr64 ; mov dword ptr [rdi + 4], esi ; xor eax, eax ; ret
0x00000000000f8fe0 : endbr64 ; mov eax, 0x102 ; syscall
0x00000000000fa2b0 : endbr64 ; mov eax, 0x107 ; syscall
0x00000000000f9e90 : endbr64 ; mov eax, 0x10a ; syscall
0x0000000000107730 : endbr64 ; mov eax, 0x110 ; syscall
0x0000000000107790 : endbr64 ; mov eax, 0x11b ; syscall
0x0000000000106ef0 : endbr64 ; mov eax, 0x11f ; syscall
0x0000000000106640 : endbr64 ; mov eax, 0x122 ; syscall
0x0000000000107250 : endbr64 ; mov eax, 0x123 ; syscall
0x00000000000f5400 : endbr64 ; mov eax, 0x124 ; syscall
0x00000000000f93c0 : endbr64 ; mov eax, 0x125 ; syscall
0x0000000000107400 : endbr64 ; mov eax, 0x126 ; syscall
0x00000000001077c0 : endbr64 ; mov eax, 0x12c ; syscall
0x0000000000105fa0 : endbr64 ; mov eax, 0x131 ; syscall
0x00000000001041e0 : endbr64 ; mov eax, 0x132 ; syscall
0x0000000000107820 : endbr64 ; mov eax, 0x134 ; syscall
0x0000000000107850 : endbr64 ; mov eax, 0x13f ; syscall
0x0000000000107880 : endbr64 ; mov eax, 0x14a ; syscall
0x00000000001078b0 : endbr64 ; mov eax, 0x14b ; syscall
0x00000000000f5080 : endbr64 ; mov eax, 0x15 ; syscall
0x0000000000093900 : endbr64 ; mov eax, 0x18 ; syscall
0x0000000000107550 : endbr64 ; mov eax, 0x1ac ; syscall
0x0000000000107310 : endbr64 ; mov eax, 0x1ae ; syscall
0x0000000000102430 : endbr64 ; mov eax, 0x1b ; syscall
0x00000000001072e0 : endbr64 ; mov eax, 0x1b0 ; syscall
0x0000000000107340 : endbr64 ; mov eax, 0x1b1 ; syscall
0x0000000000107580 : endbr64 ; mov eax, 0x1b2 ; syscall
0x00000000000f51d0 : endbr64 ; mov eax, 0x1b4 ; syscall
0x00000000001075b0 : endbr64 ; mov eax, 0x1b6 ; syscall
0x0000000000102370 : endbr64 ; mov eax, 0x1c ; syscall
0x0000000000107670 : endbr64 ; mov eax, 0x1c0 ; syscall
0x0000000000108b90 : endbr64 ; mov eax, 0x1e ; syscall
0x0000000000108c30 : endbr64 ; mov eax, 0x1f ; syscall
0x00000000000f53a0 : endbr64 ; mov eax, 0x20 ; syscall
0x00000000000f53d0 : endbr64 ; mov eax, 0x21 ; syscall
0x00000000000ca360 : endbr64 ; mov eax, 0x24 ; syscall
0x00000000000d3fd0 : endbr64 ; mov eax, 0x25 ; syscall
0x00000000000ca390 : endbr64 ; mov eax, 0x26 ; syscall
0x00000000000da660 : endbr64 ; mov eax, 0x27 ; syscall
0x0000000000108790 : endbr64 ; mov eax, 0x29 ; syscall
0x0000000000108660 : endbr64 ; mov eax, 0x30 ; syscall
0x0000000000107e10 : endbr64 ; mov eax, 0x31 ; syscall
0x0000000000107fd0 : endbr64 ; mov eax, 0x32 ; syscall
0x0000000000107f10 : endbr64 ; mov eax, 0x33 ; syscall
0x0000000000107ee0 : endbr64 ; mov eax, 0x34 ; syscall
0x00000000000d4a50 : endbr64 ; mov eax, 0x3b ; syscall
0x000000000003b1c0 : endbr64 ; mov eax, 0x3e ; syscall
0x00000000000f02f0 : endbr64 ; mov eax, 0x3f ; syscall
0x0000000000108a90 : endbr64 ; mov eax, 0x40 ; syscall
0x0000000000108bc0 : endbr64 ; mov eax, 0x43 ; syscall
0x0000000000108a20 : endbr64 ; mov eax, 0x44 ; syscall
0x0000000000108a50 : endbr64 ; mov eax, 0x47 ; syscall
0x00000000000f5c70 : endbr64 ; mov eax, 0x49 ; syscall
0x0000000000104db0 : endbr64 ; mov eax, 0x4c ; syscall
0x00000000000fc610 : endbr64 ; mov eax, 0x4d ; syscall
0x00000000000f50b0 : endbr64 ; mov eax, 0x50 ; syscall
0x00000000000f5730 : endbr64 ; mov eax, 0x51 ; syscall
0x0000000000058cf0 : endbr64 ; mov eax, 0x52 ; syscall
0x00000000000f8fb0 : endbr64 ; mov eax, 0x53 ; syscall
0x00000000000f9a70 : endbr64 ; mov eax, 0x54 ; syscall
0x00000000000f8e00 : endbr64 ; mov eax, 0x56 ; syscall
0x00000000000fa280 : endbr64 ; mov eax, 0x57 ; syscall
0x00000000000f9e60 : endbr64 ; mov eax, 0x58 ; syscall
0x00000000000f9a10 : endbr64 ; mov eax, 0x59 ; syscall
0x00000000000f50e0 : endbr64 ; mov eax, 0x5a ; syscall
0x00000000000f5760 : endbr64 ; mov eax, 0x5b ; syscall
0x00000000000f5110 : endbr64 ; mov eax, 0x5c ; syscall
0x00000000000f5900 : endbr64 ; mov eax, 0x5d ; syscall
0x00000000000f8dd0 : endbr64 ; mov eax, 0x5e ; syscall
0x00000000000fa270 : endbr64 ; mov eax, 0x5f ; syscall
0x00000000000fae90 : endbr64 ; mov eax, 0x62 ; syscall
0x0000000000107700 : endbr64 ; mov eax, 0x63 ; syscall
0x00000000000f0290 : endbr64 ; mov eax, 0x64 ; syscall
0x00000000000da710 : endbr64 ; mov eax, 0x66 ; syscall
0x0000000000107460 : endbr64 ; mov eax, 0x67 ; syscall
0x00000000000d9750 : endbr64 ; mov eax, 0x68 ; syscall
0x00000000000d9740 : endbr64 ; mov eax, 0x6b ; syscall
0x00000000000d9730 : endbr64 ; mov eax, 0x6c ; syscall
0x00000000000ee830 : endbr64 ; mov eax, 0x6d ; syscall
0x00000000000da670 : endbr64 ; mov eax, 0x6e ; syscall
0x00000000000da650 : endbr64 ; mov eax, 0x6f ; syscall
0x00000000000ee970 : endbr64 ; mov eax, 0x70 ; syscall
0x00000000000d9760 : endbr64 ; mov eax, 0x73 ; syscall
0x00000000000da6b0 : endbr64 ; mov eax, 0x76 ; syscall
0x00000000000da680 : endbr64 ; mov eax, 0x78 ; syscall
0x00000000000da620 : endbr64 ; mov eax, 0x79 ; syscall
0x0000000000106c90 : endbr64 ; mov eax, 0x7a ; syscall
0x0000000000106c60 : endbr64 ; mov eax, 0x7b ; syscall
0x00000000000da6e0 : endbr64 ; mov eax, 0x7c ; syscall
0x0000000000107190 : endbr64 ; mov eax, 0x7d ; syscall
0x00000000001071c0 : endbr64 ; mov eax, 0x7e ; syscall
0x000000000003b640 : endbr64 ; mov eax, 0x83 ; syscall
0x0000000000107760 : endbr64 ; mov eax, 0x86 ; syscall
0x00000000001069f0 : endbr64 ; mov eax, 0x87 ; syscall
0x00000000000f9b00 : endbr64 ; mov eax, 0x89 ; syscall
0x00000000000f5d10 : endbr64 ; mov eax, 0x8a ; syscall
0x00000000000fb140 : endbr64 ; mov eax, 0x8c ; syscall
0x00000000000fb180 : endbr64 ; mov eax, 0x8d ; syscall
0x00000000000ee6e0 : endbr64 ; mov eax, 0x8e ; syscall
0x00000000000ee5c0 : endbr64 ; mov eax, 0x8f ; syscall
0x00000000000ee710 : endbr64 ; mov eax, 0x90 ; syscall
0x00000000000ee5f0 : endbr64 ; mov eax, 0x91 ; syscall
0x00000000000ee620 : endbr64 ; mov eax, 0x92 ; syscall
0x00000000000ee650 : endbr64 ; mov eax, 0x93 ; syscall
0x00000000000ee680 : endbr64 ; mov eax, 0x94 ; syscall
0x0000000000102540 : endbr64 ; mov eax, 0x95 ; syscall
0x0000000000102e60 : endbr64 ; mov eax, 0x96 ; syscall
0x0000000000102570 : endbr64 ; mov eax, 0x97 ; syscall
0x0000000000102e90 : endbr64 ; mov eax, 0x98 ; syscall
0x0000000000105e00 : endbr64 ; mov eax, 0x99 ; syscall
0x0000000000107150 : endbr64 ; mov eax, 0x9a ; syscall
0x00000000001075e0 : endbr64 ; mov eax, 0x9b ; syscall
0x0000000000107120 : endbr64 ; mov eax, 0x9e ; syscall
0x0000000000102d90 : endbr64 ; mov eax, 0xa ; syscall
0x00000000000fb310 : endbr64 ; mov eax, 0xa1 ; syscall
0x00000000001041b0 : endbr64 ; mov eax, 0xa2 ; syscall
0x00000000000fb220 : endbr64 ; mov eax, 0xa3 ; syscall
0x0000000000106f70 : endbr64 ; mov eax, 0xa6 ; syscall
0x0000000000104180 : endbr64 ; mov eax, 0xa7 ; syscall
0x0000000000104150 : endbr64 ; mov eax, 0xa8 ; syscall
0x0000000000103ff0 : endbr64 ; mov eax, 0xaa ; syscall
0x0000000000103e00 : endbr64 ; mov eax, 0xab ; syscall
0x0000000000105f60 : endbr64 ; mov eax, 0xac ; syscall
0x0000000000105f30 : endbr64 ; mov eax, 0xad ; syscall
0x00000000001071f0 : endbr64 ; mov eax, 0xae ; syscall
0x0000000000102ec0 : endbr64 ; mov eax, 0xb ; syscall
0x0000000000107220 : endbr64 ; mov eax, 0xb0 ; syscall
0x0000000000107370 : endbr64 ; mov eax, 0xb1 ; syscall
0x0000000000107520 : endbr64 ; mov eax, 0xb4 ; syscall
0x00000000001078e0 : endbr64 ; mov eax, 0xba ; syscall
0x0000000000106c30 : endbr64 ; mov eax, 0xbb ; syscall
0x00000000000fb2b0 : endbr64 ; mov eax, 0xc ; syscall
0x0000000000102130 : endbr64 ; mov eax, 0xc2 ; syscall
0x0000000000102160 : endbr64 ; mov eax, 0xc3 ; syscall
0x00000000000fc180 : endbr64 ; mov eax, 0xc4 ; syscall
0x0000000000103b30 : endbr64 ; mov eax, 0xc5 ; syscall
0x0000000000102190 : endbr64 ; mov eax, 0xc6 ; syscall
0x00000000000fc1b0 : endbr64 ; mov eax, 0xc7 ; syscall
0x00000000000c79b0 : endbr64 ; mov eax, 0xc9 ; syscall
0x00000000000ee6b0 : endbr64 ; mov eax, 0xcb ; syscall
0x00000000001063c0 : endbr64 ; mov eax, 0xd5 ; syscall
0x0000000000107180 : endbr64 ; mov eax, 0xe4 ; syscall
0x00000000001078f0 : endbr64 ; mov eax, 0xea ; syscall
0x00000000000960c0 : endbr64 ; mov eax, 0xf5 ; syscall
0x00000000001067c0 : endbr64 ; mov eax, 0xfd ; syscall
0x00000000001073d0 : endbr64 ; mov eax, 0xfe ; syscall
0x0000000000107430 : endbr64 ; mov eax, 0xff ; syscall
0x00000000000852d0 : endbr64 ; mov eax, 0xffffffff ; ret
0x000000000013e170 : endbr64 ; mov eax, 1 ; ret
0x00000000000fa8b0 : endbr64 ; mov eax, 1 ; syscall
0x0000000000140060 : endbr64 ; mov eax, 2 ; ret
0x0000000000095be0 : endbr64 ; mov eax, 3 ; syscall
0x00000000000f5ca0 : endbr64 ; mov eax, 5 ; syscall
0x00000000000f8f60 : endbr64 ; mov eax, 8 ; syscall
0x0000000000124e30 : endbr64 ; mov eax, dword ptr [rdi + 0x20] ; ret
0x000000000014ac60 : endbr64 ; mov eax, dword ptr [rdi + 0x28] ; ret
0x00000000000d3870 : endbr64 ; mov eax, dword ptr [rdi] ; ret
0x0000000000033c90 : endbr64 ; mov eax, edi ; and eax, 0x7f ; ret
0x0000000000114130 : endbr64 ; mov eax, edi ; bswap eax ; ret
0x00000000000536f0 : endbr64 ; mov ecx, 2 ; jmp 0x5e5b0
0x00000000000b3e60 : endbr64 ; mov ecx, 2 ; jmp 0x6c600
0x00000000000533d0 : endbr64 ; mov ecx, 6 ; jmp 0x5e5b0
0x00000000000b3b30 : endbr64 ; mov ecx, 6 ; jmp 0x6c600
0x0000000000102670 : endbr64 ; mov edi, 0x1028 ; jmp 0x243b0
0x000000000013d600 : endbr64 ; mov edi, 0xa ; jmp 0x128540
0x0000000000139e40 : endbr64 ; mov edi, 1 ; jmp 0x128540
0x000000000013a130 : endbr64 ; mov edi, 2 ; jmp 0x128540
0x000000000013b120 : endbr64 ; mov edi, 3 ; jmp 0x128540
0x000000000013c200 : endbr64 ; mov edi, 4 ; jmp 0x128540
0x000000000013c7a0 : endbr64 ; mov edi, 5 ; jmp 0x128540
0x000000000013cab0 : endbr64 ; mov edi, 6 ; jmp 0x128540
0x000000000013dab0 : endbr64 ; mov edi, 7 ; jmp 0x128540
0x000000000013d050 : endbr64 ; mov edi, 8 ; jmp 0x128540
0x000000000013d3b0 : endbr64 ; mov edi, 9 ; jmp 0x128540
0x0000000000083d20 : endbr64 ; mov edi, dword ptr [rdi + 0x70] ; jmp 0xf5ca0
0x0000000000083d10 : endbr64 ; mov edi, dword ptr [rdi + 0x70] ; jmp 0xf8f60
0x0000000000083d60 : endbr64 ; mov edi, dword ptr [rdi + 0x70] ; jmp 0xfa460
0x00000000000c6d10 : endbr64 ; mov edx, 0x1a ; jmp 0xc6c20
0x0000000000080310 : endbr64 ; mov edx, 0x2000 ; jmp 0x79910
0x00000000000777d0 : endbr64 ; mov edx, 1 ; jmp 0x776e0
0x0000000000034430 : endbr64 ; mov edx, 5 ; jmp 0x34410
0x000000000013f880 : endbr64 ; mov edx, 8 ; jmp 0x14a0b0
0x0000000000059180 : endbr64 ; mov esi, 0x1c0 ; jmp 0xf8fb0
0x000000000011dd00 : endbr64 ; mov esi, 1 ; jmp 0x11dc40
0x000000000003ac90 : endbr64 ; mov esi, 1 ; jmp 0x3abd0
0x0000000000090160 : endbr64 ; mov esi, 1 ; jmp 0x90050
0x0000000000117b20 : endbr64 ; mov esi, 2 ; jmp 0x116fd0
0x00000000000ce3d0 : endbr64 ; mov r8, rcx ; xor ecx, ecx ; jmp 0xcac80
0x00000000000867a0 : endbr64 ; mov rax, qword ptr [rdi + 0x68] ; ret
0x0000000000095170 : endbr64 ; mov rax, qword ptr [rdi + 0x78] ; ret
0x00000000000867b0 : endbr64 ; mov rax, rdi ; ret
0x0000000000076f22 : endbr64 ; mov rbp, rax ; jmp 0x24a7c
0x00000000000772d2 : endbr64 ; mov rbp, rax ; jmp 0x24acb
0x00000000000774a2 : endbr64 ; mov rbp, rax ; jmp 0x24b1a
0x0000000000077c5a : endbr64 ; mov rbp, rax ; jmp 0x24bb8
0x0000000000077dba : endbr64 ; mov rbp, rax ; jmp 0x24c07
0x0000000000077f41 : endbr64 ; mov rbp, rax ; jmp 0x24c56
0x00000000000780da : endbr64 ; mov rbp, rax ; jmp 0x24ca5
0x000000000007835a : endbr64 ; mov rbp, rax ; jmp 0x24cf4
0x00000000000786e8 : endbr64 ; mov rbp, rax ; jmp 0x24d43
0x0000000000079752 : endbr64 ; mov rbp, rax ; jmp 0x24e38
0x00000000000798fa : endbr64 ; mov rbp, rax ; jmp 0x24e87
0x0000000000079a9a : endbr64 ; mov rbp, rax ; jmp 0x24ed6
0x0000000000079d76 : endbr64 ; mov rbp, rax ; jmp 0x24f25
0x0000000000079ec0 : endbr64 ; mov rbp, rax ; jmp 0x24f74
0x000000000007a19a : endbr64 ; mov rbp, rax ; jmp 0x24fc3
0x000000000007a362 : endbr64 ; mov rbp, rax ; jmp 0x25012
0x000000000007a502 : endbr64 ; mov rbp, rax ; jmp 0x25061
0x000000000007a93a : endbr64 ; mov rbp, rax ; jmp 0x250ff
0x000000000007adea : endbr64 ; mov rbp, rax ; jmp 0x2514e
0x000000000007af4a : endbr64 ; mov rbp, rax ; jmp 0x2519d
0x000000000007b11a : endbr64 ; mov rbp, rax ; jmp 0x251ec
0x000000000007f06a : endbr64 ; mov rbp, rax ; jmp 0x252dc
0x000000000007f7b2 : endbr64 ; mov rbp, rax ; jmp 0x2532b
0x000000000007fa3d : endbr64 ; mov rbp, rax ; jmp 0x2537a
0x000000000007fb6a : endbr64 ; mov rbp, rax ; jmp 0x253c9
0x000000000007fcea : endbr64 ; mov rbp, rax ; jmp 0x25418
0x000000000007fe8a : endbr64 ; mov rbp, rax ; jmp 0x25467
0x00000000000801e2 : endbr64 ; mov rbp, rax ; jmp 0x254b6
0x00000000000802fa : endbr64 ; mov rbp, rax ; jmp 0x25505
0x0000000000080bea : endbr64 ; mov rbp, rax ; jmp 0x25554
0x0000000000080d8a : endbr64 ; mov rbp, rax ; jmp 0x255a3
0x0000000000081007 : endbr64 ; mov rbp, rax ; jmp 0x255f2
0x0000000000081e92 : endbr64 ; mov rbp, rax ; jmp 0x25646
0x00000000000d3ebf : endbr64 ; mov rbp, rax ; jmp 0x25747
0x00000000000fce52 : endbr64 ; mov rbp, rax ; jmp 0x25958
0x0000000000077682 : endbr64 ; mov rbx, rax ; jmp 0x24b69
0x0000000000078a7a : endbr64 ; mov rbx, rax ; jmp 0x24d92
0x00000000000794ea : endbr64 ; mov rbx, rax ; jmp 0x24de1
0x000000000007a722 : endbr64 ; mov rbx, rax ; jmp 0x250b0
0x000000000007b2ca : endbr64 ; mov rbx, rax ; jmp 0x2523b
0x000000000007db37 : endbr64 ; mov rbx, rax ; jmp 0x2528a
0x00000000000831d6 : endbr64 ; mov rbx, rax ; jmp 0x25695
0x000000000009054b : endbr64 ; mov rbx, rax ; jmp 0x25707
0x0000000000104a91 : endbr64 ; mov rbx, rax ; jmp 0x2596d
0x0000000000104c81 : endbr64 ; mov rbx, rax ; jmp 0x25981
0x0000000000104d1d : endbr64 ; mov rbx, rax ; jmp 0x25990
0x000000000011182f : endbr64 ; mov rbx, rax ; jmp 0x2599f
0x0000000000111aaf : endbr64 ; mov rbx, rax ; jmp 0x259ee
0x0000000000111dca : endbr64 ; mov rbx, rax ; jmp 0x25a3d
0x00000000001121a4 : endbr64 ; mov rbx, rax ; jmp 0x25a8f
0x0000000000119294 : endbr64 ; mov rbx, rax ; jmp 0x25c0b
0x0000000000151aeb : endbr64 ; mov rbx, rax ; jmp 0x25ccf
0x00000000001132a0 : endbr64 ; mov rcx, rdi ; jmp 0x1132c4
0x0000000000046c30 : endbr64 ; mov rcx, rdx ; xor edx, edx ; jmp 0x44980
0x00000000000496c0 : endbr64 ; mov rcx, rdx ; xor edx, edx ; jmp 0x47450
0x000000000004c6e0 : endbr64 ; mov rcx, rdx ; xor edx, edx ; jmp 0x4a550
0x0000000000052440 : endbr64 ; mov rcx, rdx ; xor edx, edx ; jmp 0x4fe90
0x00000000000b9c20 : endbr64 ; mov rcx, rdx ; xor edx, edx ; jmp 0xb7990
0x00000000000bc660 : endbr64 ; mov rcx, rdx ; xor edx, edx ; jmp 0xba3d0
0x00000000000bf6e0 : endbr64 ; mov rcx, rdx ; xor edx, edx ; jmp 0xbd540
0x00000000000c4980 : endbr64 ; mov rcx, rdx ; xor edx, edx ; jmp 0xc2490
0x000000000014afe0 : endbr64 ; mov rdi, qword ptr [rdi + 0x18] ; jmp 0x77180
0x0000000000102660 : endbr64 ; mov rdi, rsi ; jmp 0x243a0
0x000000000009e170 : endbr64 ; mov rdx, rsi ; xor esi, esi ; jmp 0x246c0
0x000000000008f630 : endbr64 ; mov rdx, rsi ; xor esi, esi ; jmp 0x8ecc0
0x0000000000095c10 : endbr64 ; mov rdx, rsi ; xor esi, esi ; jmp 0x960c0
0x0000000000105f90 : endbr64 ; mov rsi, rdi ; xor edi, edi ; jmp 0x105fa0
0x000000000003ae00 : endbr64 ; mov rsi, rsp ; jmp 0x89d20
0x0000000000119940 : endbr64 ; movsxd rdx, edx ; jmp 0x11cbf0
0x00000000000f9030 : endbr64 ; or dh, 0x10 ; xor ecx, ecx ; jmp 0xf9060
0x0000000000024020 : endbr64 ; push 0 ; jmp 0x24000
0x0000000000024390 : endbr64 ; push 0x10 ; jmp 0x24000
0x0000000000024370 : endbr64 ; push 0x11 ; jmp 0x24000
0x0000000000024340 : endbr64 ; push 0x12 ; jmp 0x24000
0x0000000000024320 : endbr64 ; push 0x13 ; jmp 0x24000
0x0000000000024310 : endbr64 ; push 0x14 ; jmp 0x24000
0x0000000000024300 : endbr64 ; push 0x15 ; jmp 0x24000
0x00000000000242d0 : endbr64 ; push 0x16 ; jmp 0x24000
0x00000000000242b0 : endbr64 ; push 0x17 ; jmp 0x24000
0x00000000000242a0 : endbr64 ; push 0x18 ; jmp 0x24000
0x0000000000024290 : endbr64 ; push 0x19 ; jmp 0x24000
0x0000000000024270 : endbr64 ; push 0x1a ; jmp 0x24000
0x0000000000024260 : endbr64 ; push 0x1b ; jmp 0x24000
0x0000000000024240 : endbr64 ; push 0x1c ; jmp 0x24000
0x0000000000024230 : endbr64 ; push 0x1d ; jmp 0x24000
0x0000000000024210 : endbr64 ; push 0x1e ; jmp 0x24000
0x0000000000024200 : endbr64 ; push 0x1f ; jmp 0x24000
0x00000000000241f0 : endbr64 ; push 0x20 ; jmp 0x24000
0x00000000000241e0 : endbr64 ; push 0x21 ; jmp 0x24000
0x00000000000241d0 : endbr64 ; push 0x22 ; jmp 0x24000
0x00000000000241c0 : endbr64 ; push 0x23 ; jmp 0x24000
0x00000000000241a0 : endbr64 ; push 0x24 ; jmp 0x24000
0x0000000000024190 : endbr64 ; push 0x25 ; jmp 0x24000
0x0000000000024180 : endbr64 ; push 0x26 ; jmp 0x24000
0x0000000000024170 : endbr64 ; push 0x27 ; jmp 0x24000
0x0000000000024140 : endbr64 ; push 0x28 ; jmp 0x24000
0x0000000000024130 : endbr64 ; push 0x29 ; jmp 0x24000
0x0000000000024120 : endbr64 ; push 0x2a ; jmp 0x24000
0x0000000000024110 : endbr64 ; push 0x2b ; jmp 0x24000
0x0000000000024100 : endbr64 ; push 0x2c ; jmp 0x24000
0x00000000000240f0 : endbr64 ; push 0x2d ; jmp 0x24000
0x00000000000240d0 : endbr64 ; push 0x2e ; jmp 0x24000
0x00000000000240c0 : endbr64 ; push 0x2f ; jmp 0x24000
0x00000000000240b0 : endbr64 ; push 0x30 ; jmp 0x24000
0x00000000000240a0 : endbr64 ; push 0x31 ; jmp 0x24000
0x0000000000024090 : endbr64 ; push 0x32 ; jmp 0x24000
0x0000000000024080 : endbr64 ; push 0x33 ; jmp 0x24000
0x0000000000024070 : endbr64 ; push 0x34 ; jmp 0x24000
0x0000000000024050 : endbr64 ; push 0x35 ; jmp 0x24000
0x0000000000024040 : endbr64 ; push 0x36 ; jmp 0x24000
0x0000000000024030 : endbr64 ; push 0x37 ; jmp 0x24000
0x0000000000024010 : endbr64 ; push 0x38 ; jmp 0x24000
0x00000000000242e0 : endbr64 ; push 0xa ; jmp 0x24000
0x00000000000242f0 : endbr64 ; push 0xb ; jmp 0x24000
0x0000000000024330 : endbr64 ; push 0xc ; jmp 0x24000
0x0000000000024350 : endbr64 ; push 0xd ; jmp 0x24000
0x0000000000024360 : endbr64 ; push 0xe ; jmp 0x24000
0x0000000000024380 : endbr64 ; push 0xf ; jmp 0x24000
0x0000000000024060 : endbr64 ; push 1 ; jmp 0x24000
0x00000000000240e0 : endbr64 ; push 2 ; jmp 0x24000
0x0000000000024150 : endbr64 ; push 3 ; jmp 0x24000
0x0000000000024160 : endbr64 ; push 4 ; jmp 0x24000
0x00000000000241b0 : endbr64 ; push 5 ; jmp 0x24000
0x0000000000024220 : endbr64 ; push 6 ; jmp 0x24000
0x0000000000024250 : endbr64 ; push 7 ; jmp 0x24000
0x0000000000024280 : endbr64 ; push 8 ; jmp 0x24000
0x00000000000242c0 : endbr64 ; push 9 ; jmp 0x24000
0x0000000000025dc0 : endbr64 ; ret
0x00000000000c1b90 : endbr64 ; shl rdx, 2 ; jmp 0x243f0
0x00000000000c1b80 : endbr64 ; shl rdx, 2 ; jmp 0x24450
0x00000000000c1b70 : endbr64 ; shl rdx, 2 ; jmp 0x24650
0x0000000000084850 : endbr64 ; test byte ptr [rdi], 0x80 ; jne 0x84860 ; ret
0x0000000000105850 : endbr64 ; test rdi, rdi ; je 0x105860 ; jmp 0x104f00
0x00000000001192d0 : endbr64 ; test rdi, rdi ; je 0x1192e0 ; jmp 0x118a70
0x000000000004d390 : endbr64 ; test rdi, rdi ; je 0x4d3a0 ; jmp 0x4cf60
0x00000000001526f0 : endbr64 ; test rsi, rsi ; je 0x152700 ; jmp 0x3c050
0x000000000003bea0 : endbr64 ; test rsi, rsi ; je 0x3beb0 ; jmp 0x3be40
0x00000000000858d0 : endbr64 ; xor eax, eax ; ret
0x00000000000fa7d0 : endbr64 ; xor eax, eax ; syscall
0x0000000000104b40 : endbr64 ; xor ecx, ecx ; jmp 0x1043a0
0x0000000000108a80 : endbr64 ; xor ecx, ecx ; jmp 0x108b50
0x0000000000113310 : endbr64 ; xor ecx, ecx ; jmp 0x113331
0x00000000000597b0 : endbr64 ; xor ecx, ecx ; jmp 0x5e2d0
0x000000000005e530 : endbr64 ; xor ecx, ecx ; jmp 0x5e5b0
0x0000000000067370 : endbr64 ; xor ecx, ecx ; jmp 0x6c320
0x000000000006c580 : endbr64 ; xor ecx, ecx ; jmp 0x6c600
0x00000000000804f0 : endbr64 ; xor ecx, ecx ; jmp 0x80410
0x0000000000080620 : endbr64 ; xor ecx, ecx ; jmp 0x805a0
0x0000000000080a10 : endbr64 ; xor ecx, ecx ; jmp 0x808c0
0x00000000000f0500 : endbr64 ; xor ecx, ecx ; jmp 0xf03a0
0x0000000000139a80 : endbr64 ; xor edi, edi ; jmp 0x128540
0x000000000003b880 : endbr64 ; xor edi, edi ; jmp 0x3b330
0x000000000003bb00 : endbr64 ; xor edx, edx ; jmp 0x3ba30
0x000000000008d3a0 : endbr64 ; xor edx, edx ; jmp 0x8d270
0x00000000000fbbb0 : endbr64 ; xor edx, edx ; jmp 0xfba90
0x000000000002576b : endbr64 ; xor edx, edx ; jmp 0xfbb00
0x0000000000106f60 : endbr64 ; xor esi, esi ; jmp 0x106f70
0x000000000003aca0 : endbr64 ; xor esi, esi ; jmp 0x3abd0
0x000000000003c7d0 : endbr64 ; xor esi, esi ; jmp 0x3c050
0x000000000003bf80 : endbr64 ; xor esi, esi ; jmp 0x44230
0x00000000000ee860 : endbr64 ; xor esi, esi ; xor edi, edi ; jmp 0xee830
0x000000000003f1c0 : endbr64 ; xor r8d, r8d ; jmp 0x3ede0
0x000000000007b720 : endbr64 ; xor r8d, r8d ; jmp 0x7b6a0
0x00000000000960a0 : endbr64 ; xor r8d, r8d ; jmp 0x960f0
0x00000000000960b0 : endbr64 ; xor r8d, r8d ; jmp 0x961b0
0x00000000000788a0 : endbr64 ; xor r9d, r9d ; jmp 0x78700
0x000000000007abd0 : endbr64 ; xor r9d, r9d ; jmp 0x7a9e0
0x0000000000088260 : endbr64 ; xor r9d, r9d ; jmp 0x88150



0x9f9fa: mov rdi, rsi; mov r12, rsi; callsub_244b0; mov rdi, r13; lea rsi, [rax+0x100]; mov rbp, rax; calljump___GI___strnlen; 
0x9fb06: mov rsi, qword [rsp+0x28]; lea rdi, [rdx+r14]; mov qword [rsp+0x18], r10; mov qword [rsp+0x10], rcx; mov qword [rsp+0x8], rdx; calljump___GI___strnlen; 
0x9fc36: lea rdi, [r13+r14]; lea rsi, [r12+0x200]; mov qword [rsp+0x10], rcx; mov qword [rsp+0x8], rdx; calljump___GI___strnlen; 
0x1327d1: mov r14d, dword [rsp+0x18]; mov rdi, rbp; mov rsi, r14; calljump___GI___strnlen; 
0xa257d: mov rdi, rbp; callsub_244b0; mov rdi, r13; mov rsi, rax; mov qword [rsp+0x8], rax; mov r14, rax; or  rsi, 0x200; calljump___GI___strnlen; 
0xa26cb: mov rax, qword [rsp+0x8]; mov esi, 0x800; lea rdi, [r15+rax]; calljump___GI___strnlen; 
0x9e0e7: mov rsi, rbx; mov rdi, rbp; calljump___GI___strnlen; 
0x3e858: calljump___GI___strnlen; 
0xa19a2: mov rsi, rbx; mov rdi, r12; mov r14, rax; calljump___GI___strnlen; 
0xb4b15: mov rdi, r14; calljump___GI___strnlen; 
0x53ee0: sub rsi, rbp; mov rdi, r12; calljump___GI___strnlen; 
0xb47c0: mov rbx, qword [rsi]; mov r14, rdi; mov r13, rsi; lea rsi, [rdx-0x1]; mov r15, rcx; mov rdi, rbx; calljump___GI___strnlen; 
0xa1d90: endbr64 ; push rbp; mov rbp, rdi; push rbx; sub rsp, 0x8; call jump___GI___strnlen; 
0x9f742: mov rsi, qword [rsp+0x38]; lea rdi, [rdx+r15]; mov qword [rsp+0x28], rcx; mov qword [rsp+0x20], r8; mov qword [rsp+0x18], r9; mov qword [rsp+0x10], r10; mov qword [rsp+0x8], rdx; calljump___GI___strnlen; 
0x9f8bc: mov rsi, qword [rsp+0x20]; lea rdi, [r13+r15]; mov qword [rsp+0x18], r8; mov qword [rsp+0x10], r9; mov qword [rsp+0x8], rdx; calljump___GI___strnlen; 
0xa226d: mov rsi, qword [rsp+0x28]; lea rdi, [r15+r14]; mov qword [rsp+0x20], rcx; mov qword [rsp+0x18], r8; mov qword [rsp+0x10], rdx; mov qword [rsp+0x8], r9; calljump___GI___strnlen; 
0xa23f0: mov rsi, qword [rsp+0x18]; lea rdi, [r15+r13]; mov qword [rsp+0x10], r8; mov qword [rsp+0x8], r9; calljump___GI___strnlen; 
0xd4c50: lea rdi, [rel 0x197aa9]  {"PATH"}; callgetenv; mov esi, 0xff; mov rdi, rbx; testrax, rax; mov r15, rax; lea rax, [rel 0x1994d2]  {"/bin:/usr/bin"}; cmove   r15, rax; calljump___GI___strnlen; 
0xd4c8a: mov esi, 0xfff; mov rdi, r15; calljump___GI___strnlen; 
0xd5000: pushr14; mov r14, rdi; pushr13; pushr12; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdx; sub rsp, 0x20; mov r13, qword [rsi+0x8]; mov qword [rsp+0x8], rdi; lea r12, [rsp+0x18]; mov qword [rsp+0x18], 0x0; shr r13, 0x2; lea rsi, [r13-0x1]; calljump___GI___strnlen; 
0xf16b9: mov rsi, r15; sub rsi, rdi; mov rdi, r14; sub rsi, 0x1; calljump___GI___strnlen; 
0x14f4c4: mov rax, qword [rsp+0x8]; mov esi, 0x20; lea r14, [rax+0x2c]; mov rdi, r14; calljump___GI___strnlen; 
0x410ce: mov rsi, qword [rsp+0x38]; mov rdi, qword [rsp+0x60]; mov dword [rsp+0x20], r8d; calljump___GI___strnlen; 
0x5c115: movsxd  rsi, r9d; mov rdi, rbp; calljump___GI___strnlen; 
0x2823d: mov rax, r13; mov rdi, r15; mov qword [rbp-0x60], rcx; sub rax, r15; mov rsi, rax; mov qword [rbp-0x78], rax; calljump___GI___strnlen; 
0x5a651: movsxd  rsi, dword [rsp+0x18]; mov rdi, rbx; calljump___GI___strnlen; 
0x9fa71: lea rdx, [rsp+0x48]; mov rsi, rbp; mov rdi, r12; callcritical_factorization; mov rdi, r12; mov rcx, rax; mov rax, qword [rsp+0x48]; mov rdx, rcx; mov qword [rsp], rcx; lea rsi, [r12+rax]; mov qword [rsp+0x30], rax; calljump___strncasecmp_ifunc; 
0x12734b: mov edx, 0x8; lea rsi, [rel 0x19b738]  {"NOTFOUND"}; mov rdi, rbx; calljump___strncasecmp_ifunc; 
0x127365: mov edx, 0x8; lea rsi, [rel 0x19b741]  {"TRYAGAIN"}; mov rdi, rbx; calljump___strncasecmp_ifunc; 
0x12744b: mov edx, 0x5; lea rsi, [rel 0x19b75a]  {"MERGE"}; calljump___strncasecmp_ifunc; 
0x127560: mov edx, 0x7; lea rsi, [rel 0x19b728]  {"SUCCESS"}; mov rdi, rbx; calljump___strncasecmp_ifunc; 
0x12757c: mov edx, 0x7; lea rsi, [rel 0x19b730]  {"UNAVAIL"}; mov rdi, rbx; calljump___strncasecmp_ifunc; 
0x1275a0: mov edx, 0x6; lea rsi, [rel 0x19b74a]  {"RETURN"}; calljump___strncasecmp_ifunc; 
0x127610: mov edx, 0x8; lea rsi, [rel 0x19b751]  {"CONTINUE"}; calljump___strncasecmp_ifunc; 
0x11851f: mov rdi, qword [rbp-0x4d0]; mov rsi, r15; sub rbx, rdi; mov rdx, rbx; calljump___strncasecmp_ifunc; 
0x9f69b: mov rax, qword [rsp+0x58]; mov rdx, r9; mov rdi, r12; mov qword [rsp+0x10], r8; mov qword [rsp+0x8], r9; lea rsi, [r12+rax]; mov qword [rsp+0x30], rax; calljump___strncasecmp_ifunc; 
0x11e480: pushr13; mov r13d, esi; lea rsi, [rel 0x197b45]; pushr12; mov r12, rdi; pushrbp; mov ebp, ecx; pushrbx; mov rbx, rdx; mov edx, 0x2; mov rdi, rbx; sub rsp, 0x18; calljump___strncasecmp_ifunc; 
0x11e4d0: mov edx, 0x3; lea rsi, [rel 0x19b4e5]; mov rdi, rbx; calljump___strncasecmp_ifunc; 
0x11e894: mov rdx, rbp; mov rsi, r13; mov rdi, r12; calljump___strncasecmp_ifunc; 
0xa4ca8: mov rdi, rax; mov r12, rax; callsub_244b0; lea rdx, [rbx-0x1]; mov rsi, r12; mov rdi, rbp; cmp rdx, rax; mov r13, rax; cmova   rdx, rax; calljump___GI_mempcpy; 
0x34ba4: lea r13, [rax+0x8]; lea rsi, [rel 0x197ca0]; mov rdi, r13; callsub_24590; mov rsi, r13; lea r13, [rbp-0x50]; mov rdx, rax; lea rax, [rax+0x18]; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rcx, [rsp+0xf]; and rcx, 0xfffffffffffffff0; mov rdi, rcx; mov qword [rbp-0x78], rcx; calljump___GI_mempcpy; 
0x9e593: sub rax, rbx; mov rsi, rbx; mov rdi, rbp; pop rbx; lea rdx, [rax+0x1]; pop rbp; pop r12; jmp jump___GI_mempcpy; 
0x102b50: endbr64 ; push rbp; mov rbp, rsp; push r12; mov r12, rdi; mov rdi, rsi; push rbx; mov rbx, rsi; call sub_244b0; mov rsi, rbx; mov rdx, rax; add rax, 0x12; and rax, 0xfffffffffffffff0; sub rsp, rax; mov rdi, rsp; calljump___GI_mempcpy; 
0x312de: mov rdi, r12; sub r14, rbx; callsub_244b0; mov rdi, r13; mov r15, rax; callsub_244b0; lea rsi, [r14+r15]; mov rdx, r14; lea rcx, [rax+0x1]; lea rax, [rsi+rax+0x18]; mov rsi, rbx; and rax, 0xfffffffffffffff0; mov qword [rbp-0x108], rcx; sub rsp, rax; lea r14, [rsp+0xf]; and r14, 0xfffffffffffffff0; mov rdi, r14; mov rbx, r14; calljump___GI_mempcpy; 
0x312de: mov rdi, r12; sub r14, rbx; callsub_244b0; mov rdi, r13; mov r15, rax; callsub_244b0; lea rsi, [r14+r15]; mov rdx, r14; lea rcx, [rax+0x1]; lea rax, [rsi+rax+0x18]; mov rsi, rbx; and rax, 0xfffffffffffffff0; mov qword [rbp-0x108], rcx; sub rsp, rax; lea r14, [rsp+0xf]; and r14, 0xfffffffffffffff0; mov rdi, r14; mov rbx, r14; calljump___GI_mempcpy; mov rdx, r15; mov rsi, r12; mov rdi, rax; calljump___GI_mempcpy; 
0x2652f: mov rax, qword [rel data_1d6f58]; mov rax, qword [fs:rax]; mov rax, qword [rax]; mov rsi, qword [rax+0xa8]; mov rdi, rsi; mov qword [rbp-0x48], rsi; callsub_244b0; mov rsi, qword [rbp-0x48]; mov rdx, rax; lea rax, [rax+0x1a]; and rax, 0xfffffffffffffff0; sub rsp, rax; lea r14, [rsp+0xf]; and r14, 0xfffffffffffffff0; mov rdi, r14; calljump___GI_mempcpy; 
0x26593: mov rax, qword [rel data_1d6f58]; mov rax, qword [fs:rax]; mov rax, qword [rax]; mov rsi, qword [rax+0xa8]; mov rdi, rsi; mov qword [rbp-0x48], rsi; callsub_244b0; mov rsi, qword [rbp-0x48]; mov rdx, rax; lea rax, [rax+0x1a]; and rax, 0xfffffffffffffff0; sub rsp, rax; lea r13, [rsp+0xf]; and r13, 0xfffffffffffffff0; mov rdi, r13; calljump___GI_mempcpy; 
0x82a22: mov rdx, r14; mov rsi, r15; mov rdi, rax; calljump___GI_mempcpy; 
0x1135f9: shl rdx, 0x2; jmp jump___GI_mempcpy; 
0x29721: mov rcx, qword [rsp]; mov rax, qword [rsp+0x10]; mov rsi, r14; mov rdi, r15; mov r12d, 0x4; sub rcx, r14; sub rax, r15; cmp rax, rcx; mov qword [rsp+0x30], rcx; cmovg   rax, rcx; testrax, rax; lea rdx, [rax+0x3]; cmovns  rdx, rax; and rdx, 0xfffffffffffffffc; lea rax, [r14+rdx]; mov qword [r13], rax; calljump___GI_mempcpy; 
0x29921: mov rdi, qword [rsp+0x30]; mov rax, r12; mov rsi, r14; mov dword [rsp+0x18], r8d; sub rax, r15; cmp rax, rdi; cmovg   rax, rdi; mov rdi, r15; testrax, rax; lea rdx, [rax+0x3]; cmovns  rdx, rax; and rdx, 0xfffffffffffffffc; lea rax, [r14+rdx]; mov qword [r13], rax; calljump___GI_mempcpy; 
0x6e6af: mov rsi, qword [rbp-0x588]; mov rdi, qword [rbp-0x5c8]; mov rdx, r13; mov qword [rbp-0x558], r11; calljump___GI_mempcpy; 
0x7041b: mov rsi, qword [rbp-0x588]; mov rdi, qword [rbp-0x5c8]; mov rdx, r14; mov qword [rbp-0x558], r11; calljump___GI_mempcpy; 
0x734d1: mov rsi, qword [rbp-0x588]; mov rdi, qword [rbp-0x5c8]; mov rdx, r13; mov qword [rbp-0x558], r11; calljump___GI_mempcpy; 
0x73844: mov rsi, qword [rbp-0x588]; mov rdi, qword [rbp-0x5c8]; mov rdx, r14; mov qword [rbp-0x558], r11; calljump___GI_mempcpy; 
0x9dead: mov rsi, qword [rsp]; lea rdi, [rax+rbx]; mov rdx, r12; calljump___GI_mempcpy; 
0x9df07: mov rdx, qword [rsp+0x50]; mov rsi, qword [rsp+0x8]; lea rdi, [rax+r13]; calljump___GI_mempcpy; 
0x9dfae: mov rsi, qword [rsp+0x8]; lea rdi, [rax+r13]; mov rdx, r14; calljump___GI_mempcpy; 
0x31da0: mov edi, r14d; call__close_nocancel; mov rsi, qword [rbx]; mov rdi, rsi; mov qword [rbp-0xd0], rsi; callsub_244b0; lea rdx, [rel _nl_category_name_sizes]; mov rsi, qword [rbp-0xd0]; mov rdi, rax; movsxd  rax, r13d; movzx   edx, byte [rdx+rax]; mov r14, rdx; lea rdx, [rdi+rdx+0x1d]; and rdx, 0xfffffffffffffff0; sub rsp, rdx; lea rdx, [rel _nl_category_name_idxs]; movzx   ecx, byte [rdx+rax]; lea r15, [rsp+0xf]; lea rax, [rel _nl_category_names]  {"LC_COLLATE"}; mov rdx, rdi; and r15, 0xfffffffffffffff0; add rcx, rax; mov rdi, r15; mov qword [rbp-0xc8], rcx; calljump___GI_mempcpy; 
0xedc0d: movsxd  rdx, dword [rsp+0x8]; mov rsi, qword [rsp]; mov rdi, rax; calljump___GI_mempcpy; 
0x8551a: mov rdi, rbp; mov rdx, rax; calljump___GI_mempcpy; 
0x152977: add r12, 0x16; mov rax, rsp; and r12, 0xfffffffffffffff0; sub rsp, r12; lea r12, [rsp+0xf]; and r12, 0xfffffffffffffff0; sub rax, rsp; mov rsi, qword [rbp-0x488]; mov rdx, r14; mov rdi, r12; lea r13, [r14+0x1]; mov qword [rbp-0x4a8], rax; sub rdx, rsi; calljump___GI_mempcpy; 
0x152a5a: mov rdx, r13; mov rsi, rdi; sub rdx, rdi; mov rdi, qword [rbp-0x498]; calljump___GI_mempcpy; 
0x152c15: mov r14, qword [rbp-0x4c0]; mov r12, qword [rbp-0x498]; mov rsi, qword [rbp-0x488]; mov rdx, r14; mov rdi, r12; calljump___GI_mempcpy; 
0x15311a: mov rdx, r14; mov rdi, r13; mov qword [rbp-0x4d0], r9; sub rdx, rax; sub rdx, 0x1; calljump___GI_mempcpy; 
0x15348c: mov rsi, qword [rbp-0x488]; mov rdx, r14; mov rdi, rax; lea r13, [r14+0x1]; sub rdx, rsi; calljump___GI_mempcpy; 
0x1538aa: mov rsi, qword [rbp-0x498]; mov rdx, r14; calljump___GI_mempcpy; 
0x153bf5: mov rdx, qword [rbp-0x4d8]; mov rdi, qword [rbp-0x498]; mov rsi, r13; mov qword [rbp-0x4e8], r9; calljump___GI_mempcpy; 
0x153c1e: mov rdx, qword [rbp-0x4f0]; mov rsi, r9; mov rdi, rax; calljump___GI_mempcpy; 
0x153d73: mov rdx, qword [rbp-0x4d0]; mov rdi, r13; mov qword [rbp-0x4e0], r9; sub rdx, 0x1; calljump___GI_mempcpy; 
0x153ef6: mov rsi, r14; mov rdi, r12; calljump___GI_mempcpy; 
0xc9bc4: mov rcx, qword [rsp+0x28]; mov rdx, rbp; mov rsi, r12; mov rdi, rcx; mov qword [rsp+0x8], rcx; calljump___GI_mempcpy; 
0x352e6: mov rdi, r12; callsub_244b0; mov rdi, rbx; mov r14, rax; mov qword [rbp-0xd8], rax; callsub_244b0; mov rsi, rbx; lea rax, [r14+rax+0x1c]; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rax, [rsp+0xf]; and rax, 0xfffffffffffffff0; mov rdi, rax; mov qword [rbp-0x98], rax; callsub_24470; mov edi, 0x2f; mov rdx, r14; mov rsi, r12; mov word [rax], di; lea rdi, [rax+0x1]; calljump___GI_mempcpy; 
0x35757: mov rsi, qword [rbp-0x88]; mov rdx, rbx; lea rdi, [rax+0x38]; add r13, 0x1; calljump___GI_mempcpy; 
0x7d850: mov edx, 0x10; lea r11, [rsp+0x30]; sub rdx, r15; lea r14, [r11+r15]; mov qword [rsp+0x18], r11; cmp rdx, rax; mov rdi, r14; cmova   rdx, rax; mov qword [rsp+0x10], rdx; calljump___GI_mempcpy; 
0xc1b90: endbr64 ; shl rdx, 0x2; jmp jump___GI_mempcpy; 
0x81374: mov rdx, qword [r14+0x8]; mov rsi, qword [r14]; mov r14, r15; calljump___GI_mempcpy; 
0x3fd6c: mov r15, qword [rsp]; mov rdx, rbx; mov rsi, rbp; lea rbx, [rel known_values]; lea rbp, [rel sub_246f0]; mov rdi, r15; calljump___GI_mempcpy; 
0x853ce: mov rsi, r14; mov rdx, rbx; add r14, rbx; calljump___GI_mempcpy; 
0x64282: mov rsi, r14; mov rdi, rax; mov qword [rbp-0x6c8], rax; calljump___GI_mempcpy; 
0x64282: mov rsi, r14; mov rdi, rax; mov qword [rbp-0x6c8], rax; calljump___GI_mempcpy; mov rdx, qword [rbp-0x6a0]; mov rsi, qword [rbp-0x608]; mov rdi, rax; calljump___GI_mempcpy; 
0xdb3d7: add r12, 0x16; mov rax, rsp; and r12, 0xfffffffffffffff0; sub rsp, r12; lea r12, [rsp+0xf]; and r12, 0xfffffffffffffff0; sub rax, rsp; mov rsi, qword [rbp-0x488]; mov rdx, r14; mov rdi, r12; lea r13, [r14+0x1]; mov qword [rbp-0x4a8], rax; sub rdx, rsi; calljump___GI_mempcpy; 
0xdb4ba: mov rdx, r13; mov rsi, rdi; sub rdx, rdi; mov rdi, qword [rbp-0x498]; calljump___GI_mempcpy; 
0xdb675: mov r14, qword [rbp-0x4c0]; mov r12, qword [rbp-0x498]; mov rsi, qword [rbp-0x488]; mov rdx, r14; mov rdi, r12; calljump___GI_mempcpy; 
0xdbb7a: mov rdx, r14; mov rdi, r13; mov qword [rbp-0x4d0], r9; sub rdx, rax; sub rdx, 0x1; calljump___GI_mempcpy; 
0xdbeec: mov rsi, qword [rbp-0x488]; mov rdx, r14; mov rdi, rax; lea r13, [r14+0x1]; sub rdx, rsi; calljump___GI_mempcpy; 
0xdc30a: mov rsi, qword [rbp-0x498]; mov rdx, r14; calljump___GI_mempcpy; 
0xdc650: mov rdi, qword [rbp-0x498]; mov rdx, r13; mov rsi, r14; mov qword [rbp-0x4e0], r9; calljump___GI_mempcpy; 
0xdc675: mov rdx, qword [rbp-0x4e8]; mov rsi, r9; mov rdi, rax; calljump___GI_mempcpy; 
0xdc7cb: mov rdx, qword [rbp-0x4d0]; mov rdi, r13; mov qword [rbp-0x4e0], r9; sub rdx, 0x1; calljump___GI_mempcpy; 
0xdc94e: mov rsi, r14; mov rdi, r12; calljump___GI_mempcpy; 
0x89310: cmp rbx, rdx; cmovbe  rdx, rbx; calljump___GI_mempcpy; 
0x83e56: cmp rbp, rdx; mov rsi, r12; mov r14, rbp; cmovbe  rdx, rbp; mov r13, rdx; calljump___GI_mempcpy; 
0x84d28: mov rsi, qword [rsp+0x28]; mov rdx, r12; mov rdi, r15; mov qword [rsp+0x18], rcx; neg rdx; mov qword [rsp+0x10], r9; add rsi, r12; calljump___GI_mempcpy; 
0xd4d60: mov rdi, qword [rbp-0x38]; mov rsi, r15; mov qword [rbp-0x58], r8; calljump___GI_mempcpy; 
0xd545c: mov rsi, r15; mov rdi, rax; mov qword [rsp+0x8], r8; calljump___GI_mempcpy; 
0xda829: mov rdx, qword [rsp+0x8]; mov rsi, qword [rsp+0x18]; mov rdi, rax; calljump___GI_mempcpy; 
0xdad1a: mov rsi, qword [rbp-0x700]; mov rdx, rbx; add r15, 0x1; calljump___GI_mempcpy; 
0xdaeb7: mov rdx, qword [rbp-0x730]; mov rsi, qword [rbp-0x728]; mov rdi, rbx; calljump___GI_mempcpy; 
0xdafa8: mov rdx, qword [rbp-0x730]; mov rsi, qword [rbp-0x728]; mov rdi, qword [rbp-0x440]; calljump___GI_mempcpy; 
0xdccf9: mov rdx, qword [rsp+0x8]; mov rsi, qword [rsp+0x18]; mov rdi, rax; calljump___GI_mempcpy; 
0xdd1e7: mov rsi, qword [rbp-0x700]; mov rdx, rbx; add r15, 0x1; calljump___GI_mempcpy; 
0xdd387: mov rdx, qword [rbp-0x730]; mov rsi, qword [rbp-0x728]; mov rdi, rbx; calljump___GI_mempcpy; 
0xdd478: mov rdx, qword [rbp-0x730]; mov rsi, qword [rbp-0x728]; mov rdi, qword [rbp-0x440]; calljump___GI_mempcpy; 
0xefc6d: mov rdi, r13; callsub_244b0; mov rdx, rbx; mov rsi, r15; mov r14, rax; lea rax, [rbx+rax+0x1a]; and rax, 0xfffffffffffffff0; sub rsp, rax; mov rdi, rsp; calljump___GI_mempcpy; 
0xf06eb: add rdi, r12; mov rdx, rbp; mov rsi, r13; calljump___GI_mempcpy; 
0xf29e7: mov rdx, r15; mov rsi, rbx; mov rdi, rax; mov qword [rsp+0x30], r9; calljump___GI_mempcpy; 
0xf765b: add rdi, rdx; mov rsi, rbp; mov rdx, r12; calljump___GI_mempcpy; 
0xf79e8: lea rdi, [r15+rbp]; mov rsi, rbx; lea rbp, [r13+0x1]; calljump___GI_mempcpy; 
0x10d931: mov rax, qword [rbp]; mov rdi, qword [r15]; mov dword [rsp+0x40], r8d; mov dword [rsp+0x44], r9d; mov qword [rsp+0x30], rax; mov eax, r9d; mov rsi, rdi; lea rax, [rax+rax*2]; mov qword [rsp+0x28], rdi; mov rdi, qword [rsp+0x8]; shl rax, 0x4; mov qword [rsp+0x48], rcx; mov rdx, rax; mov qword [rsp+0x38], rax; calljump___GI_mempcpy; 
0x11529e: lea rax, [r15+0xa4]; mov rsi, rdi; mov qword [r15+0x8], rax; mov rdi, rax; calljump___GI_mempcpy; 
0x11554e: mov rax, qword [rsp+0x18]; mov qword [rbx+0x8], rax; mov rdi, rax; calljump___GI_mempcpy; 
0x116e8e: mov rsi, qword [rax+0x20]; mov rdi, rsi; mov qword [rbp-0x78], rsi; callsub_244b0; mov rsi, qword [rbp-0x78]; mov rdx, rax; lea rax, [rax+0x20]; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rax, [rsp+0xf]; and rax, 0xfffffffffffffff0; mov rdi, rax; mov qword [rbp-0x78], rax; calljump___GI_mempcpy; 
0xedcfd: movsxd  rdx, dword [rsp+0x8]; mov rsi, qword [rsp]; mov rdi, rax; calljump___GI_mempcpy; 
0x14d595: mov rdi, qword [rbp-0x98]; add r13, 0x1; mov rdx, r14; testr12, r12; lea rax, [rel data_197b1a]; mov rsi, r15; cmove   r12, rax; calljump___GI_mempcpy; 
0x84130: mov rdi, r12; mov rdx, rbp; sub r15, rbp; calljump___GI_mempcpy; 
0x3c33d: mov rdx, rsi; mov rdi, r9; mov rsi, r15; mov qword [rsp+0x18], r10; calljump___GI_mempcpy; 
0x842a8: mov rdx, rbp; mov rsi, r15; mov rdi, r14; sub r12, rbp; calljump___GI_mempcpy; 
0x842d8: cmp r12, rbp; mov rsi, r15; mov rdi, r13; cmova   r12, rbp; mov rdx, r12; add r15, r12; calljump___GI_mempcpy; 
0x27534: lea rdi, [rax+0x20]; mov rsi, qword [rbp-0x98]; mov rdx, r12; mov qword [rax], rdi; calljump___GI_mempcpy; 
0x27c14: mov rdi, r13; callsub_244b0; mov rsi, r13; mov rdx, rax; lea rax, [rax+0x2b]; mov qword [rbp-0x48], rax; lea rax, [rdx+0x42]; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rdi, [rsp+0xf]; and rdi, 0xfffffffffffffff0; mov qword [rbp-0x38], rdi; calljump___GI_mempcpy; 
0x27d82: mov rdx, qword [rbp-0x50]; mov rdi, r14; mov rsi, r13; calljump___GI_mempcpy; 
0x282c2: lea rdi, [rax+0x38]; mov rdx, qword [rbp-0x78]; mov rsi, r15; mov qword [rax], rdi; calljump___GI_mempcpy; 
0x282c2: lea rdi, [rax+0x38]; mov rdx, qword [rbp-0x78]; mov rsi, r15; mov qword [rax], rdi; calljump___GI_mempcpy; mov rcx, qword [rbp-0x60]; mov rsi, r13; mov qword [rbx+0x8], rax; mov rdi, rax; sub rcx, r12; mov rdx, rcx; calljump___GI_mempcpy; 
0x28306: mov rdx, qword [rbp-0x70]; mov rsi, qword [rbp-0x48]; calljump___GI_mempcpy; 
0x28340: mov rsi, qword [rbp-0x58]; mov rdx, r14; calljump___GI_mempcpy; 
0x28779: mov r14, qword [rsp+0x8]; mov rdx, rbx; mov rdi, rax; mov rsi, r14; calljump___GI_mempcpy; 
0x2f640: pushrbp; mov rbp, rsp; pushr15; pushr14; pushr13; mov r13, rdi; pushr12; mov r12, rsi; pushrbx; mov rbx, rdx; sub rsp, 0x8; callsub_244b0; mov rdi, r12; mov r14, rax; callsub_244b0; mov rdx, r14; mov rsi, r13; lea r15, [rax+0x1]; lea rax, [r14+rax+0x10]; and rax, 0xfffffffffffffff0; sub rsp, rax; mov rdi, rsp; calljump___GI_mempcpy; 
0x372e0: pushrbp; movsxd  rdx, esi; mov rsi, rdi; lea rax, [rdx+0x25]; and rax, 0xfffffffffffffff0; mov rbp, rsp; pushr15; pushr14; pushr13; pushr12; pushrbx; sub rsp, 0x1e8; sub rsp, rax; lea rbx, [rsp+0xf]; and rbx, 0xfffffffffffffff0; mov rdi, rbx; calljump___GI_mempcpy; 
0x3eb53: mov rsi, rbx; mov rdi, r14; calljump___GI_mempcpy; 
0x3ebd0: mov rsi, rbp; mov rdi, r14; calljump___GI_mempcpy; 
0x7cdd7: mov rdx, rcx; lea rdi, [r15+r12]; xor esi, esi; sub rdx, r14; calljump___GI___wmemset; 
0xc5c9a: sub rbx, rax; lea rdi, [r13+rax*4]; xor esi, esi; mov rdx, rbx; calljump___GI___wmemset; 
0x74b50: sub rbx, rdi; mov esi, ebp; sar rbx, 0x2; cmp rbx, r12; cmova   rbx, r12; mov rdx, rbx; calljump___GI___wmemset; 
0x7cb1d: mov rdx, r12; lea rdi, [r15+r8]; xor esi, esi; sub rdx, rbp; calljump___GI___wmemset; 
0x113279: jmp jump___wcpncpy_ifunc; 
0xc1828: mov rbx, qword [rbp-0x60]; add rax, 0x1; mov rdi, qword [rbp-0x78]; mov rsi, r9; cmp rax, rbx; cmovbe  rbx, rax; mov rdx, rbx; calljump___wcpncpy_ifunc; 
0x593d3: sub rax, rbp; lea rsi, [rel data_19810f]  {"X"}; sub rax, 0x6; mov qword [rsp+0x18], rax; add rax, r14; mov rdi, rax; mov qword [rsp+0x20], rax; calljump___GI_strspn; 
0xa2851: mov rsi, r12; mov rdi, rbx; calljump___GI_strspn; 
0xf20f7: mov rsi, r12; mov rdi, r13; calljump___GI_strspn; 
0xf2115: mov rsi, qword [rsp+0x28]; mov rdi, rbx; callsub_24590; mov rsi, r12; lea r14, [rbx+rax]; mov rdi, r14; calljump___GI_strspn; 
0xf218f: mov rsi, r12; mov rdi, r15; calljump___GI_strspn; 
0xf2240: mov rsi, r12; mov rdi, r15; calljump___GI_strspn; 
0x10282a: mov rsi, r12; mov rdi, rbx; calljump___GI_strspn; 
0x102879: mov rdi, rbp; mov rsi, r12; calljump___GI_strspn; 
0x1028b9: mov rdi, rbp; mov rsi, r12; calljump___GI_strspn; 
0x1028f9: mov rdi, rbp; mov rsi, r12; calljump___GI_strspn; 
0x9e570: endbr64 ; pushr12; mov r12, rcx; pushrbp; mov rbp, rdi; pushrbx; mov rbx, rsi; mov esi, edx; mov rdx, rcx; mov rdi, rbx; calljump___GI_memchr; 
0x30777: mov rdx, r15; mov esi, 0x2f; mov rdi, rbx; calljump___GI_memchr; 
0x307d3: mov edx, 0x2; mov esi, 0x2f; mov rdi, rbx; calljump___GI_memchr; 
0x3df89: mov r12, rsi; mov rdi, rbp; mov esi, 0x2c; callsub_24540; mov esi, 0x3d; mov rdi, rbp; mov rdx, rax; mov r13, rax; sub rdx, rbp; calljump___GI_memchr; 
0x9ed75: movzx   eax, byte [rdx]; add rsp, 0x118; mov rdx, rsi; pop rbx; pop rbp; mov esi, eax; pop r12; pop r13; pop r14; pop r15; jmp jump___GI_memchr; 
0x153064: mov rdi, qword [rbp-0x498]; mov qword [rbp-0x4d8], rax; mov esi, 0x5c; sub rax, rdi; mov rdx, rax; mov qword [rbp-0x4d0], rax; calljump___GI_memchr; 
0x78758: cmp rbx, r14; mov esi, r12d; mov rdi, r13; cmova   rbx, r14; mov rdx, rbx; calljump___GI_memchr; 
0x10b4be: mov r13, qword [rbp+0x38]; mov esi, 0xa; mov rdi, r12; mov r15, r13; sub r15, r12; mov rdx, r15; calljump___GI_memchr; 
0x10b638: mov r13, qword [rbp+0x38]; mov esi, 0xa; mov rdi, r12; mov r15, r13; sub r15, r12; mov rdx, r15; calljump___GI_memchr; 
0xf4ec2: mov rbp, r15; mov esi, 0xa; mov rdi, r14; sub rbp, r14; mov rdx, rbp; calljump___GI_memchr; 
0xf4f91: add r15, rax; mov rdi, qword [rsp+0x8]; mov esi, 0xa; mov rdx, r15; sub rdx, rdi; calljump___GI_memchr; 
0xdbac4: mov rdi, qword [rbp-0x498]; mov qword [rbp-0x4d8], rax; mov esi, 0x5c; sub rax, rdi; mov rdx, rax; mov qword [rbp-0x4d0], rax; calljump___GI_memchr; 
0xd5ef9: mov rdx, qword [rsp]; mov esi, r12d; mov rdi, r13; mov byte [rsp+0x10], r10b; neg esi; mov dword [rsp+0xc], r11d; sub rdx, r13; and esi, 0x2f; mov qword [rsp+0x90], 0x0; calljump___GI_memchr; 
0xd6e37: mov rdx, qword [rsp]; mov esi, 0x2f; mov rdi, r13; sub rdx, r13; calljump___GI_memchr; 
0xfce60: pushr15; pushr14; pushr13; pushr12; mov r12, r8; pushrbp; mov rbp, rdx; pushrbx; mov rbx, rcx; sub rsp, 0x28; mov r13, qword [rcx]; mov r14, qword [rdx]; mov dword [rsp+0x14], edi; mov r15, r13; mov qword [rsp+0x8], rsi; mov rdi, r14; mov esi, 0xa; sub r15, r14; mov rdx, r15; calljump___GI_memchr; 
0xfcf1f: add rcx, qword [rbx]; mov esi, 0xa; mov qword [rbx], rcx; mov r14, qword [rbp]; mov rdx, rcx; mov qword [rsp+0x18], rcx; sub rdx, r14; mov rdi, r14; calljump___GI_memchr; 
0xfcf9c: mov r15, qword [rbx]; mov rdx, rax; mov esi, 0xa; mov rdi, r15; calljump___GI_memchr; 
0xeea81: mov rdx, rbp; mov esi, 0x2f; mov rdi, rbx; calljump___GI_memchr; 
0x784d9: mov esi, dword [rsp+0x1c]; mov rdx, r15; mov rdi, r13; calljump___GI_memchr; 
0x150cc8: xor esi, esi; mov rdx, rbx; mov rdi, r13; calljump___GI_memchr; 
0x151198: xor esi, esi; mov rdx, rbx; mov rdi, r13; calljump___GI_memchr; 
0xfa117: sub r12, 0xd; lea rsi, [rbx+0xd]; mov rdi, rbx; mov rdx, r12; calljump___GI_memmove; 
0x4b730: mov rdx, qword [rsp+0x48]; mov rsi, qword [rsp+0x38]; mov qword [rsp], rcx; mov rdi, qword [rsp+0x40]; calljump___GI_memmove; 
0x4bfeb: lea eax, [rbp-0x1]; movsxd  rdx, ebp; mov rdi, qword [rsp+0x8]; mov dword [rsp+0x20], eax; cdqe; lea rcx, [rdx*8]; neg rax; shl rax, 0x3; lea rsi, [rax+rdx*8-0x8]; add rax, rcx; mov rdx, rcx; add rsi, rdi; add rdi, rax; calljump___GI_memmove; 
0xfb729: mov rdx, rbx; mov dword [rsp+0x8], ecx; sub rdx, r12; calljump___GI_memmove; 
0x9e4ee: mov rdx, r12; mov rdi, rbp; calljump___GI_memmove; 
0x1135c9: shl rdx, 0x2; jmp jump___GI_memmove; 
0x129530: mov rdi, rbx; callsub_244b0; mov rsi, rbx; mov rdi, r15; mov rdx, rax; calljump___GI_memmove; 
0xb8e5d: mov rdx, qword [rsp+0x50]; mov rsi, qword [rsp+0x40]; mov qword [rsp+0x10], rcx; mov rdi, qword [rsp+0x48]; calljump___GI_memmove; 
0xb955f: lea r15d, [r13-0x1]; movsxd  rcx, r13d; mov rdi, qword [rsp+0x18]; mov dword [rsp+0x10], r9d; movsxd  rax, r15d; lea rdx, [rcx*8]; neg rax; shl rax, 0x3; lea rsi, [rax+rcx*8-0x8]; add rax, rdx; add rsi, rdi; add rdi, rax; calljump___GI_memmove; 
0xf71c6: movzx   eax, word [rbx+0x42]; mov rdi, qword [rbp+0x20]; lea r13, [rbx+0x70]; mov rsi, r13; mov word [rbx+0x40], ax; lea rdx, [rax+0x1]; calljump___GI_memmove; 
0xf71fd: lea r12, [rax+0x1]; mov rdi, r12; callsub_244b0; mov rsi, r12; mov rdi, r13; lea edx, [rax+0x1]; mov r14, rax; movsxd  rdx, edx; calljump___GI_memmove; 
0xf7272: add rdi, rdx; lea rsi, [rbx+0x70]; mov byte [rdi], 0x2f; movzx   eax, word [rbx+0x42]; add rdi, 0x1; lea rdx, [rax+0x1]; calljump___GI_memmove; 
0x9e150: endbr64 ; mov rax, rdi; mov rdi, rsi; mov rsi, rax; jmp jump___GI_memmove; 
0xc1b80: endbr64 ; shl rdx, 0x2; jmp jump___GI_memmove; 
0x84ce8: mov rdx, r12; add rsi, r12; mov rdi, r15; neg rdx; calljump___GI_memmove; 
0xe0f50: mov r9d, r13d; mov rdi, qword [rbx+0x10]; movsxd  rax, ebp; sub r9d, ebp; movsxd  rdx, r9d; lea rsi, [rdi+rax*4]; shl rdx, 0x2; calljump___GI_memmove; 
0xe1060: mov edx, dword [rbx+0x2c]; mov rdi, qword [rbx+0x8]; movsxd  rsi, ebp; sub edx, ebp; add rsi, rdi; movsxd  rdx, edx; calljump___GI_memmove; 
0xe10cb: mov edx, r13d; mov rdi, qword [rbx+0x10]; movsxd  r15, ebp; sub edx, ebp; lea r14, [r15*4]; movsxd  rdx, edx; lea rsi, [rdi+r14]; shl rdx, 0x2; calljump___GI_memmove; 
0xe10cb: mov edx, r13d; mov rdi, qword [rbx+0x10]; movsxd  r15, ebp; sub edx, ebp; lea r14, [r15*4]; movsxd  rdx, edx; lea rsi, [rdi+r14]; shl rdx, 0x2; calljump___GI_memmove; mov edx, dword [rbx+0x2c]; mov rdi, qword [rbx+0x8]; sub edx, ebp; lea rsi, [rdi+r15]; movsxd  rdx, edx; calljump___GI_memmove; 
0xe3a2a: movsxd  rdx, eax; sub eax, 0x1; cdqe; shl rdx, 0x2; neg rax; shl rax, 0x2; lea rsi, [rdx+rax-0x4]; add rax, rdx; add rsi, r12; lea rdi, [r12+rax]; calljump___GI_memmove; 
0xe5432: mov r12d, dword [rsp+0x68]; movsxd  rdx, edx; shl rdx, 0x2; sub r12d, 0x1; mov ecx, r12d; sub ecx, eax; lea rax, [rcx*4+0x4]; mov rcx, qword [rsp+0x40]; lea rsi, [rcx+rdx+0x4]; lea rdi, [rcx+rdx]; mov rdx, rax; calljump___GI_memmove; 
0xf6640: mov rax, qword [r12+0x30]; mov rdi, qword [rsp+0x30]; lea rsi, [r12+0x70]; mov qword [r12+0x28], rax; movzx   eax, word [r12+0x42]; lea rdx, [rax+0x1]; calljump___GI_memmove; 
0xfcedf: mov rdx, r15; mov rsi, r14; mov rdi, rax; mov r15, rax; calljump___GI_memmove; 
0x109b00: lea rdx, [rdx+rdx*2]; mov rsi, rbx; lea rdi, [r15+rax+0x30]; shl rdx, 0x4; calljump___GI_memmove; 
0x11c910: mov rdx, r13; mov rsi, rbp; sub rdx, rbp; sub r12, rdx; mov rdi, r12; calljump___GI_memmove; 
0x510e0: mov rdx, qword [rsp+0x50]; mov rsi, qword [rsp+0x40]; mov qword [rsp+0x8], rcx; mov rdi, qword [rsp+0x48]; calljump___GI_memmove; 
0x51c06: lea eax, [rbp-0x1]; movsxd  rdx, ebp; mov rdi, qword [rsp+0x10]; mov dword [rsp+0x28], eax; cdqe; lea rcx, [rdx*8]; neg rax; shl rax, 0x3; lea rsi, [rax+rdx*8-0x8]; add rax, rcx; mov rdx, rcx; add rsi, rdi; add rdi, rax; calljump___GI_memmove; 
0x3c67a: lea rdx, [rsi+0x1]; lea rdi, [r15+rcx]; mov rsi, r13; mov qword [rsp+0x20], r9; mov qword [rsp+0x18], rcx; calljump___GI_memmove; 
0x417c6: mov r12, qword [rsp+0x50]; mov rdx, qword [rsp+0xe8]; lea rdi, [r12+rbp]; sub rdx, r12; mov rsi, r12; calljump___GI_memmove; 
0x4db75: mov rdx, qword [rsp+0x38]; lea rdi, [r15+0x8]; mov rsi, r15; mov qword [rsp+0x50], rcx; calljump___GI_memmove; 
0x7aa38: sar rbx, 0x2; mov esi, r12d; mov rdi, r13; cmp rbx, r14; cmova   rbx, r14; mov rdx, rbx; calljump___GI___wmemchr; 
0x3909a: mov rsi, rbx; mov rdi, rax; mov rbp, r14; calljump___GI_stpcpy; 
0x30651: mov qword [r14+rbx*8+0x80], r15; mov rdi, r15; calljump___GI_stpcpy; 
0x9da14: calljump___GI_stpcpy; 
0x14e3c5: mov rsi, r15; mov rdi, rbx; calljump___GI_stpcpy; 
0x14e3dd: mov byte [rax+0x1], 0x1; mov rdi, rdx; mov rsi, r14; calljump___GI_stpcpy; 
0x14e3fd: mov byte [rdx], 0x1; mov rsi, r13; calljump___GI_stpcpy; 
0x14e419: mov byte [rdi], 0x1; mov rsi, r12; mov rdi, r14; calljump___GI_stpcpy; 
0x13c006: mov rdi, r12; mov dword [rbp-0x4c], edx; mov qword [rbp-0x48], rcx; callsub_244b0; mov rcx, qword [rbp-0x48]; mov rsi, r12; lea rax, [rcx+rax+0x18]; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rcx, [rsp+0xf]; and rcx, 0xfffffffffffffff0; mov rdi, rcx; mov qword [rbp-0x48], rcx; calljump___GI_stpcpy; 
0x32786: mov qword [rcx], rax; mov rdi, rax; mov qword [rbp-0x1b0], rdx; mov qword [rbp-0x1a8], rcx; calljump___GI_stpcpy; 
0x327ef: mov qword [rcx], rax; mov rdi, rax; add r15, 0x1; mov qword [rbp-0x1b0], rdx; mov qword [rbp-0x1a8], rcx; calljump___GI_stpcpy; 
0x32876: mov rdi, rax; mov qword [rbp-0x1a8], rdx; mov qword [rbx+r13*8+0x80], rax; calljump___GI_stpcpy; 
0x352e6: mov rdi, r12; callsub_244b0; mov rdi, rbx; mov r14, rax; mov qword [rbp-0xd8], rax; callsub_244b0; mov rsi, rbx; lea rax, [r14+rax+0x1c]; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rax, [rsp+0xf]; and rax, 0xfffffffffffffff0; mov rdi, rax; mov qword [rbp-0x98], rax; calljump___GI_stpcpy; 
0x11c6cf: mov rsi, rbp; mov rdi, r12; calljump___GI_stpcpy; 
0x11840a: mov rdi, rax; mov r13, rax; callsub_244b0; mov rsi, r13; add rax, 0x1f; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rbx, [rsp+0xf]; and rbx, 0xfffffffffffffff0; mov rdi, rbx; calljump___GI_stpcpy; 
0xf2d07: mov rsi, qword [r12]; add r12, 0x8; calljump___GI_stpcpy; 
0xf807c: lea rbp, [rax+rdx]; xor esi, esi; mov qword [rsp+0x20], rax; mov qword [rsp+0x38], rbp; mov qword [rsp+0x40], r14; callsub_246c0; mov rdi, rbp; mov rsi, r15; add rbp, 0x1; calljump___GI_stpcpy; 
0x120d3c: lea r15, [rsp+0x10]; mov rsi, r12; mov qword [rsp+0x8], rcx; mov rdi, r15; calljump___GI_stpcpy; 
0x128d71: mov rdi, r13; mov rbx, rsp; callsub_244b0; mov rsi, r13; add rax, 0x1a; and rax, 0xfffffffffffffff0; sub rsp, rax; mov dword [rsp], 0x73736e5f; lea rdi, [rsp+0x5]; mov byte [rsp+0x4], 0x5f; calljump___GI_stpcpy; 
0x27d98: mov rsi, r15; mov rdi, r14; calljump___GI_stpcpy; 
0x32e12: movzx   esi, byte [r15+r13]; add r13, 0x1; add rsi, r14; calljump___GI_stpcpy; 
0x32e12: movzx   esi, byte [r15+r13]; add r13, 0x1; add rsi, r14; calljump___GI_stpcpy; mov rsi, r12; mov byte [rax], 0x3d; lea rdi, [rax+0x1]; calljump___GI_stpcpy; 
0x37b6c: mov byte [rbp+r13-0x1], 0x2f; mov rsi, qword [rsp+0x18]; lea rdi, [rbp+r13]; calljump___GI_stpcpy; 
0x37dd8: mov byte [rax], 0x40; mov rsi, qword [rsp+0x90]; lea rdi, [rax+0x1]; calljump___GI_stpcpy; 
0x37df8: mov byte [rax], 0x2e; mov rsi, qword [rsp+0x88]; lea rdi, [rax+0x1]; calljump___GI_stpcpy; 
0x37e18: mov byte [rax], 0x2e; mov rsi, qword [rsp+0x80]; lea rdi, [rax+0x1]; calljump___GI_stpcpy; 
0x37e38: mov byte [rax], 0x5f; mov rsi, qword [rsp+0x38]; lea rdi, [rax+0x1]; calljump___GI_stpcpy; 
0xd885e: mov rdi, qword [rsp+0x58]; lea rsi, [r15+0x4]; mov rdx, r12; mov dword [rsp+0x50], eax; mov qword [rsp+0x40], rsi; calljump___wmemcmp_ifunc; 
0xd88dc: mov rdi, r12; mov qword [rsp+0x60], r11; mov qword [rsp+0x58], rcx; mov qword [rsp+0x50], rdx; calljump___wmemcmp_ifunc; 
0xd8cb1: mov rdi, qword [rsp+0x68]; lea rsi, [rcx+0x4]; mov qword [rsp+0x88], r9; mov qword [rsp+0x80], rcx; mov qword [rsp+0x78], rdx; calljump___wmemcmp_ifunc; 
0x52c2d: testrbx, rbx; lea rdx, [rel name]; cmove   rbx, rdx; mov edx, 0x8; mov byte [rbx+0x8], 0x0; mov rsi, qword [rax]; mov rdi, rbx; calljump___GI_strncpy; 
0x112fb9: jmp jump___GI_strncpy; 
0x114538: mov rsi, rbx; mov edx, 0x10; mov rdi, rsp; calljump___GI_strncpy; 
0x151060: endbr64 ; pushr13; xor eax, eax; mov r13, rdi; mov ecx, 0x30; pushr12; mov r12, rdx; pushrbp; pushrbx; mov rbx, rsi; sub rsp, 0x198; lea rbp, [rsp+0x10]; mov rdi, rbp; rep stosq qword [rdi]; call__GI___getpid; cmp byte [rbx], 0x1; lea rdi, [rsp+0x18]; mov rsi, r13; mov dword [rsp+0x14], eax; mov eax, 0x7; mov edx, 0x20; adc ax, 0x0; mov word [rsp+0x10], ax; calljump___GI_strncpy; 
0x151060: endbr64 ; pushr13; xor eax, eax; mov r13, rdi; mov ecx, 0x30; pushr12; mov r12, rdx; pushrbp; pushrbx; mov rbx, rsi; sub rsp, 0x198; lea rbp, [rsp+0x10]; mov rdi, rbp; rep stosq qword [rdi]; call__GI___getpid; cmp byte [rbx], 0x1; lea rdi, [rsp+0x18]; mov rsi, r13; mov dword [rsp+0x14], eax; mov eax, 0x7; mov edx, 0x20; adc ax, 0x0; mov word [rsp+0x10], ax; calljump___GI_strncpy; lea rdi, [rsp+0x3c]; mov rsi, rbx; mov edx, 0x20; calljump___GI_strncpy; 
0x151060: endbr64 ; pushr13; xor eax, eax; mov r13, rdi; mov ecx, 0x30; pushr12; mov r12, rdx; pushrbp; pushrbx; mov rbx, rsi; sub rsp, 0x198; lea rbp, [rsp+0x10]; mov rdi, rbp; rep stosq qword [rdi]; call__GI___getpid; cmp byte [rbx], 0x1; lea rdi, [rsp+0x18]; mov rsi, r13; mov dword [rsp+0x14], eax; mov eax, 0x7; mov edx, 0x20; adc ax, 0x0; mov word [rsp+0x10], ax; calljump___GI_strncpy; lea rdi, [rsp+0x3c]; mov rsi, rbx; mov edx, 0x20; calljump___GI_strncpy; lea rdi, [rsp+0x5c]; mov edx, 0x100; mov rsi, r12; calljump___GI_strncpy; 
0x13e793: mov qword [r13+0x10], rbp; mov rdi, qword [r13+0x28]; mov edx, 0xff; mov rsi, rbx; mov qword [r13+0x20], 0x1; mov qword [r13+0x18], r12; calljump___GI_strncpy; 
0x12d220: lea r13, [r9+rbx-0x1]; mov rsi, rdi; mov rdx, rbx; mov rdi, r9; mov byte [r13], 0x0; calljump___GI_strncpy; 
0x150dba: lea rdi, [rsp+0x18]; mov edx, 0x20; calljump___GI_strncpy; 
0x14727d: mov rsi, rdx; mov rdi, rsp; mov edx, 0xff; mov r12, rsp; calljump___GI_strncpy; 
0x11e354: mov byte [rdx], 0x0; mov rsi, r12; lea rdx, [r15-0x1]; mov rdi, r14; calljump___GI_strncpy; 
0x139a02: mov rdi, r13; mov qword [rsp+0x8], r8; call_IO_new_fclose; mov r13, qword [rsp+0x10]; mov rdx, rbx; mov rdi, r14; mov byte [r12], 0x0; mov rsi, r13; calljump___GI_strncpy; 
0x14f324: call__setutent; lea rbx, [rsp+0x10]; lea rdi, [rsp+0x18]; mov edx, 0x20; lea rsi, [rsp+0x315]; calljump___GI_strncpy; 
0x14f370: mov rax, qword [rsp+0x8]; lea rbx, [rel name]; mov edx, 0x20; mov rdi, rbx; lea rsi, [rax+0x2c]; calljump___GI_strncpy; 
0x14f458: lea rsi, [rsp+0x315]; lea rdi, [rsp+0x18]; mov edx, 0x20; calljump___GI_strncpy; 
0x139420: endbr64 ; mov rax, rdi; mov rdi, rdx; pushr12; mov rdx, rcx; lea r12, [rdi+rcx-0x1]; pushrbp; mov rbp, r8; pushrbx; mov rbx, rsi; mov rsi, rax; mov byte [r12], 0x0; calljump___GI_strncpy; 
0x147358: mov edx, 0x40; mov rdi, rsp; calljump___GI_strncpy; 
0x147383: lea r13, [rsp+0x50]; mov edx, 0x40; mov rsi, r14; mov rdi, r13; calljump___GI_strncpy; 
0x14740d: lea r13, [rsp+0x50]; lea rsi, [rax+0x1]; mov edx, 0x40; mov rdi, r13; calljump___GI_strncpy; 
0x411b0: mov r13, qword [r14+0x38]; lea rdi, [rsp+0x94]; mov edx, 0x3; mov dword [rsp+0x40], ecx; mov byte [rsp+0x38], r11b; mov rsi, r13; mov dword [rsp+0x48], r10d; mov dword [rsp+0x2c], r9d; mov dword [rsp+0x10], r8d; calljump___GI_strncpy; 
0x1475c8: mov rdx, rbp; mov rsi, rbx; mov rdi, r12; calljump___GI_strncpy; 
0x1148b0: mov rsi, rsp; mov rdi, r12; mov edx, 0x10; calljump___GI_strncpy; 
0x150f30: pushrbp; pushrbx; mov rbx, rdi; sub rsp, 0x328; call__setutent; mov edx, 0x7; mov rsi, rbx; lea rdi, [rsp+0x28]; mov word [rsp+0x20], dx; lea rbp, [rsp+0x20]; mov edx, 0x20; xor ebx, ebx; calljump___GI_strncpy; 
0xf6b60: calljump___GI_strlen; 
0xf6c2c: mov rdi, r15; calljump___GI_strlen; 
0x10b150: endbr64 ; pushr15; pushr14; pushr13; mov r13, rdi; pushr12; pushrbp; xor ebp, ebp; pushrbx; mov rbx, rsi; sub rsp, 0x8; calljump___GI_strlen; 
0x10b18e: mov rdi, r15; calljump___GI_strlen; 
0x112e20: endbr64 ; pushr12; mov r12, rdx; pushrbp; mov rbp, rdi; mov rdi, rsi; pushrbx; mov rbx, rsi; calljump___GI_strlen; 
0xed8e1: mov rdi, rbx; or  byte [rel re_comp_buf.can_be_null], 0x80; calljump___GI_strlen; 
0x9f9fa: mov rdi, rsi; mov r12, rsi; calljump___GI_strlen; 
0x10b278: mov rdi, rbx; add rbp, 0x1; calljump___GI_strlen; 
0x3d418: lea rdi, [rax+0x1]; calljump___GI_strlen; 
0x3907a: mov rdi, rax; calljump___GI_strlen; 
0xa4ca8: mov rdi, rax; mov r12, rax; calljump___GI_strlen; 
0x9d940: mov rdi, rbp; add r12, 0x1; calljump___GI_strlen; 
0x9da30: endbr64 ; pushr14; pushr13; mov r13d, esi; pushr12; mov r12, rcx; pushrbp; mov rbp, rdx; pushrbx; mov rbx, rdi; calljump___GI_strlen; 
0x4a58a: mov r13, qword [rax+0x38]; mov qword [rsp], r8; mov rdi, r13; calljump___GI_strlen; 
0x562a5: mov rdi, r14; and ebp, 0x8; calljump___GI_strlen; 
0x562c6: mov rdi, r13; calljump___GI_strlen; 
0x56395: mov rdi, r13; calljump___GI_strlen; 
0x132644: mov rdi, rbx; calljump___GI_strlen; 
0x132ae0: lea r14, [rsp+0x511]; mov dword [rsp+0x8], ecx; mov rdi, r14; mov dword [rsp+0x10], r9d; calljump___GI_strlen; 
0x132bc4: mov r14, qword [r8]; mov dword [rsp+0x10], r9d; mov dword [rsp+0x8], ecx; mov rdi, r14; mov qword [rsp+0x4d0], r14; calljump___GI_strlen; 
0x132d63: mov r14, qword [rsp+0x4d0]; mov dword [rsp+0x10], r9d; mov dword [rsp+0x8], ecx; mov rdi, r14; calljump___GI_strlen; 
0x1330e2: mov qword [rsp+0x50], rdi; mov dword [rsp+0x5c], r9d; mov dword [rsp+0x38], ecx; mov dword [rsp+0x28], edx; calljump___GI_strlen; 
0x34736: mov rdi, r13; calljump___GI_strlen; 
0x34f56: mov rdi, rax; mov qword [rbp-0x78], r10; calljump___GI_strlen; 
0xa257d: mov rdi, rbp; calljump___GI_strlen; 
0x792f0: endbr64 ; pushr14; pushr13; pushr12; pushrbp; mov rbp, rdi; pushrbx; sub rsp, 0x10; calljump___GI_strlen; 
0x102b50: endbr64 ; pushrbp; mov rbp, rsp; pushr12; mov r12, rdi; mov rdi, rsi; pushrbx; mov rbx, rsi; calljump___GI_strlen; 
0x30326: mov rdi, rsp; mov qword [rsp], r13; callgconv_parse_code; lea rdi, [rsp+0x10]; mov r13, qword [rsp]; callgconv_parse_code; movzx   eax, word [rsp+0x18]; mov rdi, rbx; mov word [rbp+0x10], ax; calljump___GI_strlen; 
0x3036f: mov rdi, r14; calljump___GI_strlen; 
0xd8ed4: mov rdi, rbx; calljump___GI_strlen; 
0x14cb4b: mov rdi, r12; xor ebp, ebp; calljump___GI_strlen; 
0x12a563: calljump___GI_strlen; 
0x12a66d: mov rdi, rbx; calljump___GI_strlen; 
0x10a8a0: endbr64 ; pushr15; pushr14; pushr13; mov r13, rdi; pushr12; pushrbp; xor ebp, ebp; pushrbx; sub rsp, 0x8; calljump___GI_strlen; 
0x10a8ee: mov rdi, r15; calljump___GI_strlen; 
0x31012: mov rdi, rbx; calljump___GI_strlen; 
0x312de: mov rdi, r12; sub r14, rbx; calljump___GI_strlen; 
0x312de: mov rdi, r12; sub r14, rbx; calljump___GI_strlen; mov rdi, r13; mov r15, rax; calljump___GI_strlen; 
0x3de57: calljump___GI_strlen; 
0x2652f: mov rax, qword [rel data_1d6f58]; mov rax, qword [fs:rax]; mov rax, qword [rax]; mov rsi, qword [rax+0xa8]; mov rdi, rsi; mov qword [rbp-0x48], rsi; calljump___GI_strlen; 
0x26593: mov rax, qword [rel data_1d6f58]; mov rax, qword [fs:rax]; mov rax, qword [rax]; mov rsi, qword [rax+0xa8]; mov rdi, rsi; mov qword [rbp-0x48], rsi; calljump___GI_strlen; 
0xc87a0: endbr64 ; pushrbx; mov rbx, rdi; calljump___GI_strlen; 
0x14bec0: endbr64 ; pushr14; mov r14, r8; pushr13; mov r13, rcx; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; calljump___GI_strlen; 
0x9e4c8: mov rdi, rbp; calljump___GI_strlen; 
0x305da: calljump___GI_strlen; 
0x9e40c: mov rsi, qword [r13]; mov rdi, qword [r14]; mov rdx, rbp; callenvz_entry; mov rdi, rbp; mov r15, rax; calljump___GI_strlen; 
0xa1980: endbr64 ; pushr14; pushr13; mov r13, rsi; pushr12; mov r12, rdi; mov rdi, rsi; pushrbp; pushrbx; mov rbx, rdx; calljump___GI_strlen; 
0xfcaf7: lea r13, [rsp+0x41]; mov r12d, eax; mov rdi, r13; calljump___GI_strlen; 
0x10a9e0: mov rdi, rbx; add rbp, 0x1; calljump___GI_strlen; 
0x142619: mov rdi, qword [rsp+0x8]; calljump___GI_strlen; 
0x1427dc: mov rdx, qword [rsp]; lea r14, [r15+0x10]; mov rdi, rdx; mov qword [rsp+0x58], rdx; calljump___GI_strlen; 
0x142a24: mov r12, qword [r15+0x8]; mov rdi, r12; calljump___GI_strlen; 
0x30723: mov rdi, rbx; calljump___GI_strlen; 
0x308e5: mov rdi, rbx; calljump___GI_strlen; 
0x309e5: mov rdi, r12; calljump___GI_strlen; 
0x30bc8: mov byte [rcx], 0x0; mov rdi, r13; calljump___GI_strlen; 
0x9d8a0: endbr64 ; pushr15; pushr14; pushr13; mov r13, rdx; pushr12; mov r12, rdi; mov rdi, rdx; pushrbp; pushrbx; mov rbx, rsi; sub rsp, 0x8; calljump___GI_strlen; 
0xb4c00: mov rdi, r14; mov qword [rsp+0x30], r14; xor ebp, ebp; lea r12, [rsp+0x70]; calljump___GI_strlen; 
0x114400: endbr64 ; pushr15; mov r15, rdi; pushr14; xor r14d, r14d; pushr13; pushr12; pushrbp; pushrbx; xor ebx, ebx; sub rsp, 0x18; mov qword [rsp+0x8], 0x0; lea r12, [rsp+0x8]; lea rbp, [rsp+0x4]; calljump___GI_strlen; 
0x129530: mov rdi, rbx; calljump___GI_strlen; 
0x9d9b0: calljump___GI_strlen; 
0x59360: endbr64 ; pushr15; movsxd  rcx, ecx; lea rax, [rel tryfunc]; pushr14; mov r14, rdi; pushr13; pushr12; pushrbp; movsxd  rbp, esi; pushrbx; sub rsp, 0x78; mov rsi, qword [rax+rcx*8]; mov rax, qword [rel data_1d6df8]; mov dword [rsp+0x4c], edx; lea rcx, [rsp+0x50]; mov qword [rsp+0x8], rdi; shr rcx, 0x4; mov qword [rsp+0x10], rsi; mov ebx, dword [fs:rax]; lea rax, [rel try_nocreate]; mov r15, rcx; cmp rsi, rax; mov qword [rsp+0x50], rcx; seter9b; mov byte [rsp], r9b; calljump___GI_strlen; 
0x12b6bd: mov rdi, r13; calljump___GI_strlen; 
0x12121e: mov rdi, rbp; mov qword [rsp+0x8], r8; calljump___GI_strlen; 
0x1212c3: mov rdi, rbp; calljump___GI_strlen; 
0x121380: mov rdi, rbp; mov dword [rsp+0x8], r10d; calljump___GI_strlen; 
0x121510: mov rdi, rbp; calljump___GI_strlen; 
0x117f06: lea rax, [rsp+0x70]; mov edx, r14d; lea r13, [rsp+0x44]; mov r14, rax; lea rsi, [rel 0x198d87]; mov rdi, rax; mov qword [rsp+0x20], rax; xor eax, eax; callsprintf; mov rdi, r14; calljump___GI_strlen; 
0x117f9a: mov rdi, qword [rsp+0x38]; mov qword [rsp+0x140], rdi; calljump___GI_strlen; 
0x117f9a: mov rdi, qword [rsp+0x38]; mov qword [rsp+0x140], rdi; calljump___GI_strlen; mov rdi, qword [rsp+0x30]; add rax, 0x1; mov qword [rsp+0x150], rdi; mov qword [rsp+0x148], rax; calljump___GI_strlen; 
0x117f9a: mov rdi, qword [rsp+0x38]; mov qword [rsp+0x140], rdi; calljump___GI_strlen; mov rdi, qword [rsp+0x30]; add rax, 0x1; mov qword [rsp+0x150], rdi; mov qword [rsp+0x148], rax; calljump___GI_strlen; add rax, 0x1; mov qword [rsp+0x158], rax; mov rax, qword [rsp+0x8]; mov rdi, rax; mov qword [rsp+0x160], rax; calljump___GI_strlen; 
0x14c940: endbr64 ; pushr15; mov r15, r9; pushr14; xor r14d, r14d; pushr13; mov r13, r8; pushr12; mov r12, rcx; pushrbp; mov rbp, rdx; pushrbx; mov rbx, rdi; sub rsp, 0x8; cmp esi, 0xa; seter14b; calljump___GI_strlen; 
0x114500: endbr64 ; pushr12; pushrbp; pushrbx; mov rbx, rdi; sub rsp, 0x30; calljump___GI_strlen; 
0x14ebe0: endbr64 ; pushrbp; mov rbp, rsp; pushr15; mov r15, rdx; pushr14; pushr13; mov r13, rsi; pushr12; pushrbx; mov ebx, edi; mov rdi, rsi; sub rsp, 0x158; mov qword [rbp-0x170], rsi; calljump___GI_strlen; 
0x91e90: endbr64 ; pushr13; mov r13d, 0x22; pushr12; mov r12, rdi; mov rdi, rsi; pushrbp; mov rbp, rsi; pushrbx; sub rsp, 0x28; calljump___GI_strlen; 
0x14e310: endbr64 ; pushrbp; mov rbp, rsp; pushr15; mov r15, rdi; pushr14; mov r14, rsi; pushr13; mov r13, rdx; pushr12; mov r12, rcx; pushrbx; sub rsp, 0x28; calljump___GI_strlen; 
0x14e340: mov rdi, r14; calljump___GI_strlen; 
0x14e356: mov rdi, r13; mov qword [rbp-0x50], rdx; mov qword [rbp-0x48], rcx; calljump___GI_strlen; 
0x14e37b: mov rdi, r12; mov qword [rbp-0x48], rdx; calljump___GI_strlen; 
0x14c8e0: endbr64 ; pushr15; mov r15, r9; pushr14; mov r14, r8; pushr13; mov r13, rcx; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; sub rsp, 0x8; calljump___GI_strlen; 
0x11cb20: endbr64 ; pushr13; mov r13, rdx; pushr12; mov r12, rdi; pushrbp; mov rbp, rsi; pushrbx; sub rsp, 0x8; calljump___GI_strlen; 
0x86a7e: mov rdi, rsi; calljump___GI_strlen; 
0x10bb80: endbr64 ; pushr12; mov r12, rsi; pushrbp; mov rbp, rdi; mov rdi, rsi; pushrbx; calljump___GI_strlen; 
0x9d370: endbr64 ; pushr12; mov r12, rdi; mov rdi, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdx; calljump___GI_strlen; 
0x9dd87: mov r14, rcx; mov rdi, rdx; calljump___GI_strlen; 
0x9dd87: mov r14, rcx; mov rdi, rdx; calljump___GI_strlen; mov rdi, r14; mov qword [rsp+0x40], rax; calljump___GI_strlen; 
0x9de06: mov rdi, rbx; calljump___GI_strlen; 
0x9df88: mov rdi, qword [rsp+0x8]; calljump___GI_strlen; 
0x31da0: mov edi, r14d; call__close_nocancel; mov rsi, qword [rbx]; mov rdi, rsi; mov qword [rbp-0xd0], rsi; calljump___GI_strlen; 
0x393df: mov rdi, qword [rsp+0x10]; calljump___GI_strlen; 
0x396f8: mov rdi, qword [rsp+0x10]; calljump___GI_strlen; 
0x39730: mov rdi, qword [rsp+0x8]; calljump___GI_strlen; 
0x14d030: endbr64 ; pushr15; pushr14; mov r14, rcx; pushr13; pushr12; mov r12, rdi; pushrbp; xor ebp, ebp; pushrbx; mov ebx, esi; sub rsp, 0x38; mov qword [rsp+0x10], rdx; calljump___GI_strlen; 
0x13b85b: mov qword [rsp+0x20], 0x0; mov rdi, qword [rsp+0x18]; mov qword [rsp+0x28], 0x0; calljump___GI_strlen; 
0xa10e0: endbr64 ; pushrbp; pushrbx; mov rbx, rdi; sub rsp, 0x8; calljump___GI_strlen; 
0x13bfdc: calljump___GI_strlen; 
0x13c006: mov rdi, r12; mov dword [rbp-0x4c], edx; mov qword [rbp-0x48], rcx; calljump___GI_strlen; 
0x13c0a6: mov rdi, r13; calljump___GI_strlen; 
0x9db90: mov rdi, rbp; add r12, 0x8; calljump___GI_strlen; 
0x32568: mov rdi, rbx; lea r15, [rel _nl_category_name_sizes]; calljump___GI_strlen; 
0x326bc: mov qword [rbp-0x1b0], rcx; calljump___GI_strlen; 
0x32a77: mov qword [rbp-0x1b0], rcx; calljump___GI_strlen; 
0x581c5: mov rdi, rbx; call_IO_new_fclose; mov rdi, r13; calljump___GI_strlen; 
0x110fc6: calljump___GI_strlen; 
0x110fda: mov qword [rbp-0x50], rdx; calljump___GI_strlen; 
0x11c17a: mov rax, qword [rel data_1d6e38]; mov edi, dword [fs:rax]; callhstrerror; mov qword [rbx], rax; mov rdi, rax; calljump___GI_strlen; 
0x11c1d0: mov qword [rsp], rdi; lea rbx, [rsp+0x20]; mov rbp, rsp; calljump___GI_strlen; 
0xf71fd: lea r12, [rax+0x1]; mov rdi, r12; calljump___GI_strlen; 
0xf467e: mov rdi, r15; lea r12, [rsp+0xa0]; lea r13, [rsp+0x98]; calljump___GI_strlen; 
0xf46fd: mov rdi, r15; calljump___GI_strlen; 
0x9e2f5: mov rdi, r12; calljump___GI_strlen; 
0x9e2f5: mov rdi, r12; calljump___GI_strlen; mov rdi, r13; mov r15, rax; calljump___GI_strlen; 
0xa12af: mov rdi, r15; calljump___GI_strlen; 
0x102c80: endbr64 ; pushr13; pushr12; mov r12, rdi; mov rdi, rsi; pushrbp; pushrbx; mov rbx, rsi; sub rsp, 0x8; calljump___GI_strlen; 
0x1497f0: endbr64 ; pushr14; pushr13; pushr12; mov r12, rsi; pushrbp; mov rbp, rdi; pushrbx; sub rsp, 0x10; calljump___GI_strlen; 
0xf87a0: mov rax, qword [rsp+0x10]; mov r8, qword [rsp+0x48]; mov rdi, rbx; sub r8, rax; mov qword [rsp], r8; calljump___GI_strlen; 
0x144823: mov rdi, r14; mov qword [rsp+0x8], r14; calljump___GI_strlen; 
0x82050: endbr64 ; pushr13; pushr12; pushrbp; mov rbp, rdi; pushrbx; mov rbx, rsi; sub rsp, 0x8; calljump___GI_strlen; 
0x133a72: mov rdi, r15; mov qword [rsp+0x20], rcx; calljump___GI_strlen; 
0xfc825: lea r12, [rsp+0x145]; mov rdi, r12; calljump___GI_strlen; 
0x14f6f4: mov rbx, qword [rsp+0x30]; mov rdi, rbx; calljump___GI_strlen; 
0x11cab0: endbr64 ; pushr12; mov r12d, edi; mov rdi, rsi; pushrbp; mov rbp, rdx; pushrbx; mov rbx, rsi; calljump___GI_strlen; 
0x14a3dd: mov rdi, r13; calljump___GI_strlen; 
0x14e040: endbr64 ; pushr15; pushr14; pushr13; mov r13, rsi; pushr12; mov r12, rdi; pushrbp; xor ebp, ebp; pushrbx; sub rsp, 0x48; calljump___GI_strlen; 
0x1528bd: mov rdi, r14; calljump___GI_strlen; 
0x15293f: mov rdi, qword [rbp-0x488]; calljump___GI_strlen; 
0x1529f1: mov qword [rbp-0x4d0], rdi; calljump___GI_strlen; 
0x152fe8: mov r14, qword [rbp-0x488]; mov rdi, r14; calljump___GI_strlen; 
0x15328a: mov rax, qword [r15+0x8]; mov r14, qword [rax+r12*8]; mov rdi, r14; calljump___GI_strlen; 
0x15378b: mov rdi, r14; calljump___GI_strlen; 
0x153a8b: mov rbx, qword [rbp-0x440]; mov rdi, rbx; calljump___GI_strlen; 
0x153afb: mov r13, qword [r14+0x20]; mov rdi, r13; calljump___GI_strlen; 
0x153b1e: mov rdi, r9; calljump___GI_strlen; 
0x153dbc: mov rdi, rax; calljump___GI_strlen; 
0x153e6e: mov rdi, r14; calljump___GI_strlen; 
0xc9b60: endbr64 ; pushr15; pushr14; mov r14d, ecx; pushr13; mov r13, rsi; pushr12; mov r12, rdi; pushrbp; pushrbx; mov ebx, edx; sub rsp, 0x38; calljump___GI_strlen; 
0xc9b60: endbr64 ; pushr15; pushr14; mov r14d, ecx; pushr13; mov r13, rsi; pushr12; mov r12, rdi; pushrbp; pushrbx; mov ebx, edx; sub rsp, 0x38; calljump___GI_strlen; mov rdi, r13; lea rbp, [rax+0x1]; calljump___GI_strlen; 
0x77ac0: endbr64 ; pushr13; pushr12; pushrbp; mov rbp, rdi; pushrbx; mov rbx, rsi; sub rsp, 0x8; calljump___GI_strlen; 
0x9db09: pushr12; mov r12, rdi; mov rdi, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdx; calljump___GI_strlen; 
0x117401: mov esi, 0x1; mov edi, r13d; lea r12, [rsp+0xe0]; call__GI___listen; mov r15d, dword [rsp+0x50]; mov rdi, r12; xor eax, eax; lea rdx, [rel 0x1992ae]; mov esi, 0x8; mov ecx, r15d; call__snprintf; mov rdi, r12; calljump___GI_strlen; 
0x117401: mov esi, 0x1; mov edi, r13d; lea r12, [rsp+0xe0]; call__GI___listen; mov r15d, dword [rsp+0x50]; mov rdi, r12; xor eax, eax; lea rdx, [rel 0x1992ae]; mov esi, 0x8; mov ecx, r15d; call__snprintf; mov rdi, r12; calljump___GI_strlen; mov rsi, r12; mov edi, ebx; lea rdx, [rax+0x1]; call__libc_write; mov rdi, r12; mov rbp, rax; calljump___GI_strlen; 
0x11765a: mov rax, qword [rsp+0x18]; mov rdi, rax; mov qword [rsp+0xe0], rax; calljump___GI_strlen; 
0x11765a: mov rax, qword [rsp+0x18]; mov rdi, rax; mov qword [rsp+0xe0], rax; calljump___GI_strlen; add rax, 0x1; mov qword [rsp+0xe8], rax; mov rax, qword [rsp+0x20]; mov rdi, rax; mov qword [rsp+0xf0], rax; calljump___GI_strlen; 
0x11765a: mov rax, qword [rsp+0x18]; mov rdi, rax; mov qword [rsp+0xe0], rax; calljump___GI_strlen; add rax, 0x1; mov qword [rsp+0xe8], rax; mov rax, qword [rsp+0x20]; mov rdi, rax; mov qword [rsp+0xf0], rax; calljump___GI_strlen; add rax, 0x1; mov qword [rsp+0xf8], rax; mov rax, qword [rsp+0x28]; mov rdi, rax; mov qword [rsp+0x100], rax; calljump___GI_strlen; 
0x352e6: mov rdi, r12; calljump___GI_strlen; 
0x352e6: mov rdi, r12; calljump___GI_strlen; mov rdi, rbx; mov r14, rax; mov qword [rbp-0xd8], rax; calljump___GI_strlen; 
0x352e6: mov rdi, r12; calljump___GI_strlen; mov rdi, rbx; mov r14, rax; mov qword [rbp-0xd8], rax; calljump___GI_strlen; mov rsi, rbx; lea rax, [r14+rax+0x1c]; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rax, [rsp+0xf]; and rax, 0xfffffffffffffff0; mov rdi, rax; mov qword [rbp-0x98], rax; calljump___GI_stpcpy; mov edi, 0x2f; mov rdx, r14; mov rsi, r12; mov word [rax], di; lea rdi, [rax+0x1]; calljump___GI_mempcpy; mov rdi, r13; mov dword [rax], 0x6f6d2e; calljump___GI_strlen; 
0x356fa: mov rdi, r12; calljump___GI_strlen; 
0x35714: mov rdi, qword [rbp-0x88]; calljump___GI_strlen; 
0x35714: mov rdi, qword [rbp-0x88]; calljump___GI_strlen; mov rdi, qword [rbp-0xd0]; lea rbx, [rax+0x1]; calljump___GI_strlen; 
0x35896: mov rdi, r12; calljump___GI_strlen; 
0xd39db: lea rdi, [r14+0x13]; calljump___GI_strlen; 
0x13d932: calljump___GI_strlen; 
0x13d990: mov rdi, rbx; mov qword [rsp+0x8], r9; calljump___GI_strlen; 
0x149740: endbr64 ; pushr14; pushr13; pushr12; mov r12, rsi; pushrbp; mov rbp, rdi; pushrbx; sub rsp, 0x10; calljump___GI_strlen; 
0x13c622: calljump___GI_strlen; 
0x13c680: mov rdi, rbx; mov qword [rsp+0x8], r9; calljump___GI_strlen; 
0x4cc11: mov rdi, r13; mov byte [rsp+0x16], dl; calljump___GI_strlen; 
0x112d40: endbr64 ; pushr13; mov r13, rdi; mov rdi, rsi; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; sub rsp, 0x8; calljump___GI_strlen; 
0x13cebc: calljump___GI_strlen; 
0x13cf31: mov rdi, rbx; calljump___GI_strlen; 
0xed6cc: shr ebx, 0x3; shl eax, 0x7; mov rdi, rbp; mov qword [r12+0x28], 0x0; and ebx, 0x1; shl ebx, 0x4; or  ebx, eax; movzx   eax, byte [r12+0x38]; and eax, 0x6f; or  ebx, eax; mov byte [r12+0x38], bl; calljump___GI_strlen; 
0x123f90: mov rdi, qword [r12]; add r12, 0x8; calljump___GI_strlen; 
0x52593: mov r14, rdi; mov rdi, rdx; mov rbp, rdx; calljump___GI_strlen; 
0x3fec6: mov rdi, r12; calljump___GI_strlen; 
0x9dc15: mov rax, rbx; mov rsi, r12; mov rdi, rbp; mov qword [rsp], rdx; sub rax, rdx; sub rsi, rax; mov qword [rsp+0x8], rsi; calljump___GI_strlen; 
0x449ba: mov r12, qword [rax+0x38]; mov rdi, r12; calljump___GI_strlen; 
0xd3370: mov r13, qword [r12+r15*8]; mov rdi, r13; calljump___GI_strlen; 
0x30098: mov r15, qword [rsp+0x8]; mov rdi, r15; calljump___GI_strlen; 
0x359f0: endbr64 ; pushr15; lea r15, [rel _nl_loaded_domains]; pushr14; lea r14, [rel lock]; pushr13; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; mov rdi, r14; sub rsp, 0x58; mov qword [rsp+0x8], rcx; call__pthread_rwlock_rdlock; mov rdi, rbx; calljump___GI_strlen; 
0x35af2: mov rdi, rax; calljump___GI_strlen; 
0x35b57: mov rdi, r14; call__pthread_rwlock_wrlock; mov rdi, rbx; calljump___GI_strlen; 
0x9dcdd: mov rdi, rdx; calljump___GI_strlen; 
0x1112a7: mov qword [rsp+0x90], rdi; calljump___GI_strlen; 
0x1112cd: mov r13d, 0x9; mov ebx, 0x8; mov ebp, 0x7; mov qword [rsp+0xa8], 0x1; lea rax, [rel data_197ff6[9]]  {"("}; mov qword [rsp+0xb0], rdi; mov qword [rsp+0xa0], rax; calljump___GI_strlen; 
0x812e1: mov rbp, qword [rdx]; add rbx, 0x2; mov rdi, rbp; calljump___GI_strlen; 
0xeda33: mov rdi, rsi; mov dword [rsp+0x8], ecx; calljump___GI_strlen; 
0xed797: movsxd  rdi, edi; lea rax, [rel __re_error_msgid_idx]; mov r12, rdx; mov rbp, rcx; mov edx, 0x5; lea rsi, [rel __re_error_msgid]  {"Success"}; add rsi, qword [rax+rdi*8]; lea rdi, [rel _libc_intl_domainname]  {"libc"}; call__dcgettext; mov rdi, rax; mov r13, rax; calljump___GI_strlen; 
0x3fbc0: endbr64 ; pushr15; pushr14; mov r14, rdx; pushr13; pushr12; pushrbp; mov rbp, rdi; pushrbx; sub rsp, 0x28; mov qword [rsp+0x10], rsi; mov qword [rsp], rdx; mov dword [rsp+0xc], ecx; calljump___GI_strlen; 
0x3fd10: mov rdi, qword [rsp+0x10]; calljump___GI_strlen; 
0x11edf0: endbr64 ; pushr15; pushr14; pushr13; pushr12; mov r12, rdi; pushrbp; pushrbx; sub rsp, 0x8; calljump___GI_strlen; 
0x11ee20: mov r14, qword [rbx+0x20]; mov rdi, r14; calljump___GI_strlen; 
0x92ab0: endbr64 ; pushr15; pushr14; xor r14d, r14d; pushr13; mov r13d, esi; pushr12; pushrbp; mov rbp, rdi; pushrbx; mov rbx, rdx; sub rsp, 0x1c8; calljump___GI_strlen; 
0xcb890: mov r15, qword [r12+0x60]; mov rdi, r15; calljump___GI_strlen; 
0xcb8fa: mov r15, qword [rbx+0x60]; mov rdi, r15; calljump___GI_strlen; 
0xcb960: mov r15, qword [rbx]; mov r13, qword [rsp+0x78]; mov rdi, r15; calljump___GI_strlen; 
0xcb9c8: mov r13, qword [rbx+0x308]; mov r15, qword [rsp+0x78]; mov rdi, r13; calljump___GI_strlen; 
0xcb9c8: mov r13, qword [rbx+0x308]; mov r15, qword [rsp+0x78]; mov rdi, r13; calljump___GI_strlen; mov rcx, qword [rsp+0x10]; mov rdi, r13; mov rsi, r15; mov rdx, rax; mov qword [rsp+0x48], rax; callsub_24550; mov rdi, qword [rbx+0x3c8]; mov r14, qword [rsp+0x78]; mov r13d, eax; mov qword [rsp+0x40], rdi; calljump___GI_strlen; 
0xcbaf8: mov rdi, qword [r13]; mov qword [rsp+0x20], rdi; calljump___GI_strlen; 
0xcbb75: mov r15, qword [rsp+0x10]; mov r12, qword [r15+rbp+0x70]; mov rdi, r12; calljump___GI_strlen; 
0xcbb75: mov r15, qword [rsp+0x10]; mov r12, qword [r15+rbp+0x70]; mov rdi, r12; calljump___GI_strlen; mov rcx, qword [rsp+0x20]; mov rdi, r12; mov rsi, r14; mov rdx, rax; mov r13, rax; callsub_24550; mov qword [rsp+0x10], r15; mov r15, qword [r15+rbp+0x38]; mov r12d, eax; mov rax, qword [rsp+0x78]; mov rdi, r15; mov qword [rsp+0x28], rax; calljump___GI_strlen; 
0xcc143: mov rdi, qword [r9+0x168]; mov dword [rsp+0x20], r11d; mov qword [rsp+0x18], r9; mov qword [rsp+0x10], rdi; calljump___GI_strlen; 
0xcc800: mov r15, qword [r12]; mov r13, qword [rsp+0x78]; mov rdi, r15; calljump___GI_strlen; 
0xcc835: mov r15, qword [r12+0x308]; mov r13, qword [rsp+0x78]; mov rdi, r15; calljump___GI_strlen; 
0xcc86e: mov r15, qword [r12+0x3c8]; mov r13, qword [rsp+0x78]; mov rdi, r15; calljump___GI_strlen; 
0xcc991: mov rdi, qword [r13-0x38]; mov r14, qword [rsp+0x78]; mov qword [rsp+0x20], rdi; calljump___GI_strlen; 
0xccdbc: mov r13, qword [rel data_1d4928]; mov qword [rsp+0x20], r9; mov dword [rsp+0x18], r11d; mov rdi, r13; mov qword [rsp+0x10], rsi; calljump___GI_strlen; 
0xcd22a: mov rdi, qword [r9+0x170]; mov qword [rsp+0x10], rdi; calljump___GI_strlen; 
0xcd51a: mov rdi, qword [rel data_1d4930]; mov qword [rsp+0x18], r9; mov dword [rsp+0x10], r11d; calljump___GI_strlen; 
0xcd59e: mov r15, qword [rax+0x20]; mov rdi, r15; calljump___GI_strlen; 
0xce27b: mov rdi, qword [rax+0x20]; mov qword [rsp+0x28], rdi; calljump___GI_strlen; 
0x5e970: mov rdi, r15; mov dword [rbp-0x5e8], r11d; calljump___GI_strlen; 
0x60587: mov byte [rbp+rax-0x465], 0x0; mov rdi, qword [rbp-0x6a8]; calljump___GI_strlen; 
0x60b78: mov rdi, r12; add r13d, 0x1; calljump___GI_strlen; 
0x60c50: mov rdi, r13; calljump___GI_strlen; 
0x60d90: mov rdi, r8; mov qword [rbp-0x608], rdx; mov qword [rbp-0x5e8], r8; calljump___GI_strlen; 
0x6423e: mov rdi, r15; add r12d, 0x1; calljump___GI_strlen; 
0x66cf4: mov rdi, qword [rbp-0x6a8]; calljump___GI_strlen; 
0x67276: mov rdi, qword [rbp-0x650]; mov dword [rbp-0x608], r11d; calljump___GI_strlen; 
0x1437a0: xor edx, edx; mov esi, 0x1; mov edi, 0x1; call__GI___socket; lea rdi, [r15+0x2]; mov dword [rbp], eax; mov dword [rsp+0xc], eax; calljump___GI_strlen; 
0x364d8: calljump___GI_strlen; 
0x368b1: mov ecx, ebx; add rbp, 0x8; mov rbx, qword [r12+rcx*8]; mov rdi, rbx; calljump___GI_strlen; 
0x59206: mov rdi, r13; calljump___GI_strlen; 
0x59270: mov rdi, rcx; calljump___GI_strlen; 
0x59346: mov rdi, r15; mov r13, r15; calljump___GI_strlen; 
0x147298: mov rdi, r12; calljump___GI_strlen; 
0x1472c0: mov r8, r12; mov ecx, ebp; lea rdx, [rel OPSYS]  {"unix"}; mov rdi, rbx; lea rsi, [rel 0x19befd]  {"%s.%d@%s"}; xor eax, eax; callsprintf; mov rdi, rbx; calljump___GI_strlen; 
0x4748a: mov r12, qword [rax+0x38]; mov rdi, r12; calljump___GI_strlen; 
0xdb31d: mov rdi, r14; calljump___GI_strlen; 
0xdb39f: mov rdi, qword [rbp-0x488]; calljump___GI_strlen; 
0xdb451: mov qword [rbp-0x4d0], rdi; calljump___GI_strlen; 
0xdba48: mov r14, qword [rbp-0x488]; mov rdi, r14; calljump___GI_strlen; 
0xdbcea: mov rax, qword [r15+0x8]; mov r14, qword [rax+r12*8]; mov rdi, r14; calljump___GI_strlen; 
0xdc1eb: mov rdi, r14; calljump___GI_strlen; 
0xdc4eb: mov rbx, qword [rbp-0x440]; mov rdi, rbx; calljump___GI_strlen; 
0xdc55b: mov r14, qword [rax+0x20]; mov rdi, r14; calljump___GI_strlen; 
0xdc57a: mov rdi, r9; calljump___GI_strlen; 
0xdc814: mov rdi, rax; calljump___GI_strlen; 
0xdc8c6: mov rdi, r14; calljump___GI_strlen; 
0x12b3b0: endbr64 ; pushr15; pushr14; mov r14, rsi; pushr13; mov r13, rdx; pushr12; pushrbp; pushrbx; sub rsp, 0x38; mov eax, dword [rsp+0x80]; mov rbx, qword [rsp+0x70]; mov qword [rsp+0x8], rdi; mov qword [rsp+0x20], rsi; mov rbp, qword [rsp+0x78]; mov dword [rsi+0x10], eax; mov rdi, rbx; mov r15, qword [rsp+0x88]; mov qword [rsp+0x18], rcx; calljump___GI_strlen; 
0x12b40a: mov rdx, r12; mov rsi, rbx; mov rdi, r13; callsub_24650; mov qword [r14], r13; mov rdi, rbp; calljump___GI_strlen; 
0x12b4bf: mov rdi, r14; calljump___GI_strlen; 
0x9d780: endbr64 ; pushr14; pushr13; mov r13, rdi; mov rdi, rdx; pushr12; mov r12d, ecx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdx; calljump___GI_strlen; 
0xca2a8: mov rdi, rsi; call__tzstring; mov rbx, qword [rel zone_names]; mov qword [r13], rax; mov rdi, rbx; calljump___GI_strlen; 
0x11840a: mov rdi, rax; mov r13, rax; calljump___GI_strlen; 
0x11865a: lea rsi, [rel tokval]; mov rdi, rsi; calljump___GI_strlen; 
0x1186f0: lea rsi, [rel tokval]; mov rdi, rsi; calljump___GI_strlen; 
0xca561: mov rdi, rbx; calljump___GI_strlen; 
0x75080: calljump___GI_strlen; 
0x1090eb: mov rdi, rbx; mov r12, rsp; calljump___GI_strlen; 
0x133440: mov rdi, rbp; calljump___GI_strlen; 
0x13351e: xor r12d, r12d; mov dword [rdi], 0x0; cmp byte [rbp], 0x0; mov rbx, rdi; mov rax, r12; cmovne  rax, rbp; mov qword [rdi+0x8], rax; mov rdi, rbp; calljump___GI_strlen; 
0x13351e: xor r12d, r12d; mov dword [rdi], 0x0; cmp byte [rbp], 0x0; mov rbx, rdi; mov rax, r12; cmovne  rax, rbp; mov qword [rdi+0x8], rax; mov rdi, rbp; calljump___GI_strlen; lea rbp, [rbp+rax+0x1]; mov rax, r12; mov qword [rbx+0x30], rbp; cmp byte [rbp], 0x0; mov rdi, rbp; cmovne  rax, rbp; mov qword [rbx+0x10], rax; calljump___GI_strlen; 
0x13351e: xor r12d, r12d; mov dword [rdi], 0x0; cmp byte [rbp], 0x0; mov rbx, rdi; mov rax, r12; cmovne  rax, rbp; mov qword [rdi+0x8], rax; mov rdi, rbp; calljump___GI_strlen; lea rbp, [rbp+rax+0x1]; mov rax, r12; mov qword [rbx+0x30], rbp; cmp byte [rbp], 0x0; mov rdi, rbp; cmovne  rax, rbp; mov qword [rbx+0x10], rax; calljump___GI_strlen; lea rbp, [rbp+rax+0x1]; mov rax, r12; mov qword [rbx+0x30], rbp; cmp byte [rbp], 0x0; mov rdi, rbp; cmovne  rax, rbp; mov qword [rbx+0x18], rax; calljump___GI_strlen; 
0x1399c9: mov rdi, r12; add rbx, 0x8; calljump___GI_strlen; 
0x13a3d7: mov rdi, rbp; calljump___GI_strlen; 
0x13dcc0: pushr15; mov r15, rdx; pushr14; mov r14d, ecx; pushr13; pushr12; mov r12d, esi; pushrbp; pushrbx; sub rsp, 0x18; mov qword [rsp], rdi; mov rdi, rdx; calljump___GI_strlen; 
0xce91c: mov rdi, rax; mov dword [rsp+0x38], r9d; mov dword [rsp+0x30], r11d; mov qword [rsp+0x40], rax; calljump___GI_strlen; 
0xcea0a: lea eax, [rdx+0x2000e]  {"setnetent"}; mov rcx, qword [rsp]; mov qword [rsp+0x40], r8; movzx   eax, ax; mov dword [rsp+0x38], r9d; mov rdi, qword [rcx+rax*8+0x38]; mov dword [rsp+0x30], r11d; mov dword [rsp+0x28], edx; calljump___GI_strlen; 
0xceb24: lea eax, [rdx+0x20087]  {"ize"}; mov rcx, qword [rsp]; mov qword [rsp+0x38], r8; movzx   eax, ax; mov dword [rsp+0x30], r11d; mov rdi, qword [rcx+rax*8+0x38]; mov dword [rsp+0x28], edx; calljump___GI_strlen; 
0xcecb0: mov rcx, qword [rsp]; movsxd  rax, edx; mov qword [rsp+0x40], r8; mov dword [rsp+0x38], r9d; mov rdi, qword [rcx+rax*8+0x38]; mov dword [rsp+0x30], r11d; mov dword [rsp+0x28], edx; calljump___GI_strlen; 
0xced94: lea eax, [rdx+0x20007]  {"_files_setnetent"}; mov rcx, qword [rsp]; mov qword [rsp+0x40], r8; movzx   eax, ax; mov dword [rsp+0x38], r9d; mov rdi, qword [rcx+rax*8+0x38]; mov dword [rsp+0x30], r11d; mov dword [rsp+0x28], edx; calljump___GI_strlen; 
0xcef14: lea eax, [rdx+0x2001a]  {"ocess_mrelease"}; mov rcx, qword [rsp]; mov qword [rsp+0x40], r8; movzx   eax, ax; mov dword [rsp+0x38], r9d; mov rdi, qword [rcx+rax*8+0x38]; mov dword [rsp+0x30], r11d; mov dword [rsp+0x28], edx; calljump___GI_strlen; 
0xcf094: calljump___GI_strlen; 
0xcf269: mov edx, dword [r15+0x8]; mov rcx, qword [rsp]; mov dword [rsp+0x30], r9d; mov dword [rsp+0x38], r11d; cmp edx, 0xb; mov dword [rsp+0x28], edx; setgal; movzx   eax, al; mov rdi, qword [rcx+rax*8+0x168]; calljump___GI_strlen; 
0xcfa51: lea eax, [rdx+0x2006f]  {"a"}; mov rcx, qword [rsp]; mov qword [rsp+0x40], r8; movzx   eax, ax; mov dword [rsp+0x38], r9d; mov rdi, qword [rcx+rax*8+0x38]; mov dword [rsp+0x30], r11d; mov dword [rsp+0x28], edx; calljump___GI_strlen; 
0xd014e: mov rsi, qword [rax+0x20]; mov qword [rsp+0x48], r8; mov dword [rsp+0x40], r11d; mov rdi, rsi; mov qword [rsp+0x38], rsi; calljump___GI_strlen; 
0xd03dc: mov dword [rsp+0x30], r9d; mov dword [rsp+0x28], r11d; calljump___GI_strlen; 
0xd2e22: lea r15, [rbp+0x20]; mov dword [rbx+0x40], eax; add rbx, 0x48; mov qword [rbx-0x28], r15; mov rdi, r15; calljump___GI_strlen; 
0xd2e22: lea r15, [rbp+0x20]; mov dword [rbx+0x40], eax; add rbx, 0x48; mov qword [rbx-0x28], r15; mov rdi, r15; calljump___GI_strlen; lea r15, [r15+rax+0x1]; mov qword [rbx-0x20], r15; mov rdi, r15; calljump___GI_strlen; 
0xd3128: mov qword [rbx], rbp; mov rdi, rbp; add rbx, 0x8; calljump___GI_strlen; 
0xd5380: pushr15; pushr14; xor r14d, r14d; pushr13; mov r13, 0xffffffff3ffff9fe; pushr12; pushrbp; mov rbp, rsi; pushrbx; lea r12, [rbp+0x1]; mov r15, r12; sub rsp, 0xa8; mov dword [rsp], edi; mov rdi, rsi; mov qword [rsp+0x20], rdx; mov qword [rsp+0x28], rcx; mov dword [rsp+0x30], r8d; mov dword [rsp+0x38], r9d; mov byte [rsp+0x3f], r8b; calljump___GI_strlen; 
0xd9922: mov rdi, rbx; calljump___GI_strlen; 
0xd9cc5: mov rbx, qword [r9+0x20]; mov qword [rbp+0x10], r9; mov rdi, rbx; calljump___GI_strlen; 
0xda7b0: pushr15; pushr14; pushr13; pushr12; mov r12, rsi; pushrbp; pushrbx; sub rsp, 0x28; mov qword [rsp+0x18], rdi; mov qword [rsp+0x10], rdx; calljump___GI_strlen; 
0xda808: mov rbp, qword [r12+r13*8]; mov rdi, rbp; calljump___GI_strlen; 
0xda930: pushrbp; mov rbp, rsp; pushr15; mov r15, rdi; pushr14; mov r14d, edx; pushr13; mov r13, r9; pushr12; mov r12, r8; pushrbx; mov rbx, rcx; sub rsp, 0x738; mov qword [rbp-0x700], rdi; mov rdi, rsi; mov qword [rbp-0x728], rsi; mov dword [rbp-0x6e8], edx; calljump___GI_strlen; 
0xdacf1: mov rdi, qword [rbp-0x700]; calljump___GI_strlen; 
0xdae50: mov rdi, qword [rbp-0x700]; calljump___GI_strlen; 
0xdaf80: mov rdi, rbx; calljump___GI_strlen; 
0xdcc80: pushr15; pushr14; pushr13; pushr12; mov r12, rsi; pushrbp; pushrbx; sub rsp, 0x28; mov qword [rsp+0x18], rdi; mov qword [rsp+0x10], rdx; calljump___GI_strlen; 
0xdccd8: mov rbp, qword [r12+r13*8]; mov rdi, rbp; calljump___GI_strlen; 
0xdce00: pushrbp; mov rbp, rsp; pushr15; mov r15, rdi; pushr14; mov r14d, edx; pushr13; mov r13, r9; pushr12; mov r12, r8; pushrbx; mov rbx, rcx; sub rsp, 0x738; mov qword [rbp-0x700], rdi; mov rdi, rsi; mov qword [rbp-0x728], rsi; mov dword [rbp-0x6e8], edx; calljump___GI_strlen; 
0xdd1be: mov rdi, qword [rbp-0x700]; calljump___GI_strlen; 
0xdd320: mov rdi, qword [rbp-0x700]; calljump___GI_strlen; 
0xdd450: mov rdi, rbx; calljump___GI_strlen; 
0xddb30: mov rdi, rbx; mov byte [rbp+rax-0x1030], 0x0; call__basename; mov rdi, rax; mov r12, rax; calljump___GI_strlen; 
0xea130: mov rdi, qword [rsp+0xe8]; mov qword [rsp+0x60], rdi; calljump___GI_strlen; 
0xea6d7: mov rdi, rbx; calljump___GI_strlen; 
0xeabbd: mov rdi, qword [rsp+0xe8]; mov qword [rsp+0x60], rdi; calljump___GI_strlen; 
0xeacc9: mov rbp, qword [rsp+0xf8]; mov qword [rsp+0x60], rcx; mov rdi, rbp; calljump___GI_strlen; 
0xeadd8: mov rbp, qword [rsp+0xf8]; mov rdi, rbp; calljump___GI_strlen; 
0xeaedd: mov rbp, qword [rsp+0xf8]; mov rdi, rbp; calljump___GI_strlen; 
0xeafe3: mov rbp, qword [rsp+0xf8]; or  ebx, 0xffffffff; mov rdi, rbp; calljump___GI_strlen; 
0xefc5f: mov rdi, rax; mov r15, rax; calljump___GI_strlen; 
0xefc6d: mov rdi, r13; calljump___GI_strlen; 
0xf17b4: mov rdi, rax; calljump___GI_strlen; 
0xf1909: mov rdi, rcx; mov qword [rbp-0x488], rcx; calljump___GI_strlen; 
0xf194d: mov rdi, r13; calljump___GI_strlen; 
0xf19b7: mov rdi, r14; calljump___GI_strlen; 
0xf207b: mov byte [r14], 0x0; mov rdi, rbx; add r13, 0x1; calljump___GI_strlen; 
0xf2143: mov byte [r14], 0x0; mov rdi, rbx; mov r14, qword [rbp]; calljump___GI_strlen; 
0xf295c: mov rdi, rbx; mov qword [rsp+0x30], r9; calljump___GI_strlen; 
0xf2c22: mov rdi, r9; mov qword [rsp], r9; calljump___GI_strlen; 
0xf2cb0: calljump___GI_strlen; 
0xf2d84: mov rdi, r13; calljump___GI_strlen; 
0xf2fc7: mov rdi, rbx; calljump___GI_strlen; 
0xf2ffa: mov rdi, rax; calljump___GI_strlen; 
0xf3172: mov rdi, r13; mov qword [rsp], r9; xor r15d, r15d; calljump___GI_strlen; 
0xf3207: mov rdi, r12; xor ebx, ebx; calljump___GI_strlen; 
0xf34fd: calljump___GI_strlen; 
0xf356e: mov rdi, r13; calljump___GI_strlen; 
0xf3626: calljump___GI_strlen; 
0xf38ef: mov rdi, rax; calljump___GI_strlen; 
0xf3a3e: mov rdi, rax; mov qword [rsp+0x8], r9; calljump___GI_strlen; 
0xf64a9: lea r14, [rbx+0x13]; mov rdi, r14; calljump___GI_strlen; 
0xf64d6: mov rdi, r14; calljump___GI_strlen; 
0xf6504: movzx   eax, word [rsp+0x2e]; mov rdi, r14; add eax, 0x1; mov word [r12+0x60], ax; mov rax, qword [rbp]; mov qword [r12+0x8], rax; calljump___GI_strlen; 
0xf65ee: mov ecx, dword [rsp+0xc]; mov eax, dword [rbp+0x2c]; mov rdi, r14; sub eax, ecx; cdqe; mov qword [rsp+0x20], rax; calljump___GI_strlen; 
0xf7998: lea rbx, [rax+0x13]; mov rdi, rbx; calljump___GI_strlen; 
0xf7aec: add dword [r12+0x2c], 0x1; mov rbp, qword [r12+0x18]; mov rdi, rbp; calljump___GI_strlen; 
0xf7b3e: lea rbp, [rax+0x13]; mov rdi, rbp; calljump___GI_strlen; 
0xf7b80: mov rdi, r13; calljump___GI_strlen; 
0xf8027: testedx, edx; mov eax, 0x1; mov rdi, r15; mov r12d, esi; cmovle  edx, eax; mov ebx, r8d; movsxd  rbp, edx; mov qword [rsp+0x30], rbp; calljump___GI_strlen; 
0x154390: pushr15; mov r15, rdi; pushr14; lea r14, [rel 0x199819]  {"stdin"}; pushr13; mov r13, r8; pushr12; mov r12, rdx; pushrbp; pushrbx; sub rsp, 0xb8; mov qword [rsp+0x8], rsi; mov dword [rsp+0x1c], ecx; calljump___GI_strlen; 
0x154448: mov rdi, rbx; calljump___GI_strlen; 
0x126508: mov rdi, rbx; calljump___GI_strlen; 
0xa2d36: mov rdi, rsi; calljump___GI_strlen; 
0x10c0c0: mov rdi, rax; calljump___GI_strlen; 
0x10c35d: mov rdi, r15; mov qword [rsp+0x20], rdx; calljump___GI_strlen; 
0x10c49d: mov rdi, rbp; calljump___GI_strlen; 
0x10c842: mov r12, rdi; mov rdi, qword [rdi+0x10]; lea r13, [r13+r13*2]; lea r15, [rbp-0x38]; shl r13, 0x4; lea rbx, [rel add_argless_short_opt]; calljump___GI_strlen; 
0x10d22f: mov qword [r15+0x18], rax; mov rdi, rbx; calljump___GI_strlen; 
0x10d8b5: lea eax, [r8+r9]; mov dword [rsp+0x40], r9d; lea rdi, [rax+rax*2]; mov dword [rsp+0x30], r8d; shl rdi, 0x4; mov dword [rsp+0x24], eax; callmalloc; mov rcx, qword [r15+0x10]; mov qword [rsp+0x8], rax; mov rdi, rcx; mov qword [rsp+0x28], rcx; calljump___GI_strlen; 
0x10d8b5: lea eax, [r8+r9]; mov dword [rsp+0x40], r9d; lea rdi, [rax+rax*2]; mov dword [rsp+0x30], r8d; shl rdi, 0x4; mov dword [rsp+0x24], eax; callmalloc; mov rcx, qword [r15+0x10]; mov qword [rsp+0x8], rax; mov rdi, rcx; mov qword [rsp+0x28], rcx; calljump___GI_strlen; mov r13, qword [rbp+0x10]; mov edx, eax; mov rdi, r13; mov r14, rdx; mov qword [rsp+0x10], rdx; calljump___GI_strlen; 
0x10e2c8: mov edx, 0x5; call__dcgettext; mov rdi, rax; mov r14, rax; calljump___GI_strlen; 
0x10e4a3: mov rdi, r12; calljump___GI_strlen; 
0x10e6e1: mov rdi, rbx; calljump___GI_strlen; 
0x10eb67: mov rdi, r13; calljump___GI_strlen; 
0x10f035: mov rdi, qword [r15+0x30]; mov edx, 0x5; lea rsi, [rel 0x19afdd]  {" [OPTION...]"}; call__dcgettext; mov rdi, rax; mov r13, rax; calljump___GI_strlen; 
0x116e8e: mov rsi, qword [rax+0x20]; mov rdi, rsi; mov qword [rbp-0x78], rsi; calljump___GI_strlen; 
0x117401: mov esi, 0x1; mov edi, r13d; lea r12, [rsp+0xe0]; call__GI___listen; mov r15d, dword [rsp+0x50]; mov rdi, r12; xor eax, eax; lea rdx, [rel 0x1992ae]; mov esi, 0x8; mov ecx, r15d; call__snprintf; mov rdi, r12; calljump___GI_strlen; 
0x117401: mov esi, 0x1; mov edi, r13d; lea r12, [rsp+0xe0]; call__GI___listen; mov r15d, dword [rsp+0x50]; mov rdi, r12; xor eax, eax; lea rdx, [rel 0x1992ae]; mov esi, 0x8; mov ecx, r15d; call__snprintf; mov rdi, r12; calljump___GI_strlen; mov rsi, r12; mov edi, ebx; lea rdx, [rax+0x1]; call__libc_write; mov rdi, r12; mov rbp, rax; calljump___GI_strlen; 
0x11765a: mov rax, qword [rsp+0x18]; mov rdi, rax; mov qword [rsp+0xe0], rax; calljump___GI_strlen; 
0x11765a: mov rax, qword [rsp+0x18]; mov rdi, rax; mov qword [rsp+0xe0], rax; calljump___GI_strlen; add rax, 0x1; mov qword [rsp+0xe8], rax; mov rax, qword [rsp+0x20]; mov rdi, rax; mov qword [rsp+0xf0], rax; calljump___GI_strlen; 
0x11765a: mov rax, qword [rsp+0x18]; mov rdi, rax; mov qword [rsp+0xe0], rax; calljump___GI_strlen; add rax, 0x1; mov qword [rsp+0xe8], rax; mov rax, qword [rsp+0x20]; mov rdi, rax; mov qword [rsp+0xf0], rax; calljump___GI_strlen; add rax, 0x1; mov qword [rsp+0xf8], rax; mov rax, qword [rsp+0x28]; mov rdi, rax; mov qword [rsp+0x100], rax; calljump___GI_strlen; 
0x11b95b: mov rax, rbx; mov rdi, r12; lea rbx, [rbx+0x8]; mov qword [rax], r12; calljump___GI_strlen; 
0x11e8a6: mov rdi, r13; calljump___GI_strlen; 
0x120ce0: pushr15; pushr14; mov r14, r9; pushr13; mov r13d, r8d; pushr12; mov r12, rsi; pushrbp; mov rbp, rdi; pushrbx; mov rbx, rdx; sub rsp, 0x428; mov rax, qword [rdi]; mov rdi, rsi; mov dword [rsp+0x4], ecx; mov qword [rsp+0x8], rax; calljump___GI_strlen; 
0x120d20: mov rdi, rbx; calljump___GI_strlen; 
0x123ab0: mov rdi, r13; calljump___GI_strlen; 
0x128d71: mov rdi, r13; mov rbx, rsp; calljump___GI_strlen; 
0x174760: jmp jump___GI_strlen; 
0x317e6: mov byte [r12+0x8], 0x1; calljump___GI_strlen; 
0x14449f: mov rax, qword [rbp+0x30]; lea rdi, [rbx+0x84]; mov qword [rbx+0x7c], rax; mov qword [rsp+0x18], rdi; calljump___GI_strlen; 
0x14d528: mov rdi, r12; calljump___GI_strlen; 
0x14b769: pushr14; mov r14, r8; pushr13; mov r13, rcx; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; calljump___GI_strlen; 
0x4feca: mov r12, qword [rax+0x38]; mov rdi, r12; calljump___GI_strlen; 
0x12d168: mov rdi, rbx; calljump___GI_strlen; 
0x12d180: calljump___GI_strlen; 
0x49c6e: mov rdi, r13; mov byte [rsp+0x16], dl; calljump___GI_strlen; 
0x1473a0: mov rdi, r13; calljump___GI_strlen; 
0x14740d: lea r13, [rsp+0x50]; lea rsi, [rax+0x1]; mov edx, 0x40; mov rdi, r13; calljump___GI_strncpy; mov rdi, r13; mov byte [rsp+0x90], 0x0; calljump___GI_strlen; 
0x3c3a0: mov rdi, r13; calljump___GI_strlen; 
0x3c4de: mov byte [rbx+rcx], 0x0; mov rdi, r13; mov r15, qword [rsp+0x450]; mov qword [rsp+0x20], r9; mov qword [rsp+0x18], rcx; calljump___GI_strlen; 
0xeea51: mov rdi, rbx; calljump___GI_strlen; 
0x14df10: endbr64 ; pushr15; mov r15, r9; pushr14; mov r14, r8; pushr13; mov r13, rcx; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; sub rsp, 0x8; calljump___GI_strlen; 
0x1445fe: mov rdi, r15; calljump___GI_strlen; 
0x1445fe: mov rdi, r15; calljump___GI_strlen; lea ecx, [rax+0x3]; and ecx, 0xfffffffc; mov dword [rbx+0x8], ecx; lea r9d, [rcx+0x1]; mov rdi, r9; mov dword [rsp+0x2c], ecx; mov dword [rsp+0x28], r9d; mov qword [rsp+0x20], r9; callmalloc; mov rdi, r12; mov qword [rbx], rax; mov qword [rsp+0x10], rax; calljump___GI_strlen; 
0x133f61: mov rdi, r15; calljump___GI_strlen; 
0x40d41: mov rax, qword [r14+0x40]; mov dword [rsp+0x4c], ecx; mov byte [rsp+0x40], r11b; mov rdi, rax; mov dword [rsp+0x48], r10d; mov dword [rsp+0x2c], r9d; mov dword [rsp+0x10], r8d; mov qword [rsp+0x60], rax; calljump___GI_strlen; 
0x41585: mov rdi, rsi; mov dword [rsp+0x88], ecx; mov byte [rsp+0x80], r11b; mov dword [rsp+0x7c], edx; mov dword [rsp+0x70], r10d; mov dword [rsp+0x50], r9d; mov dword [rsp+0x48], r8d; calljump___GI_strlen; 
0x41690: mov rdi, qword [rsp+0x40]; mov dword [rsp+0x88], ecx; mov dword [rsp+0x80], edx; mov byte [rsp+0x7c], r11b; mov qword [rsp+0x70], rsi; mov dword [rsp+0x78], r10d; mov dword [rsp+0x68], r9d; calljump___GI_strlen; 
0x4206b: mov rdi, rsi; mov dword [rsp+0x80], ecx; mov byte [rsp+0x7c], r11b; mov dword [rsp+0x70], edx; mov dword [rsp+0x78], r10d; mov dword [rsp+0x50], r9d; mov dword [rsp+0x48], r8d; calljump___GI_strlen; 
0x4241d: mov rdi, qword [rsp+0x40]; mov dword [rsp+0x8c], ecx; mov byte [rsp+0x88], r11b; mov qword [rsp+0x80], rsi; mov dword [rsp+0x7c], edx; mov dword [rsp+0x70], r10d; mov dword [rsp+0x78], r9d; mov dword [rsp+0x68], r8d; calljump___GI_strlen; 
0x4333d: mov rdi, qword [rsp+0x40]; mov dword [rsp+0x78], edx; mov dword [rsp+0x8c], ecx; mov byte [rsp+0x88], r11b; mov qword [rsp+0x80], rsi; mov dword [rsp+0x7c], r10d; mov dword [rsp+0x70], r9d; mov dword [rsp+0x68], r8d; calljump___GI_strlen; 
0x437b4: mov rdi, qword [rsp+0x40]; mov dword [rsp+0x8c], ecx; mov r12d, 0x2; mov byte [rsp+0x88], r11b; mov qword [rsp+0x80], rsi; mov dword [rsp+0x7c], r10d; mov dword [rsp+0x70], r9d; mov dword [rsp+0x68], r8d; calljump___GI_strlen; 
0x43c02: mov rdi, qword [rsp+0x40]; mov dword [rsp+0x8c], ecx; mov byte [rsp+0x88], r11b; mov qword [rsp+0x80], rsi; mov dword [rsp+0x7c], r10d; mov dword [rsp+0x70], r9d; mov dword [rsp+0x68], r8d; calljump___GI_strlen; 
0x108690: endbr64 ; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; mov rdi, rsi; sub rsp, 0x8; calljump___GI_strlen; 
0xfde20: endbr64 ; pushr15; mov r15, rdi; pushr14; pushr13; pushr12; pushrbp; mov rbp, r8; pushrbx; sub rsp, 0x38; mov qword [rsp+0x28], rsi; mov dword [rsp+0x20], edx; mov qword [rsp+0x18], rcx; calljump___GI_strlen; 
0x5d12f: mov rdi, qword [rsp+0x50]; mov qword [rsp+0x58], rcx; mov dword [rsp+0x60], r11d; mov dword [rsp+0x38], r9d; calljump___GI_strlen; 
0x5d8e0: mov rdi, rbp; calljump___GI_strlen; 
0x5dd5c: mov r13, qword [rsp+0x70]; mov dword [rsp+0x8], r11d; mov rdi, r13; calljump___GI_strlen; 
0xa19f0: endbr64 ; pushr13; mov r13, rdi; mov rdi, rsi; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; sub rsp, 0x8; calljump___GI_strlen; 
0x26da6: sub rsp, 0x40; mov rdi, qword [rbp-0x98]; lea r10, [rsp+0xf]; and r10, 0xfffffffffffffff0; mov qword [r10], rdi; mov qword [rbp-0x58], r10; calljump___GI_strlen; 
0x26da6: sub rsp, 0x40; mov rdi, qword [rbp-0x98]; lea r10, [rsp+0xf]; and r10, 0xfffffffffffffff0; mov qword [r10], rdi; mov qword [rbp-0x58], r10; calljump___GI_strlen; sub rsp, 0x40; mov r10, qword [rbp-0x58]; mov rdi, r13; lea r14, [rsp+0xf]; pxorxmm0, xmm0; and r14, 0xfffffffffffffff0; mov qword [r10+0x8], rax; mov qword [r10+0x10], 0x0; mov qword [r14], r13; movups  xmmword [r10+0x18], xmm0; calljump___GI_strlen; 
0x26fc9: sub rsp, 0x40; mov rdi, r12; lea rdx, [rsp+0xf]; and rdx, 0xfffffffffffffff0; mov qword [rdx], r12; mov r13, rdx; calljump___GI_strlen; 
0x27150: sub rsp, 0x40; mov rdi, r12; lea rdx, [rsp+0xf]; and rdx, 0xfffffffffffffff0; mov qword [rdx], r12; mov r13, rdx; calljump___GI_strlen; 
0x2748b: sub rsp, 0x40; mov rdi, r13; lea r10, [rsp+0xf]; and r10, 0xfffffffffffffff0; mov qword [r10], r13; mov qword [rbp-0x58], r10; calljump___GI_strlen; 
0x274f7: mov rdi, qword [rbp-0x98]; mov dword [rbp-0x58], r10d; calljump___GI_strlen; 
0x274f7: mov rdi, qword [rbp-0x98]; mov dword [rbp-0x58], r10d; calljump___GI_strlen; mov r14, qword [rbp-0x90]; lea r12, [rax+0x1]; mov rdi, r14; calljump___GI_strlen; 
0x27c14: mov rdi, r13; calljump___GI_strlen; 
0x27c87: mov rdi, rax; calljump___GI_strlen; 
0x287f3: lea r15, [r14+0x13]; mov rdi, r15; calljump___GI_strlen; 
0x28938: lea r13, [rbx+rax+0x1]; mov rdi, r13; calljump___GI_strlen; 
0x28990: mov rdi, r14; mov rbx, r14; calljump___GI_strlen; 
0x2f640: pushrbp; mov rbp, rsp; pushr15; pushr14; pushr13; mov r13, rdi; pushr12; mov r12, rsi; pushrbx; mov rbx, rdx; sub rsp, 0x8; calljump___GI_strlen; 
0x2f640: pushrbp; mov rbp, rsp; pushr15; pushr14; pushr13; mov r13, rdi; pushr12; mov r12, rsi; pushrbx; mov rbx, rdx; sub rsp, 0x8; calljump___GI_strlen; mov rdi, r12; mov r14, rax; calljump___GI_strlen; 
0x301b8: mov r15, qword [rbx]; mov rdi, r15; calljump___GI_strlen; 
0x32cea: mov rdi, rbp; calljump___GI_strlen; 
0x340de: mov rdi, rbx; calljump___GI_strlen; 
0x341dc: mov rdi, rbx; calljump___GI_strlen; 
0x34282: mov rdi, rbx; calljump___GI_strlen; 
0x3751c: mov rdi, rbx; mov qword [rbp-0x1e8], r8; calljump___GI_strlen; 
0x3751c: mov rdi, rbx; mov qword [rbp-0x1e8], r8; calljump___GI_strlen; mov rdi, r12; lea rdx, [rax+0x1]; mov qword [rbp-0x1e0], rdx; calljump___GI_strlen; 
0x37a40: endbr64 ; pushr15; mov r15d, ecx; pushr14; pushr13; mov r13, rdx; pushr12; mov r12, r9; pushrbp; lea rbp, [r13+0x2]; pushrbx; sub rsp, 0x48; mov qword [rsp+0x10], rdi; mov rdi, r8; mov qword [rsp+0x8], rsi; mov dword [rsp], ecx; mov qword [rsp+0x18], r8; mov qword [rsp+0x38], r9; calljump___GI_strlen; 
0x37a8b: mov rdi, r12; calljump___GI_strlen; 
0x37aa8: mov rdi, qword [rsp+0x80]; calljump___GI_strlen; 
0x37aca: mov rdi, qword [rsp+0x88]; calljump___GI_strlen; 
0x37aed: mov rdi, qword [rsp+0x90]; calljump___GI_strlen; 
0x37afe: mov rdi, qword [rsp+0x98]; calljump___GI_strlen; 
0x37b57: mov rdi, r12; calljump___GI_strlen; 
0x37c80: mov rdi, rbp; add r15, 0x1; calljump___GI_strlen; 
0x37cd0: mov rdi, r12; add rbx, 0x1; calljump___GI_strlen; 
0x37d28: mov rdi, r14; add rbp, 0x1; calljump___GI_strlen; 
0x37e85: mov rdi, r14; add rbx, 0x1; calljump___GI_strlen; 
0x37ede: mov rdi, r14; calljump___GI_strlen; 
0x5ac22: mov rdi, qword [rsp+0x950]; mov dword [rsp+0x98], r9d; mov dword [rsp+0x94], r8d; calljump___GI_strlen; 
0x5b47d: mov rdi, rbx; calljump___GI_strlen; 
0x5b619: mov r15, qword [rsp+0x88]; mov dword [rsp+0x18], r8d; mov rdi, r15; calljump___GI_strlen; 
0xd741d: mov rax, qword [rsp+0x50]; mov rsi, r12; mov rdi, qword [rax+rbp*8]; calljump___wcscat_ifunc; 
0x266b5: mov rax, qword [rbp-0x40]; lea rdx, [rel _nl_C_locobj]; lea rsi, [rel 0x197890]  {"INTERNAL"}; mov rdi, qword [rax+r13+0x18]; calljump___GI___strcasecmp_l; 
0x30b01: lea rdx, [rel _nl_C_locobj]; lea rsi, [rel 0x197a11]  {"TRANSLIT"}; calljump___GI___strcasecmp_l; 
0x378b8: lea r12, [rbx+r15]; mov rdi, qword [rsp+0x8]; mov rdx, rbp; shr r12, 0x1; mov r13, r12; shl r13, 0x4; add r13, r14; mov rsi, qword [r13]; calljump___GI___strcasecmp_l; 
0x30263: mov rdx, rbp; mov rsi, r14; mov rdi, r15; calljump___GI___strcasecmp_l; 
0x30279: mov rdx, rbp; mov rsi, r13; mov rdi, r15; calljump___GI___strcasecmp_l; 
0x302a0: mov rdx, rbp; lea rsi, [rel 0x197a10]  {",TRANSLIT"}; mov rdi, r15; calljump___GI___strcasecmp_l; 
0x302c0: mov rdx, rbp; lea rsi, [rel 0x197a22]  {",IGNORE"}; mov rdi, r15; calljump___GI___strcasecmp_l; 
0x372c0: endbr64 ; mov rsi, qword [rsi]; mov rdi, qword [rdi]; lea rdx, [rel _nl_C_locobj]; jmp jump___GI___strcasecmp_l; 
0xf8d37: mov rsi, rsp; mov rdi, rbx; calljump___GI_strcpy; 
0x33947: mov eax, dword [rsp+0x4]; lea rdi, [rbx+0x4]; mov dword [rbx], eax; calljump___GI_strcpy; 
0x12a1be: mov rsi, qword [rsp+0x30]; mov rdi, qword [rsp+0x18]; calljump___GI_strcpy; 
0x35757: mov rsi, qword [rbp-0x88]; mov rdx, rbx; lea rdi, [rax+0x38]; add r13, 0x1; calljump___GI_mempcpy; mov rdx, r13; mov rsi, r12; mov rbx, rax; mov rdi, rax; callsub_24650; add r13, rbx; mov rsi, qword [rbp-0xd0]; mov rdi, r13; calljump___GI_strcpy; 
0x15131b: mov rsi, r15; mov rdi, rbp; calljump___GI_strcpy; 
0x11c5de: mov rdi, qword [rsp+0x8]; mov rsi, rbp; calljump___GI_strcpy; 
0x11c660: mov rsi, qword [rsp+0x10]; mov rdi, qword [rsp+0x8]; calljump___GI_strcpy; 
0x87540: mov rsi, qword [rdi+0x388 {link_map::l_scope_max}]; mov rdi, qword [rbx+0x10]; pop rbx; jmp jump___GI_strcpy; 
0x1266a4: mov rdi, qword [rsp+0x8]; mov rsi, rbx; calljump___GI_strcpy; 
0x126853: mov rdi, qword [rsp+0x8]; mov rsi, rbx; calljump___GI_strcpy; 
0x3c415: mov rdi, rbp; calljump___GI_strcpy; 
0x3c590: mov rsi, r13; mov rdi, rbp; calljump___GI_strcpy; 
0xb618c: mov rdi, r12; calljump___GI___wcschr; 
0xb6dfb: mov rdi, rbp; calljump___GI___wcschr; 
0xc4aec: add rsp, 0x8; sub rbx, rbp; xor esi, esi; mov rdx, rbx; pop rbx; pop rbp; pop r12; pop r13; jmp jump___GI___wmemset; 
0xd0ab7: mov esi, 0x20; mov rdi, r12; calljump___GI___wmemset; 
0xd0d23: mov esi, 0x20; mov rdi, r12; calljump___GI___wmemset; 
0xd0e4f: mov rdi, r12; mov r12, r13; calljump___GI___wmemset; 
0xd0f75: mov esi, 0x20; mov rdi, r12; calljump___GI___wmemset; 
0xd1040: mov esi, 0x20; mov rdi, r12; mov r12, r13; calljump___GI___wmemset; 
0xd10ed: mov esi, 0x20; mov rdi, r12; mov dword [rsp+0x38], ecx; mov r12, r13; mov qword [rsp+0x30], r8; calljump___GI___wmemset; 
0xd1223: mov esi, 0x20; mov rdi, r12; mov dword [rsp+0x38], ecx; mov r12, r13; mov qword [rsp+0x30], r8; calljump___GI___wmemset; 
0xd13e8: mov rdi, r12; mov r12, r13; calljump___GI___wmemset; 
0xd1501: mov rdi, r12; mov esi, 0x20; mov r12, r13; calljump___GI___wmemset; 
0xd1721: mov esi, 0x20; calljump___GI___wmemset; 
0xd17be: mov esi, 0x20; mov rdi, r12; calljump___GI___wmemset; 
0xd1853: mov esi, 0x20; mov rdi, r12; calljump___GI___wmemset; 
0xd19ac: mov rdi, r12; mov rdx, r13; mov esi, 0x30; mov qword [rsp+0x38], rcx; mov dword [rsp+0x30], r11d; lea r12, [r12+r13*4]; calljump___GI___wmemset; 
0xd1a28: mov esi, 0x20; mov rdi, r12; calljump___GI___wmemset; 
0xd1e5b: mov esi, 0x20; mov rdi, r12; calljump___GI___wmemset; 
0xd21dd: mov esi, 0x20; mov rdi, r12; calljump___GI___wmemset; 
0xd22ec: mov esi, 0x30; mov rdi, r12; calljump___GI___wmemset; 
0xd2319: mov rdi, r12; mov esi, 0x20; mov qword [rsp+0x48], rcx; mov dword [rsp+0x40], r11d; mov dword [rsp+0x38], r8d; mov qword [rsp+0x30], rdx; calljump___GI___wmemset; 
0xd23af: mov esi, 0x30; calljump___GI___wmemset; 
0xd23db: mov esi, 0x30; mov rdi, r12; calljump___GI___wmemset; 
0xd23f7: mov esi, 0x30; mov rdi, r12; calljump___GI___wmemset; 
0xd25e4: mov esi, 0x20; mov rdi, r12; calljump___GI___wmemset; 
0xd2797: mov rdi, r12; mov esi, 0x30; mov r12, r13; calljump___GI___wmemset; 
0xd27c1: sub r13, rax; mov rsi, r12; mov rdx, rax; mov dword [rsp+0x18], r11d; lea rdi, [r12+r13*4]; call__wmemmove; mov r11d, dword [rsp+0x18]; mov rdx, r13; mov rdi, r12; mov eax, 0x20; cmp r11d, 0x30; cmovne  r11d, eax; mov esi, r11d; calljump___GI___wmemset; 
0xd282e: mov esi, 0x20; mov rdi, r12; calljump___GI___wmemset; 
0xd290c: mov esi, 0x30; mov rdi, r12; mov r12, r13; calljump___GI___wmemset; 
0xd2923: mov esi, 0x30; mov rdi, r12; mov qword [rsp+0x30], r8; mov r12, r13; calljump___GI___wmemset; 
0xd294d: mov esi, 0x30; mov rdi, r12; mov qword [rsp+0x30], r8; mov r12, r13; calljump___GI___wmemset; 
0xd2977: mov esi, 0x30; mov rdi, r12; calljump___GI___wmemset; 
0xd2989: mov esi, 0x30; mov rdi, r12; calljump___GI___wmemset; 
0xd2a2b: mov esi, 0x30; mov rdi, r12; calljump___GI___wmemset; 
0xd2a41: mov esi, 0x30; mov rdi, r12; calljump___GI___wmemset; 
0xd2a6c: mov esi, 0x30; mov rdi, r12; calljump___GI___wmemset; 
0xd2a7e: mov esi, 0x30; mov rdi, r12; calljump___GI___wmemset; 
0xd2a9f: mov esi, 0x30; mov rdi, r12; calljump___GI___wmemset; 
0x10b19e: mov rdx, r12; mov rsi, r15; mov rdi, r13; calljump___GI_memcmp; 
0xa25ab: mov rdx, r14; mov rsi, rbp; mov rdi, r13; calljump___GI_memcmp; 
0xa26a0: mov rdx, r14; mov rsi, rbp; mov rdi, r13; calljump___GI_memcmp; 
0x10a8fe: mov rdx, r12; mov rsi, r15; mov rdi, r13; calljump___GI_memcmp; 
0x142619: mov rdi, qword [rsp+0x8]; calljump___GI_strlen; mov rsi, qword [rsp+0x8]; mov rdi, r14; lea rdx, [rax+0x1]; calljump___GI_memcmp; 
0x33410: lea rax, [rel _nl_category_name_idxs]; mov rdi, qword [rsp+0x8]; mov rdx, r12; movzx   esi, byte [rax+r15]; lea rax, [rel _nl_category_names]  {"LC_COLLATE"}; add rsi, rax; calljump___GI_memcmp; 
0x329b0: lea rax, [rel _nl_category_name_idxs]; mov rdi, qword [rbp-0x1a8]; mov rdx, rbx; movzx   esi, byte [rax+r12]; lea rax, [rel _nl_category_names]  {"LC_COLLATE"}; add rsi, rax; calljump___GI_memcmp; 
0x9ed23: mov rdx, r13; mov rsi, r15; mov rdi, rbx; calljump___GI_memcmp; 
0x525f9: mov rdx, r15; mov rsi, rbp; mov rdi, rbx; calljump___GI_memcmp; 
0x526d0: mov rdx, r15; mov rsi, rbp; mov rdi, r13; calljump___GI_memcmp; 
0x52740: mov rdi, rbx; mov rdx, r15; mov rsi, rbp; mov r13, rbx; calljump___GI_memcmp; 
0x9e9ff: lea rsi, [rbx+r15]; mov rdx, r14; mov rdi, rbx; mov qword [rsp+0x8], r8; calljump___GI_memcmp; 
0x12d2c0: endbr64 ; add rsi, 0x8; add rdi, 0x8; mov edx, 0x10; jmp jump___GI_memcmp; 
0xa21e7: lea rsi, [rbx+r14]; mov rdx, r13; mov rdi, rbx; mov qword [rsp+0x8], r8; calljump___GI_memcmp; 
0xc80e4: add rax, r13; mov rdx, r14; mov rdi, r12; lea rbp, [rbx+rax]; mov rsi, rbp; calljump___GI_memcmp; 
0xd673e: lea rax, [rbx+rbp+0x1]; mov rdi, qword [rsp+0x38]; mov rdx, r13; mov dword [rsp+0x30], r11d; mov rsi, rax; mov qword [rsp+0x40], rax; calljump___GI_memcmp; 
0xd67c5: mov rsi, qword [rsp+0x40]; mov rdi, r13; mov byte [rsp+0x58], r9b; mov byte [rsp+0x8e], r10b; mov dword [rsp+0x50], r11d; mov qword [rsp+0x48], r8; mov qword [rsp+0x38], rdx; calljump___GI_memcmp; 
0xd6f0d: mov rdi, qword [rsp+0x68]; lea rsi, [rbp+r12+0x1]; mov dword [rsp+0x88], r8d; mov dword [rsp+0x80], ecx; mov qword [rsp+0x78], rdx; calljump___GI_memcmp; 
0xe383f: lea rsi, [r13+rdx+0x1]; mov rdx, r15; mov qword [rsp+0x18], rdi; calljump___GI_memcmp; 
0xe6b7d: movsxd  rdi, dword [rsp+0x8]; movsxd  rsi, ecx; movsxd  rdx, edx; mov qword [rsp+0x18], r11; add rsi, r13; mov dword [rsp+0x10], ecx; add rdi, r13; calljump___GI_memcmp; 
0xe9035: movsxd  r9, ecx; movsxd  rsi, r13d; lea rdi, [rdx+rax]; mov dword [rsp+0x60], ecx; add rsi, rdx; mov rdx, r9; calljump___GI_memcmp; 
0xea1b3: lea rsi, [r14+rax+0x1]; mov rdx, r12; mov qword [rsp+0x90], rdi; calljump___GI_memcmp; 
0xea670: mov rdx, qword [rsp+0xa0]; mov rdi, qword [rsp+0xa8]; lea rsi, [r15+rax+0x1]; mov dword [rsp+0x98], r9d; mov byte [rsp+0x90], r10b; mov qword [rsp+0x60], r8; calljump___GI_memcmp; 
0xeac42: lea rsi, [r14+rax+0x1]; mov rdx, rbp; mov qword [rsp+0x98], rdi; calljump___GI_memcmp; 
0xeae52: lea rsi, [r14+rax+0x1]; mov rdx, rbp; mov qword [rsp+0x98], rdi; calljump___GI_memcmp; 
0x116d42: mov edx, dword [rbp+0x10]; mov rdi, qword [rbp+0x18]; mov rsi, qword [rsp+0x10]; calljump___GI_memcmp; 
0x146358: mov rsi, qword [r14+0x90]; movsxd  rdx, eax; mov rdi, r15; calljump___GI_memcmp; 
0x14f1d0: mov rdi, qword [rsp+0x10]; add rsi, rbp; mov rdx, r13; mov qword [rsp+0x28], rcx; mov qword [rsp+0x20], r11; mov qword [rsp+0x8], r8; calljump___GI_memcmp; 
0x12f9a0: mov rsi, qword [r14+0x18]; mov rdi, qword [rcx+0x18]; calljump___GI_memcmp; 
0x12faf5: lea rax, [rbx+r13]; mov rcx, qword [rsp+0x18]; mov rdi, qword [rsp+0x20]; mov edx, 0x10; mov r15, rax; and rax, 0xfffffffffffffffe; shr r15, 0x1; add rax, r15; lea rbp, [rcx+rax*8]; lea rsi, [rbp+0x8]; calljump___GI_memcmp; 
0x13b263: mov rax, qword [r14+0x18]; mov rdx, qword [rsp+0x18]; mov rdi, qword [rsp+0x10]; mov rsi, qword [rax]; calljump___GI_memcmp; 
0x3d213: mov r13d, dword [r12-0x4]; mov rsi, r12; mov rdi, rbp; mov rdx, r13; calljump___GI_memcmp; 
0x31298: lea r14, [rax+0x1]; mov esi, 0x40; mov rdi, r14; calljump___GI___strchrnul; 
0x829f6: lea r15, [rax+0x5]; mov esi, 0x2c; mov rdi, r15; calljump___GI___strchrnul; 
0x53860: endbr64 ; pushr15; pushr14; mov r14, rsi; mov esi, 0x25; pushr13; pushr12; pushrbp; pushrbx; mov rbx, rdx; sub rsp, 0x78; mov qword [rsp+0x18], 0x0; calljump___GI___strchrnul; 
0xb31d0: mov rdi, rbx; movsx   esi, al; calljump___GI___strchrnul; 
0x3df89: mov r12, rsi; mov rdi, rbp; mov esi, 0x2c; calljump___GI___strchrnul; 
0x75926: mov rdi, qword [rsp+0x8]; mov esi, 0x25; mov qword [rbx+0x18 {printf_spec::info.alt}], rdi {printf_spec::info.space}; calljump___GI___strchrnul; 
0x81260: lea rdi, [rax+0x1]; mov esi, 0x25; calljump___GI___strchrnul; 
0x118482: mov esi, 0x2e; mov rdi, rbx; xor r13d, r13d; calljump___GI___strchrnul; 
0xd4cdf: mov esi, 0x3a; mov rdi, r15; calljump___GI___strchrnul; 
0x10cfcc: mov rdi, qword [rsp]; mov esi, 0xa; calljump___GI___strchrnul; 
0x10d0e0: lea r14, [rbx+0x1]; mov esi, 0xa; add r15d, 0x1; mov rdi, r14; calljump___GI___strchrnul; 
0x11e7fb: mov esi, 0xa; mov rdi, rbx; add dword [rsp+0xc], 0x1; mov r12, rbx; calljump___GI___strchrnul; 
0x5bbf0: endbr64 ; pushr15; mov r15, rdx; pushr14; mov r14, rsi; pushr13; pushr12; pushrbp; pushrbx; mov rbx, rdi; mov rdi, r14; sub rsp, 0x4d8; mov rax, qword [rel data_1d6df8]; movdqu  xmm0, xmmword [rdx {__va_list_tag::gp_offset}] {__va_list_tag::fp_offset} {__va_list_tag::overflow_arg_area}; mov dword [rsp+0x4c], ecx; mov qword [rsp+0x70], rsi; mov eax, dword [fs:rax]; mov esi, 0x25; movups  xmmword [rsp+0xc8], xmm0; mov dword [rsp+0x80], eax; mov rax, qword [rdx+0x10 {__va_list_tag::reg_save_area}]; mov qword [rsp+0xd8], rax; calljump___GI___strchrnul; 
0x5bf30: lea r12, [r14+0x1]; mov esi, 0x25; add dword [rsp+0x28], 0x1; mov rdi, r12; calljump___GI___strchrnul; 
0x3d280: mov esi, 0x3a; mov rdi, rbx; calljump___GI___strchrnul; 
0x4ae60: mov rbx, qword [rsp]; lea rcx, [rel _nl_C_locobj]; mov edx, 0x3; lea rsi, [rel 0x197d6f]; mov rdi, rbx; calljump___GI___strncasecmp_l; 
0x4b1c1: mov rdi, qword [rsp]; lea rcx, [rel _nl_C_locobj]; mov edx, 0x3; lea rsi, [rel 0x197d65]; calljump___GI___strncasecmp_l; 
0x4b1ef: mov rbx, qword [rsp]; lea rcx, [rel _nl_C_locobj]; mov edx, 0x5; lea rsi, [rel 0x197d69]  {"inity"}; lea rbp, [rbx+0x3]; add rbx, 0x8; mov rdi, rbp; calljump___GI___strncasecmp_l; 
0x45250: lea rcx, [rel _nl_C_locobj]; mov edx, 0x3; mov rdi, r9; mov qword [rsp], r9; lea rsi, [rel 0x197d6f]; calljump___GI___strncasecmp_l; 
0x455b1: mov rdi, r9; mov edx, 0x3; mov qword [rsp], r9; lea rcx, [rel _nl_C_locobj]; lea rsi, [rel 0x197d65]; calljump___GI___strncasecmp_l; 
0x455e6: lea rbx, [r9+0x3]; lea rcx, [rel _nl_C_locobj]; mov edx, 0x5; mov rdi, rbx; lea rsi, [rel 0x197d69]  {"inity"}; calljump___GI___strncasecmp_l; 
0xcb890: mov r15, qword [r12+0x60]; mov rdi, r15; calljump___GI_strlen; mov rcx, qword [rsp+0x10]; mov rsi, r13; mov rdi, r15; mov rdx, rax; mov r14, rax; calljump___GI___strncasecmp_l; 
0xcb8fa: mov r15, qword [rbx+0x60]; mov rdi, r15; calljump___GI_strlen; mov rcx, qword [rsp+0x10]; mov rsi, r13; mov rdi, r15; mov rdx, rax; mov r14, rax; calljump___GI___strncasecmp_l; 
0xcb960: mov r15, qword [rbx]; mov r13, qword [rsp+0x78]; mov rdi, r15; calljump___GI_strlen; mov rcx, qword [rsp+0x10]; mov rsi, r13; mov rdi, r15; mov rdx, rax; mov r14, rax; calljump___GI___strncasecmp_l; 
0xcb9c8: mov r13, qword [rbx+0x308]; mov r15, qword [rsp+0x78]; mov rdi, r13; calljump___GI_strlen; mov rcx, qword [rsp+0x10]; mov rdi, r13; mov rsi, r15; mov rdx, rax; mov qword [rsp+0x48], rax; calljump___GI___strncasecmp_l; 
0xcba5d: mov rcx, qword [rsp+0x10]; mov rdx, qword [rsp+0x30]; mov rsi, r14; mov rdi, r13; calljump___GI___strncasecmp_l; 
0xcbaf8: mov rdi, qword [r13]; mov qword [rsp+0x20], rdi; calljump___GI_strlen; mov rdi, qword [rsp+0x20]; mov rcx, r12; mov rsi, r14; mov rdx, rax; mov qword [rsp+0x28], rax; calljump___GI___strncasecmp_l; 
0xcbb75: mov r15, qword [rsp+0x10]; mov r12, qword [r15+rbp+0x70]; mov rdi, r12; calljump___GI_strlen; mov rcx, qword [rsp+0x20]; mov rdi, r12; mov rsi, r14; mov rdx, rax; mov r13, rax; calljump___GI___strncasecmp_l; 
0xcbc1d: mov rdx, qword [rsp+0x30]; mov rsi, qword [rsp+0x28]; mov rcx, r12; mov rdi, r8; mov qword [rsp+0x20], r9; calljump___GI___strncasecmp_l; 
0xcc143: mov rdi, qword [r9+0x168]; mov dword [rsp+0x20], r11d; mov qword [rsp+0x18], r9; mov qword [rsp+0x10], rdi; calljump___GI_strlen; mov rdi, qword [rsp+0x10]; mov rsi, r15; mov rcx, r12; mov rdx, rax; mov r13, rax; calljump___GI___strncasecmp_l; 
0xcc790: mov r15, qword [rsp+0x30]; mov rcx, qword [rsp+0x10]; mov rsi, r14; mov rdx, r15; calljump___GI___strncasecmp_l; 
0xcc800: mov r15, qword [r12]; mov r13, qword [rsp+0x78]; mov rdi, r15; calljump___GI_strlen; mov rcx, qword [rsp+0x10]; mov rsi, r13; mov rdi, r15; mov rdx, rax; mov r14, rax; calljump___GI___strncasecmp_l; 
0xcc835: mov r15, qword [r12+0x308]; mov r13, qword [rsp+0x78]; mov rdi, r15; calljump___GI_strlen; mov rcx, qword [rsp+0x10]; mov rsi, r13; mov rdi, r15; mov rdx, rax; mov r14, rax; calljump___GI___strncasecmp_l; 
0xcc86e: mov r15, qword [r12+0x3c8]; mov r13, qword [rsp+0x78]; mov rdi, r15; calljump___GI_strlen; mov rcx, qword [rsp+0x10]; mov rsi, r13; mov rdi, r15; mov rdx, rax; mov r14, rax; calljump___GI___strncasecmp_l; 
0xcc8ce: mov r12, qword [rsp+0x20]; mov r13, qword [rsp+0x30]; mov rdi, r15; mov r14, qword [rsp+0x28]; mov rcx, r12; mov rdx, r13; mov rsi, r14; calljump___GI___strncasecmp_l; 
0xcc991: mov rdi, qword [r13-0x38]; mov r14, qword [rsp+0x78]; mov qword [rsp+0x20], rdi; calljump___GI_strlen; mov rdi, qword [rsp+0x20]; mov rcx, r12; mov rsi, r14; mov rdx, rax; mov qword [rsp+0x28], rax; calljump___GI___strncasecmp_l; 
0xccce9: mov rcx, qword [rsp+0x10]; mov rdx, qword [rsp+0x30]; mov rsi, r14; mov rdi, r13; calljump___GI___strncasecmp_l; 
0xccdbc: mov r13, qword [rel data_1d4928]; mov qword [rsp+0x20], r9; mov dword [rsp+0x18], r11d; mov rdi, r13; mov qword [rsp+0x10], rsi; calljump___GI_strlen; mov rsi, qword [rsp+0x10]; mov rdi, r13; mov rcx, r12; mov rdx, rax; mov r15, rax; calljump___GI___strncasecmp_l; 
0xcd1e1: mov r15, qword [rsp+0x30]; mov r14, qword [rsp+0x28]; mov rcx, r12; mov rdi, r8; mov qword [rsp+0x20], r9; mov rdx, r15; mov rsi, r14; calljump___GI___strncasecmp_l; 
0xcd22a: mov rdi, qword [r9+0x170]; mov qword [rsp+0x10], rdi; calljump___GI_strlen; mov rdi, qword [rsp+0x10]; mov rsi, r15; mov rcx, r12; mov rdx, rax; mov r13, rax; calljump___GI___strncasecmp_l; 
0xcd51a: mov rdi, qword [rel data_1d4930]; mov qword [rsp+0x18], r9; mov dword [rsp+0x10], r11d; calljump___GI_strlen; mov rdi, qword [rel data_1d4930]; mov rcx, r12; mov rsi, r13; mov rdx, rax; mov r15, rax; calljump___GI___strncasecmp_l; 
0xcd59e: mov r15, qword [rax+0x20]; mov rdi, r15; calljump___GI_strlen; mov rsi, qword [rsp+0x78]; mov rcx, r12; mov rdi, r15; mov rdx, rax; mov r14, rax; calljump___GI___strncasecmp_l; 
0xce27b: mov rdi, qword [rax+0x20]; mov qword [rsp+0x28], rdi; calljump___GI_strlen; mov rsi, qword [rsp+0x78]; mov rdi, qword [rsp+0x28]; mov rcx, r12; mov rdx, rax; mov qword [rsp+0x20], rax; calljump___GI___strncasecmp_l; 
0x47d10: lea rcx, [rel _nl_C_locobj]; mov edx, 0x3; mov rdi, r9; mov qword [rsp], r9; lea rsi, [rel 0x197d6f]; calljump___GI___strncasecmp_l; 
0x48071: mov rdi, r9; mov edx, 0x3; mov qword [rsp], r9; lea rcx, [rel _nl_C_locobj]; lea rsi, [rel 0x197d65]; calljump___GI___strncasecmp_l; 
0x480a6: lea rbx, [r9+0x3]; lea rcx, [rel _nl_C_locobj]; mov edx, 0x5; mov rdi, rbx; lea rsi, [rel 0x197d69]  {"inity"}; calljump___GI___strncasecmp_l; 
0x50788: lea rcx, [rel _nl_C_locobj]; mov edx, 0x3; mov rdi, r10; mov qword [rsp+0x8], r10; lea rsi, [rel 0x197d6f]; calljump___GI___strncasecmp_l; 
0x50b08: mov rdi, r10; lea rcx, [rel _nl_C_locobj]; mov edx, 0x3; mov qword [rsp+0x8], r10; lea rsi, [rel 0x197d65]; calljump___GI___strncasecmp_l; 
0x50b3f: lea rbx, [r10+0x3]; lea rcx, [rel _nl_C_locobj]; mov edx, 0x5; mov rdi, rbx; lea rsi, [rel 0x197d69]  {"inity"}; calljump___GI___strncasecmp_l; 
0xd568d: mov rax, qword [rsp+0x50]; mov rsi, r13; mov rdi, qword [rax+rbp*8]; calljump___GI_strcat; 
0xc4b20: endbr64 ; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; sub rsp, 0x8; callsub_246b0; mov rsi, rbp; lea rdi, [rbx+rax*4]; calljump___GI___wcscpy; 
0x34ba4: lea r13, [rax+0x8]; lea rsi, [rel 0x197ca0]; mov rdi, r13; calljump___GI_strcspn; 
0xb3240: endbr64 ; pushrbx; mov rbx, rdi; calljump___GI_strcspn; 
0xa2866: mov rsi, r12; mov rdi, rbp; calljump___GI_strcspn; 
0xf2115: mov rsi, qword [rsp+0x28]; mov rdi, rbx; calljump___GI_strcspn; 
0xa1f42: mov rbx, rdi; mov rdi, rbp; calljump___GI_strcspn; 
0x11d94f: mov rsi, r12; mov rdi, rsp; calljump___GI___strcasecmp; 
0x13c306: mov rsi, qword [r12]; mov rdi, rbx; calljump___GI___strcasecmp; 
0x13c335: mov rdi, rbx; calljump___GI___strcasecmp; 
0x139f10: mov rdi, qword [rbx]; mov rsi, qword [rsp+0x8]; calljump___GI___strcasecmp; 
0x11ee31: mov r15, rbp; mov rsi, r14; sub r15, rax; add r15, r12; mov rdi, r15; calljump___GI___strcasecmp; 
0x1184d7: mov rdi, qword [rbp-0x4d0]; lea r15, [rel tokval]; mov rsi, r15; calljump___GI___strcasecmp; 
0x11850c: mov rsi, qword [rbp-0x4d8]; mov rdi, rax; calljump___GI___strcasecmp; 
0x13b355: mov rsi, qword [r12]; mov rdi, rbx; calljump___GI___strcasecmp; 
0x13b385: mov rdi, rbx; calljump___GI___strcasecmp; 
0x139615: mov qword [rsp+0x28], r8; mov qword [rsp+0x10], rdx; calljump___GI___strcasecmp; 
0x13a9ae: mov rax, qword [rsp+0x50]; mov rdi, rbp; mov rsi, rax; mov qword [rsp], rax; calljump___GI___strcasecmp; 
0x13acaa: mov rdi, rbp; calljump___GI___strcasecmp; 
0x10ceda: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; jmp jump___GI___strcasecmp; 
0x11bbe6: mov rsi, rbp; mov rdi, r12; mov dword [rsp], ecx; calljump___GI___strcasecmp; 
0x13b538: mov r13, qword [rsp+0x40]; mov rdi, r12; mov rsi, r13; calljump___GI___strcasecmp; 
0x13b57b: mov rdi, r12; calljump___GI___strcasecmp; 
0x133def: mov rsi, qword [rsp+0x38]; mov rdi, r15; calljump___GI___strcasecmp; 
0x133e36: mov rsi, qword [rsp+0x28]; calljump___GI___strcasecmp; 
0x312c5: mov rdx, r15; mov rsi, r14; mov rdi, rax; calljump___GI_strncmp; 
0x3de82: mov rdx, r14; mov rsi, rbx; mov rdi, r13; calljump___GI_strncmp; 
0x128f20: lea rdi, [rbx+0x218]; mov rdx, rbp; mov rsi, r12; calljump___GI_strncmp; 
0x13b8c9: mov rbx, qword [rsp+0x20]; mov rsi, qword [rsp+0x18]; mov rdx, r14; mov rdi, rbx; calljump___GI_strncmp; 
0x107b3b: mov edx, 0xa; mov rsi, rbp; calljump___GI_strncmp; 
0x3dfd0: mov rdx, rbx; mov rsi, r14; mov rdi, rbp; calljump___GI_strncmp; 
0x3ff00: mov rdx, r13; mov rsi, r12; mov rdi, rbx; calljump___GI_strncmp; 
0xd3384: mov rsi, qword [rsp]; mov rdx, rax; mov rdi, r13; calljump___GI_strncmp; 
0x11f411: mov edx, 0x6; mov rsi, r15; mov rdi, r13; calljump___GI_strncmp; 
0x11f43e: mov edx, 0xa; lea rsi, [rel 0x19b5bb]  {"nameserver"}; mov rdi, r13; calljump___GI_strncmp; 
0x11f46b: mov edx, 0x8; lea rsi, [rel 0x19b5c6]  {"sortlist"}; mov rdi, r13; calljump___GI_strncmp; 
0x11f49a: mov edx, 0x7; lea rsi, [rel 0x19af91]  {"options"}; mov rdi, r13; calljump___GI_strncmp; 
0x11f4e0: mov edx, 0x6; lea rsi, [rel 0x19b5b4]  {"search"}; mov rdi, r13; calljump___GI_strncmp; 
0x3fc33: mov rdx, rbx; mov rsi, rbp; mov rdi, r12; calljump___GI_strncmp; 
0x150d99: mov rbx, qword [rsp+0x8]; lea rsi, [rel 0x19c072]  {"/dev/"}; mov edx, 0x5; mov rdi, rbx; calljump___GI_strncmp; 
0xfd6f0: mov edx, 0x6; mov rsi, r13; mov rdi, rbx; calljump___GI_strncmp; 
0xfd720: mov edx, 0x6; mov rsi, r14; mov rdi, rbx; calljump___GI_strncmp; 
0x1396b6: mov byte [rax], 0x0; add rdx, 0x2; testr13b, r13b; lea rsi, [rel 0x19bc16]  {":include:"}; cmovne  r15, rdx; mov rdi, r14; mov edx, 0x9; mov qword [rsp+0x8], r8; calljump___GI_strncmp; 
0xd9910: mov rdx, r14; mov rsi, r15; mov rdi, rbx; calljump___GI_strncmp; 
0xd998d: mov rdx, r14; mov rsi, r15; calljump___GI_strncmp; 
0xf0c8d: mov edx, 0x4; mov rsi, rbx; mov rdi, r14; calljump___GI_strncmp; 
0xf4c40: endbr64 ; pushrbp; mov edx, 0x4; mov rbp, rdi; pushrbx; mov rbx, rsi; lea rsi, [rel 0x1997d7]  {"Pid:"}; sub rsp, 0x8; calljump___GI_strncmp; 
0x10e6ee: mov rdx, r14; mov rsi, rbx; mov rdi, r13; calljump___GI_strncmp; 
0x11ef88: mov edx, 0x6; mov rsi, r12; mov rdi, rbx; calljump___GI_strncmp; 
0x11efa0: mov edx, 0x8; mov rsi, r13; mov rdi, rbx; calljump___GI_strncmp; 
0x11efb8: mov edx, 0x9; lea rsi, [rel 0x19b586]  {"attempts:"}; mov rdi, rbx; calljump___GI_strncmp; 
0x11f0a2: movzx   edx, byte [r14+0x16]; mov rsi, r14; mov rdi, rbx; calljump___GI_strncmp; 
0x150218: lea rdi, [rbx+0x8]; mov edx, 0x20; mov rsi, rbp; calljump___GI_strncmp; 
0x14fd7c: lea rsi, [rdi+0x28]; mov edx, 0x4; lea rdi, [rel last_entry.ut_id]; calljump___GI_strncmp; 
0x14fda0: lea rsi, [rdi+0x8]; mov edx, 0x20; lea rdi, [rel last_entry.ut_line]; calljump___GI_strncmp; 
0xd7bd6: mov rdx, qword [rsp]; mov esi, ecx; mov rdi, r12; mov dword [rsp+0x10], ecx; mov qword [rsp+0x8b0], 0x0; neg esi; sub rdx, r12; and esi, 0x2f; sar rdx, 0x2; calljump___GI___wmemchr; 
0xd8bde: mov rdx, qword [rsp]; mov esi, 0x2f; mov rdi, r12; sub rdx, r12; sar rdx, 0x2; calljump___GI___wmemchr; 
0xc6730: endbr64 ; pushrbp; mov rdx, rsi; mov rbp, rdi; pushrbx; mov rbx, rsi; xor esi, esi; sub rsp, 0x8; calljump___GI___wmemchr; 
0x112d99: jmp jump___GI___stpncpy; 
0x15445f: mov rdi, qword [rsp+0x10]; mov rsi, rbx; calljump___GI___stpncpy; 
0xa4bdc: mov rbx, qword [rbp-0x68]; add rax, 0x1; mov rdi, qword [rbp-0x80]; mov rsi, r13; cmp rax, rbx; cmovbe  rbx, rax; mov rdx, rbx; calljump___GI___stpncpy; 
0xb5fe6: add rsp, 0xe8; pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; jmp jump___GI___wcscmp; 
0xb5ffc: mov rsi, qword [rsp+0xa0]; mov rdi, qword [rsp+0x98]; mov dword [rsp+0x30], edx; mov qword [rsp+0x28], r9; calljump___GI___wcscmp; 
0x4d469: mov esi, 0x2f; calljump___GI_strrchr; 
0x11052a: mov rdi, r13; mov esi, 0x2f; mov dword [rsp+0x8], edx; calljump___GI_strrchr; 
0x30cd0: mov rdi, qword [rbx]; mov esi, 0x2f; calljump___GI_strrchr; 
0x107c13: mov esi, 0xa; mov rdi, r13; calljump___GI_strrchr; 
0x1058e8: mov esi, 0x2f; mov rdi, r13; mov ebx, 0x1; calljump___GI_strrchr; 
0xf71c6: movzx   eax, word [rbx+0x42]; mov rdi, qword [rbp+0x20]; lea r13, [rbx+0x70]; mov rsi, r13; mov word [rbx+0x40], ax; lea rdx, [rax+0x1]; calljump___GI_memmove; mov esi, 0x2f; mov rdi, r13; calljump___GI_strrchr; 
0xfb474: pushrbx; mov esi, 0x2f; mov rbx, rdi; calljump___GI_strrchr; 
0x152b4e: mov r12, qword [r15+0x10]; mov rdi, qword [rbp-0x488]; mov esi, 0x2f; lea rax, [r14+r12]; mov qword [rbp-0x4c8], rax; calljump___GI_strrchr; 
0xdb5ae: mov r12, qword [r15+0x10]; mov rdi, qword [rbp-0x488]; mov esi, 0x2f; lea rax, [r14+r12]; mov qword [rbp-0x4c8], rax; calljump___GI_strrchr; 
0x105eea: mov rdi, rbp; mov esi, 0x2f; calljump___GI_strrchr; 
0x13dcfb: mov qword [rax], 0x0; lea rdx, [rbp+0x1]; mov rbx, rax; mov rsi, r15; mov qword [rax+0x14], 0xffffffffffffffff; lea r13, [rax+0x1028]; mov rdi, r13; callsub_24650; mov byte [rbx+0x1c], 0x0; mov esi, 0x2f; mov rdi, r15; calljump___GI_strrchr; 
0x10f640: mov rax, qword [rel program_invocation_name]; mov rdi, rbp; mov qword [rax], rsi; mov esi, 0x2f; calljump___GI_strrchr; 
0x9e120: endbr64 ; pushrbx; mov esi, 0x2f; mov rbx, rdi; calljump___GI_strrchr; 
0x3d3ec: mov esi, 0x3a; mov rdi, rbp; calljump___GI_strchr; 
0x38fa0: endbr64 ; pushr15; pushr14; pushr13; pushr12; mov r12, rdi; pushrbp; pushrbx; mov ebx, esi; mov esi, 0x2f; sub rsp, 0x8; calljump___GI_strchr; 
0x391a9: mov rdi, r13; mov esi, 0x2f; calljump___GI_strchr; 
0x3fe45: mov rbp, rsi; mov esi, 0x3d; mov r12d, edx; calljump___GI_strchr; 
0x1105ec: mov rdi, qword [rsp+0x138]; mov esi, r13d; calljump___GI_strchr; 
0xb2980: movsx   esi, r10b; mov rdi, r9; jmp jump___GI_strchr; 
0x132fa2: mov rdi, qword [rax]; mov esi, 0x2e; mov dword [rsp+0x38], r9d; mov dword [rsp+0x30], ecx; calljump___GI_strchr; 
0x133096: mov edx, dword [rsp+0x28]; mov ecx, dword [rsp+0x30]; mov esi, 0x2e; mov r9d, dword [rsp+0x38]; mov rdi, qword [rsp+0x4d0]; mov dword [rsp+0x50], edx; mov dword [rsp+0x40], ecx; mov dword [rsp+0x30], r9d; mov qword [rsp+0x28], rdi; calljump___GI_strchr; 
0x1331b0: mov rdi, qword [rax]; mov esi, 0x2e; mov dword [rsp+0x38], r9d; mov dword [rsp+0x30], ecx; calljump___GI_strchr; 
0x133286: mov rdi, qword [rax]; mov esi, 0x2e; mov dword [rsp+0x20], r9d; mov dword [rsp+0x18], ecx; mov dword [rsp+0x10], edx; calljump___GI_strchr; 
0xa2540: movzx   r12d, bl; mov rbp, rsi; mov esi, r12d; calljump___GI_strchr; 
0x12a3d3: mov esi, 0xa; mov rdi, rbx; calljump___GI_strchr; 
0x30fd8: mov esi, 0x2e; mov rdi, rbx; calljump___GI_strchr; 
0x9e4c8: mov rdi, rbp; calljump___GI_strlen; mov esi, 0x3d; mov rdi, rbp; lea rbx, [rax+0x1]; calljump___GI_strchr; 
0x3e810: endbr64 ; pushrbp; mov esi, 0x3d; mov rbp, rsp; pushr13; pushr12; pushrbx; mov rbx, rdi; sub rsp, 0x18; calljump___GI_strchr; 
0xa1422: mov rbx, rdi; movsx   esi, sil; mov rdi, rbp; calljump___GI_strchr; 
0xda024: lea r9, [rdx+0x1]; mov rdi, r15; mov qword [rsp+0x20], rdx; mov qword [rbx+0x20], r9; movsx   r14d, byte [rdx]; mov qword [rsp+0x28], r9; mov esi, r14d; mov byte [rsp+0x18], r14b; calljump___GI_strchr; 
0xda1ba: mov rdi, r15; mov dword [rsp+0x20], r9d; mov qword [rsp+0x18], rdx; calljump___GI_strchr; 
0x392f0: endbr64 ; pushr15; pushr14; pushr13; pushr12; mov r12, rsi; mov esi, 0x2f; pushrbp; pushrbx; sub rsp, 0xc8; mov qword [rsp+0x10], rdi; mov qword [rsp+0x8], rdx; mov qword [rsp+0x20], rcx; calljump___GI_strchr; 
0x13beb8: mov esi, 0x2e; mov rdi, r12; calljump___GI_strchr; 
0x13bece: lea rdi, [rax+0x1]; mov esi, 0x2e; calljump___GI_strchr; 
0x13bee5: lea rdi, [rax+0x1]; mov esi, 0x2e; calljump___GI_strchr; 
0x139090: endbr64 ; pushr14; pushr13; pushr12; pushrbp; mov rbp, rsi; mov esi, 0xa; pushrbx; mov rbx, rdi; sub rsp, 0x10; calljump___GI_strchr; 
0x32f6b: mov esi, 0x3b; mov rdi, rbp; calljump___GI_strchr; 
0x330e0: mov rdi, qword [rsp+0x8]; mov esi, 0x3d; calljump___GI_strchr; 
0x3343b: mov rdi, qword [rsp+0x18]; movsxd  rcx, r15d; mov esi, 0x3b; add rdi, 0x1; mov qword [rsp+rcx*8+0x30], rdi; calljump___GI_strchr; 
0x32552: mov esi, 0x3b; mov rdi, rbx; calljump___GI_strchr; 
0x325b0: mov rdi, qword [rbp-0x1a8]; mov esi, 0x3d; calljump___GI_strchr; 
0x329dd: mov rdi, qword [rbp-0x1b0]; mov ecx, r12d; mov eax, 0x1; mov esi, 0x3b; shl eax, cl; movsxd  rcx, r12d; or  dword [rbp-0x1c0], eax; add rdi, 0x1; mov qword [rbp+rcx*8-0x190], rdi; calljump___GI_strchr; 
0xf3cf0: movsx   r13d, al; lea rdi, [rel data_1997c9]; mov esi, r13d; calljump___GI_strchr; 
0xf3df8: movsx   r13d, r12b; mov rdi, rbx; mov esi, r13d; calljump___GI_strchr; 
0xf44a0: mov esi, r13d; lea rdi, [rel data_1997cc]  {"\n|&;<>(){}"}; calljump___GI_strchr; 
0x102cb6: mov esi, 0x2c; calljump___GI_strchr; 
0x152922: mov rdi, qword [rbp-0x488]; mov esi, 0x7b; calljump___GI_strchr; 
0x15304a: mov rdi, qword [rbp-0x498]; mov esi, 0x2f; calljump___GI_strchr; 
0x153319: mov rdi, qword [rbp-0x498]; mov esi, 0x5c; calljump___GI_strchr; 
0x1535d8: mov rdi, qword [rbp-0x498]; mov esi, 0x2f; calljump___GI_strchr; 
0x153d9c: mov r13, qword [rbp-0x498]; mov esi, 0x5c; mov rdi, r13; calljump___GI_strchr; 
0x3542f: mov esi, 0x2f; mov rdi, rbx; calljump___GI_strchr; 
0x3feb3: mov esi, 0x3d; calljump___GI_strchr; 
0x11f547: mov esi, 0xa; mov rdi, r13; calljump___GI_strchr; 
0x11f752: mov esi, 0x25; mov rdi, r13; calljump___GI_strchr; 
0x11fca0: mov esi, 0x2e; mov rdi, rbp; calljump___GI_strchr; 
0xdb382: mov rdi, qword [rbp-0x488]; mov esi, 0x7b; calljump___GI_strchr; 
0xdbaaa: mov rdi, qword [rbp-0x498]; mov esi, 0x2f; calljump___GI_strchr; 
0xdbd79: mov rdi, qword [rbp-0x498]; mov esi, 0x5c; calljump___GI_strchr; 
0xdc038: mov rdi, qword [rbp-0x498]; mov esi, 0x2f; calljump___GI_strchr; 
0xdc7f4: mov r13, qword [rbp-0x498]; mov esi, 0x5c; mov rdi, r13; calljump___GI_strchr; 
0x1184f3: mov rdi, qword [rbp-0x4d0]; mov esi, 0x2e; calljump___GI_strchr; 
0x135930: endbr64 ; pushr13; pushr12; pushrbp; mov rbp, rsi; mov esi, 0xa; pushrbx; mov rbx, rdi; sub rsp, 0x18; calljump___GI_strchr; 
0xfd52e: mov esi, 0xa; mov rdi, rbx; calljump___GI_strchr; 
0xfd742: mov esi, 0x3d; mov rdi, rbx; calljump___GI_strchr; 
0xfd772: mov qword [rel tty.ty_comment], rbx; xor eax, eax; cmp byte [rbx], 0x0; mov esi, 0xa; cmovne  rax, rbx; mov rdi, rbx; mov qword [rel tty.ty_comment], rax; calljump___GI_strchr; 
0x12d3d0: pushr15; mov r15, r9; pushr14; mov r14, rcx; pushr13; mov r13, rdx; pushr12; pushrbp; mov rbp, rdi; mov rdi, rcx; pushrbx; mov rbx, r8; sub rsp, 0x38; mov rax, qword [rel data_1d6df8]; mov qword [rsp+0x8], rsi; mov esi, 0x2f; mov dword [fs:rax], 0x0; calljump___GI_strchr; 
0x12e20e: mov esi, 0x23; mov rdi, r12; calljump___GI_strchr; 
0x12e641: mov rax, qword [rel data_1d6df8]; mov esi, 0x2f; mov rdi, r15; mov dword [fs:rax], 0x0; calljump___GI_strchr; 
0xd4be9: pushrbp; mov rbp, rsp; pushr15; mov r15d, ecx; pushr14; mov r14d, ecx; pushr13; mov r13, rdx; pushr12; mov r12, rsi; mov esi, 0x2f; pushrbx; mov rbx, rdi; sub rsp, 0x38; calljump___GI_strchr; 
0xd9bb8: mov rdi, qword [rbp-0x70]; mov qword [rbp+0x10], r9; calljump___GI_strchr; 
0xf0e90: mov rdi, qword [rsp+0x5b8]; mov esi, r15d; calljump___GI_strchr; 
0xf0f0d: movsx   r15d, byte [rbx]; mov rdi, qword [rsp+0x5b0]; mov esi, r15d; mov ebp, r15d; calljump___GI_strchr; 
0xf163f: mov esi, 0x3d; mov rdi, r15; calljump___GI_strchr; 
0xf2068: mov rdi, qword [rsp+0x28]; calljump___GI_strchr; 
0x1027ef: mov esi, 0xa; mov rdi, rbx; lea r15, [rsp+0x10]; calljump___GI_strchr; 
0x102960: mov esi, 0xa; mov rdi, r15; calljump___GI_strchr; 
0x102a78: movsx   ebp, r13b; mov rdi, r12; mov esi, ebp; calljump___GI_strchr; 
0x12660b: mov esi, 0x3a; mov rdi, rbx; mov byte [rsp+0x1f], r8b; mov qword [rsp+0x10], rdx; calljump___GI_strchr; 
0x1267fd: mov esi, 0x3a; mov rdi, rbx; calljump___GI_strchr; 
0x1268bd: mov esi, 0x3a; mov rdi, rbx; mov byte [rsp+0x1f], r8b; mov qword [rsp+0x10], rdx; calljump___GI_strchr; 
0x10c1ca: mov esi, 0xb; mov rdi, rax; calljump___GI_strchr; 
0x10c7d0: mov esi, 0xa; xor ebp, ebp; calljump___GI_strchr; 
0x11a0b4: mov esi, 0x2e; mov rdi, r13; mov rbx, rax; calljump___GI_strchr; 
0x11a880: mov rcx, qword [rel data_1d6df8]; mov esi, 0x2e; mov rdi, r12; mov r13d, dword [fs:rcx]; mov dword [r14+0x10], edx; mov dword [r14+0x14], eax; calljump___GI_strchr; 
0x12ced3: mov esi, 0xa; mov rdi, rbx; calljump___GI_strchr; 
0x12f491: mov rdi, qword [rsp+0x20]; mov esi, 0x25; calljump___GI_strchr; 
0x14736a: mov esi, 0x2e; mov rdi, r12; calljump___GI_strchr; 
0x147580: endbr64 ; pushr12; mov r12, rsi; mov esi, 0x2e; pushrbp; movsxd  rbp, edx; pushrbx; calljump___GI_strchr; 
0x14759d: lea rbx, [rax+0x1]; mov esi, 0x40; mov rdi, rbx; calljump___GI_strchr; 
0x27c9b: mov esi, 0x3a; mov rdi, rbx; calljump___GI_strchr; 
0x27cc3: lea rcx, [r14+0x1]; xor eax, eax; lea rdi, [r15+0x1]; mov esi, 0x3a; cmp r15, rcx; mov r14, r15; setne   al; add r12d, eax; calljump___GI_strchr; 
0x2847c: mov esi, 0x23; mov rdi, rbx; calljump___GI_strchr; 
0x37385: mov esi, 0xa; mov rdi, r14; mov rbx, r14; calljump___GI_strchr; 
0x37430: mov esi, 0xa; mov rdi, r14; calljump___GI_strchr; 
0xd32a8: mov qword [r15], rbx; mov rdi, rbx; xor esi, esi; add r15, 0x8; calljump___GI___wcschr; 
0xd2e22: lea r15, [rbp+0x20]; mov dword [rbx+0x40], eax; add rbx, 0x48; mov qword [rbx-0x28], r15; mov rdi, r15; calljump___GI_strlen; lea r15, [r15+rax+0x1]; mov qword [rbx-0x20], r15; mov rdi, r15; calljump___GI_strlen; xor esi, esi; lea rdi, [r15+rax+0x1]; sub rbp, rdi; and ebp, 0x3; add rdi, rbp; mov qword [rbx-0x18], rdi; calljump___GI___wcschr; 
0xd2e22: lea r15, [rbp+0x20]; mov dword [rbx+0x40], eax; add rbx, 0x48; mov qword [rbx-0x28], r15; mov rdi, r15; calljump___GI_strlen; lea r15, [r15+rax+0x1]; mov qword [rbx-0x20], r15; mov rdi, r15; calljump___GI_strlen; xor esi, esi; lea rdi, [r15+rax+0x1]; sub rbp, rdi; and ebp, 0x3; add rdi, rbp; mov qword [rbx-0x18], rdi; calljump___GI___wcschr; xor esi, esi; lea rdi, [rax+0x4]; mov qword [rbx-0x10], rdi; calljump___GI___wcschr; 
0x114033: mov r14, qword [rsp+0x20]; mov edx, ebp; mov rsi, r12; mov dword [r14], r13d; lea rdi, [r14+0x8]; calljump___GI_memcpy; 
0x1140c0: mov eax, dword [r14+0x88]; mov rcx, qword [rsp+0x8]; lea rsi, [r14+0x90]; mov rdi, qword [rsp+0x470]; mov dword [rcx], eax; mov eax, dword [r14+0x8c]; mov edx, dword [rbx]; cmp eax, edx; cmovbe  rdx, rax; shl rdx, 0x7; calljump___GI_memcpy; 
0x102238: imulrax, r14; mov rdi, qword [rsp+0x8]; mov rdx, r14; mov rsi, r12; add rdi, rax; calljump___GI_memcpy; 
0xb61d7: add rsp, 0x8; mov rdx, rbp; mov rsi, rbx; mov rdi, rax; pop rbx; pop rbp; jmp jump___GI_memcpy; 
0x112e3e: mov rsi, rbx; mov rdi, rbp; lea rdx, [rax+0x1]; pop rbx; pop rbp; pop r12; jmp jump___GI_memcpy; 
0x113599: shl rdx, 0x2; jmp jump___GI_memcpy; 
0x1188dd: mov rcx, qword [rsp+0x20]; mov rsi, qword [rsp+0x10]; lea rdx, [r14-0x10]; mov dword [rcx+0xc], ebx; lea rdi, [rcx+0x10]; mov dword [rcx], r13d; mov dword [rcx+0x4], r12d; mov dword [rcx+0x8], ebp; mov qword [rsp+0x18], rcx; calljump___GI_memcpy; 
0x1189bb: mov r15, qword [rsp+0x20]; mov eax, dword [rsp+0xc]; mov edx, r12d; mov rsi, r13; mov dword [r15], eax; lea rdi, [r15+0x8]; calljump___GI_memcpy; 
0x1189bb: mov r15, qword [rsp+0x20]; mov eax, dword [rsp+0xc]; mov edx, r12d; mov rsi, r13; mov dword [r15], eax; lea rdi, [r15+0x8]; calljump___GI_memcpy; mov eax, dword [rsp+0x18]; mov dword [r15+0x8c], ebp; mov rdx, rbx; mov rsi, qword [rsp+0x470]; lea rdi, [r15+0x90]; mov dword [r15+0x88], eax; calljump___GI_memcpy; 
0x9d1e5: mov rdx, qword [rbp]; mov rsi, r13; mov rdi, rax; imulrdx, r12; calljump___GI_memcpy; 
0x4ad45: mov rsi, qword [r9]; lea rbp, [rax-0x1]; mov rdi, r12; mov qword [rsp+0x18], r9; lea rax, [rel __tens]; lea rdx, [rbp*8]; lea rsi, [rax+rsi*8+0x8]; calljump___GI_memcpy; 
0x4baa9: mov rsi, rdi; mov rdi, qword [rsp+0x8]; lea rdx, [rbp*8]; calljump___GI_memcpy; 
0x4bafc: lea r10, [rsp+0x78]; mov rsi, qword [rsp+0x8]; mov dword [rsp+0x10], r11d; lea rdx, [rbp*8]; mov rdi, r10; calljump___GI_memcpy; 
0x4bfc3: mov rdi, qword [rsp+0x10]; lea rdx, [rbp*8]; mov rsi, rax; calljump___GI_memcpy; 
0x4c3ce: mov rsi, qword [rsp+0x8]; lea rdx, [rbp*8]; calljump___GI_memcpy; 
0x13265e: mov rsi, rbx; mov rdi, r15; calljump___GI_memcpy; 
0x132bf6: mov rsi, r14; mov rdi, rbp; mov dword [rsp+0x8], r9d; calljump___GI_memcpy; 
0x132d92: mov rsi, r14; mov rdi, rbp; mov dword [rsp+0x8], r9d; calljump___GI_memcpy; 
0x34f7f: mov rdx, r14; mov r14, qword [rbp-0x70]; mov rsi, r13; mov qword [rbp-0x78], r10; mov rdi, r14; calljump___GI_memcpy; 
0x9e5b0: mov rdx, r12; mov rsi, rbx; mov rdi, rbp; calljump___GI_memcpy; 
0xd3d88: lea rax, [rbx+0x1]; mov rdx, r14; mov rsi, r15; mov qword [rsp+0x40], rax; calljump___GI_memcpy; 
0x14cde3: mov rdx, r15; mov dword [rsp+0x28], r10d; mov dword [rsp+0x20], r8d; mov qword [rsp+0x18], r9; calljump___GI_memcpy; 
0x14cf10: mov rdx, r15; mov dword [rsp+0x18], r8d; calljump___GI_memcpy; 
0x312de: mov rdi, r12; sub r14, rbx; calljump___GI_strlen; mov rdi, r13; mov r15, rax; calljump___GI_strlen; lea rsi, [r14+r15]; mov rdx, r14; lea rcx, [rax+0x1]; lea rax, [rsi+rax+0x18]; mov rsi, rbx; and rax, 0xfffffffffffffff0; mov qword [rbp-0x108], rcx; sub rsp, rax; lea r14, [rsp+0xf]; and r14, 0xfffffffffffffff0; mov rdi, r14; mov rbx, r14; calljump___GI_mempcpy; mov rdx, r15; mov rsi, r12; mov rdi, rax; calljump___GI_mempcpy; mov rdx, qword [rbp-0x108]; mov rsi, r13; mov rdi, rax; calljump___GI_memcpy; 
0x13fbb8: calljump___GI_memcpy; 
0x13fc26: mov rsi, rax; calljump___GI_memcpy; 
0x13fd48: mov rsi, qword [rbx+0x50]; lea rdi, [rcx+0x8]; mov edx, eax; calljump___GI_memcpy; 
0x13fd90: mov rsi, qword [rbx+0x38]; mov rdi, rcx; mov edx, eax; calljump___GI_memcpy; 
0x115c60: endbr64 ; pushrbp; movsxd  rax, esi; mov rsi, rdx; mov edx, ecx; pushrbx; add rdi, rax; mov rbx, rax; mov rbp, rdx; sub rsp, 0x8; calljump___GI_memcpy; 
0x115de0: endbr64 ; pushrbp; mov rax, rdi; mov rdi, rdx; mov edx, ecx; pushrbx; movsxd  rcx, esi; mov ebx, esi; mov rbp, rdx; lea rsi, [rax+rcx]; sub rsp, 0x8; calljump___GI_memcpy; 
0x12bd7f: lea rcx, [rsp+0x8]; mov rdx, rsp; mov esi, r12d; mov rdi, rbp; mov r8, 0xffffffffffffffff; callinternal_getgrouplist; movsxd  rdx, dword [r13]; mov r12, qword [rsp+0x8]; mov rdi, rbx; movsxd  rbp, eax; cmp ebp, edx; mov rsi, r12; cmovle  rdx, rbp; shl rdx, 0x2; calljump___GI_memcpy; 
0x3e858: calljump___GI___strnlen; mov rsi, rbx; mov rdx, rax; lea rax, [rax+0x18]; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rdi, [rsp+0xf]; and rdi, 0xfffffffffffffff0; mov byte [rdi+rdx], 0x0; calljump___GI_memcpy; 
0xa19c8: sub rbx, 0x1; mov rsi, r13; sub rbx, rax; cmp rbx, r14; cmova   rbx, r14; add r12, rax; mov rdi, r12; mov rdx, rbx; calljump___GI_memcpy; 
0x142a4b: mov rdx, rbp; mov rsi, r12; calljump___GI_memcpy; 
0x308e5: mov rdi, rbx; calljump___GI_strlen; mov rsi, rbx; lea rdx, [rax+0x1]; add rax, 0x18; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rdi, [rsp+0xf]; and rdi, 0xfffffffffffffff0; calljump___GI_memcpy; 
0x9d8de: mov rdi, qword [rbx]; mov rbp, rax; mov rdx, r15; mov rsi, r13; add rdi, rax; calljump___GI_memcpy; 
0x12b64c: shl rbp, 0x3; mov rsi, qword [r15+0x18]; sub rbx, r14; mov rdi, rax; mov rdx, rbp; sub rbx, rbp; mov qword [rsp+0x18], rax; calljump___GI_memcpy; 
0x12b690: add rcx, r14; mov rsi, r13; mov rdi, rcx; calljump___GI_memcpy; 
0x12b735: mov rbx, qword [rsp+0x18]; mov rdx, qword [rsp+0x28]; mov rsi, rbx; calljump___GI_memcpy; 
0x9d331: mov rsi, rdx; mov rdx, rcx; calljump___GI_memcpy; 
0x128f60: mov dword [rax], 0x0; lea rdi, [rax+0x218]; mov rdx, rbp; mov rsi, r12; calljump___GI_memcpy; 
0xb80c5: mov rsi, qword [r14]; lea r13, [rax-0x1]; lea rax, [rel __tens]; mov rdi, rbx; lea rdx, [r13*8]; lea rsi, [rax+rsi*8+0x8]; calljump___GI_memcpy; 
0xb873f: mov rsi, rdi; mov rdi, qword [rsp+0x18]; lea rdx, [rbx*8]; mov dword [rsp+0x8], r9d; calljump___GI_memcpy; 
0xb952c: mov rdi, qword [rsp+0x20]; lea rdx, [r13*8]; mov rsi, rax; mov dword [rsp+0x28], r9d; calljump___GI_memcpy; 
0xb9669: lea r15, [rsp+0x88]; mov rsi, qword [rsp+0x18]; mov dword [rsp+0x20], r9d; lea rdx, [rbx*8]; mov rdi, r15; calljump___GI_memcpy; 
0xb994f: mov rsi, qword [rsp+0x18]; lea rdx, [rbx*8]; calljump___GI_memcpy; 
0x11cb4c: lea rdx, [rbx+0x1]; mov rsi, r12; mov rdi, rbp; calljump___GI_memcpy; 
0x9d057: imulrbx, qword [rbp]; mov rdi, rax; mov rdx, rbx; calljump___GI_memcpy; 
0x10bbd3: mov rdx, rbx; mov rsi, r12; calljump___GI_memcpy; 
0x393f8: mov rsi, qword [rsp+0x10]; mov rdx, rbx; mov rdi, r14; add rbx, 0x1; mov rbp, r12; calljump___GI_memcpy; 
0x39712: mov rsi, qword [rsp+0x10]; lea rdi, [r14+r15]; mov r12, rbp; mov r15, rbx; calljump___GI_memcpy; 
0x3974a: mov rsi, qword [rsp+0x8]; lea rdi, [r14+r15]; mov r12, rbp; mov r15, rbx; calljump___GI_memcpy; 
0x14d300: mov rsi, r10; mov dword [rsp+0x18], r8d; calljump___GI_memcpy; 
0x14d3ff: movsxd  rdx, dword [rsp+0x2c]; mov rcx, qword [rsp+0x10]; mov qword [r14], rdi; mov rsi, r10; lea eax, [rdx+0x1]; mov r15, rdx; shl rdx, 0x2; cdqe; mov qword [rcx], rax; calljump___GI_memcpy; 
0x13b9c7: add rax, rbx; lea rdx, [rax+0x1]; mov qword [r15+0x30], rdx; lea rdx, [r13+0x1]; mov byte [rax], 0x20; mov rdi, qword [r15+0x30]; mov rsi, qword [rsp+0x20]; calljump___GI_memcpy; 
0x13ba6e: lea rdi, [rax+rbx]; mov rcx, qword [rsp+0x10]; mov rax, qword [rsp+0x20]; mov rbx, r13; mov qword [r15+0x30], rdi; sub rbx, rcx; lea rsi, [rax+rcx+0x1]; mov rdx, rbx; sub rbx, 0x1; calljump___GI_memcpy; 
0xa1103: add rsp, 0x8; mov rdx, rbp; mov rsi, rbx; mov rdi, rax; pop rbx; pop rbp; jmp jump___GI_memcpy; 
0xedc0d: movsxd  rdx, dword [rsp+0x8]; mov rsi, qword [rsp]; mov rdi, rax; calljump___GI_mempcpy; mov rsi, r12; movsxd  rdx, ebx; mov r12, r15; mov rdi, rax; calljump___GI_memcpy; 
0x114b4b: mov qword [rax], 0x0; mov rsi, qword [rsp+0x8]; lea rdi, [rax+0x20]; mov rdx, r12; mov qword [rsp+0x18], rax; calljump___GI_memcpy; 
0x32568: mov rdi, rbx; lea r15, [rel _nl_category_name_sizes]; calljump___GI_strlen; mov rsi, rbx; lea rdx, [rax+0x1]; add rax, 0x18; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rdi, [rsp+0xf]; and rdi, 0xfffffffffffffff0; calljump___GI_memcpy; 
0x113f08: mov eax, dword [r14+0x8]; mov rcx, qword [rsp]; lea rsi, [r14+0x10]; mov rdi, qword [rsp+0x8]; mov dword [rcx], eax; mov edx, dword [r14+0xc]; mov eax, dword [r13]; cmp edx, eax; cmova   rdx, rax; shl rdx, 0x2; calljump___GI_memcpy; 
0x9e342: mov rdx, qword [rsp+0x28]; mov rsi, r12; lea rdi, [rax+rdx]; mov rdx, qword [rsp+0x18]; calljump___GI_memcpy; 
0x9e342: mov rdx, qword [rsp+0x28]; mov rsi, r12; lea rdi, [rax+rdx]; mov rdx, qword [rsp+0x18]; calljump___GI_memcpy; mov byte [r14+r15], 0x3d; mov rdx, qword [rsp+0x20]; mov rsi, r13; lea rdi, [r14+r15+0x1]; calljump___GI_memcpy; 
0xb4f2e: mov rdx, rbx; mov rsi, r13; mov rdi, rbp; calljump___GI_memcpy; 
0x144c5b: mov rdx, rbp; mov rsi, r12; calljump___GI_memcpy; 
0xf881b: add rdx, r8; lea rsi, [rax+r8]; mov qword [rsp+0x8], rax; lea rdi, [rax+rdx]; mov rdx, qword [rsp+0x38]; sub rdx, r8; calljump___GI_memcpy; 
0xf8850: mov rcx, qword [rsp+0x48]; mov rsi, rbx; mov rdx, rbp; sub rcx, rbp; mov rdi, rcx; calljump___GI_memcpy; 
0x133a9a: mov rcx, qword [rsp+0x20]; mov rdx, qword [rsp+0x28]; lea rdi, [rax+0x8]; mov rsi, r15; mov qword [rsp+0x20], rax; mov qword [rax], rcx; calljump___GI_memcpy; 
0x53ee0: sub rsi, rbp; mov rdi, r12; calljump___GI___strnlen; mov rsi, r12; mov rdi, rbp; mov rdx, rax; mov rbx, rax; calljump___GI_memcpy; 
0x14f73d: mov rdi, qword [rsp+0x8]; mov rsi, rbx; calljump___GI_memcpy; 
0x152a5a: mov rdx, r13; mov rsi, rdi; sub rdx, rdi; mov rdi, qword [rbp-0x498]; calljump___GI_mempcpy; mov rdx, qword [rbp-0x4b0]; mov rsi, r14; mov rdi, rax; calljump___GI_memcpy; 
0x153ef6: mov rsi, r14; mov rdi, r12; calljump___GI_mempcpy; mov rdx, qword [rbp-0x4c0]; mov rdi, rax; mov rax, qword [rbp-0x498]; lea rsi, [rax+0x1]; calljump___GI_memcpy; 
0xc9bc4: mov rcx, qword [rsp+0x28]; mov rdx, rbp; mov rsi, r12; mov rdi, rcx; mov qword [rsp+0x8], rcx; calljump___GI_mempcpy; mov rdx, r15; mov rsi, r13; mov rdi, rax; calljump___GI_memcpy; 
0x127138: mov qword [rax], rbp; lea r13, [rax+0x10]; lea rdx, [r15-0x10]; mov rsi, r12; mov qword [rax+0x8], rbx; mov rdi, r13; calljump___GI_memcpy; 
0x86c09: mov rdx, r12; mov rsi, r14; mov rdi, rax; calljump___GI_memcpy; 
0x35757: mov rsi, qword [rbp-0x88]; mov rdx, rbx; lea rdi, [rax+0x38]; add r13, 0x1; calljump___GI_mempcpy; mov rdx, r13; mov rsi, r12; mov rbx, rax; mov rdi, rax; calljump___GI_memcpy; 
0x7d6be: lea rdi, [rsp+0x30]; mov rdx, r14; mov r15, r14; calljump___GI_memcpy; 
0x9ce65: mov rdx, r13; mov rsi, r12; mov rdi, rax; calljump___GI_memcpy; 
0x9d0f0: mov rdx, r12; mov rsi, rbx; mov rdi, rax; calljump___GI_memcpy; 
0xbaafd: mov rsi, qword [r14]; lea r13, [rax-0x1]; lea rax, [rel __tens]; mov rdi, rbx; lea rdx, [r13*8]; lea rsi, [rax+rsi*8+0x8]; calljump___GI_memcpy; 
0xbb17f: mov rsi, rdi; mov rdi, qword [rsp+0x18]; lea rdx, [rbx*8]; mov dword [rsp+0x8], r9d; calljump___GI_memcpy; 
0xbbf6c: mov rdi, qword [rsp+0x20]; lea rdx, [r13*8]; mov rsi, rax; mov dword [rsp+0x28], r9d; calljump___GI_memcpy; 
0xbc0a9: lea r15, [rsp+0x88]; mov rsi, qword [rsp+0x18]; mov dword [rsp+0x20], r9d; lea rdx, [rbx*8]; mov rdi, r15; calljump___GI_memcpy; 
0xbc38b: mov rsi, qword [rsp+0x18]; lea rdx, [rbx*8]; calljump___GI_memcpy; 
0xc2bea: mov rsi, qword [r15]; lea r14, [rax-0x1]; lea rax, [rel __tens]; mov rdi, rbx; lea rdx, [r14*8]; lea rsi, [rax+rsi*8+0x8]; calljump___GI_memcpy; 
0xc322a: mov rsi, rdi; mov rdi, qword [rsp+0x8]; lea rdx, [rbx*8]; mov dword [rsp+0x18], r10d; calljump___GI_memcpy; 
0xc40d7: mov rdi, qword [rsp+0x18]; lea rdx, [r14*8]; mov rsi, rax; mov dword [rsp+0x28], r11d; mov dword [rsp+0x20], r10d; calljump___GI_memcpy; 
0xc4225: lea rax, [rsp+0x80]; mov rsi, qword [rsp+0x8]; mov dword [rsp+0x28], r11d; lea rdx, [rbx*8]; mov rdi, rax; mov dword [rsp+0x18], r10d; calljump___GI_memcpy; 
0xc462f: mov r12d, 0x2; lea rax, [rsp+0x80]; mov rsi, qword [rsp+0x8]; lea rdx, [rbx*8]; sub r12, rbx; mov qword [rsp+0x10], rax; lea rdi, [rax+r12*8]; calljump___GI_memcpy; 
0x895bc: mov rdx, rbp; mov rsi, r12; calljump___GI_memcpy; 
0x112d64: mov rsi, rbp; mov rdi, r13; lea rdx, [rax+0x1]; mov rbx, rax; calljump___GI_memcpy; 
0xbe354: mov rsi, rdi; mov rdi, qword [rsp+0x10]; lea rdx, [rbx*8]; mov dword [rsp+0x8], r9d; calljump___GI_memcpy; 
0xbe3b3: lea r13, [rsp+0x88]; mov rsi, qword [rsp+0x10]; mov dword [rsp+0x18], r9d; lea rdx, [rbx*8]; mov rdi, r13; calljump___GI_memcpy; 
0xbe49d: mov rcx, qword [r14]; lea r10, [rax-0x1]; lea rax, [rel __tens]; mov rdi, rbx; lea rdx, [r10*8]; mov qword [rsp+0x20], r10; lea rsi, [rax+rcx*8+0x8]; calljump___GI_memcpy; 
0xbf016: mov rdi, qword [rsp+0x18]; lea rdx, [r10*8]; mov rsi, rax; mov dword [rsp+0x30], r9d; mov qword [rsp+0x20], r10; calljump___GI_memcpy; 
0xbf370: mov rsi, qword [rsp+0x10]; lea rdx, [rbx*8]; calljump___GI_memcpy; 
0x38382: mov rdx, rbp; mov rsi, r12; mov rdi, rax; shl rbp, 0x3; calljump___GI_memcpy; 
0x38382: mov rdx, rbp; mov rsi, r12; mov rdi, rax; shl rbp, 0x3; calljump___GI_memcpy; lea r10, [r15+0xe]; mov rsi, qword [rsp]; mov rdx, rbp; mov rcx, rax; mov rax, r15; add rax, 0x7; mov qword [rsp+0x18], rcx; cmovns  r10, rax; and r10, 0xfffffffffffffff8; add r10, rcx; mov rdi, r10; calljump___GI_memcpy; 
0x13bce6: mov rsi, rdi; sub r15, rbp; mov rdi, r14; mov qword [rsp], rdx; mov qword [rsp+0x8], r9; calljump___GI_memcpy; 
0x45146: mov rcx, qword [r12]; lea rbp, [rax-0x1]; mov rdi, qword [rsp+0x10]; lea rax, [rel __tens]; lea rdx, [rbp*8]; lea rsi, [rax+rcx*8+0x8]; calljump___GI_memcpy; 
0x45f38: mov rsi, rdi; mov rdi, qword [rsp+0x8]; lea rdx, [rbp*8]; calljump___GI_memcpy; 
0x464dd: mov rdi, qword [rsp+0x18]; lea rdx, [rbp*8]; calljump___GI_memcpy; 
0x46776: lea r10, [rsp+0x78]; mov rsi, qword [rsp+0x8]; mov dword [rsp+0x10], r11d; lea rdx, [rbp*8]; mov rdi, r10; calljump___GI_memcpy; 
0x46938: mov rsi, qword [rsp+0x8]; lea rdx, [rbp*8]; calljump___GI_memcpy; 
0x300bd: lea rdi, [rax+0x30]; mov rdx, r14; mov rsi, r15; calljump___GI_memcpy; 
0x35b17: mov rdx, qword [rsp+0x18]; mov rsi, qword [rsp+0x10]; mov rdi, rax; calljump___GI_memcpy; 
0x866b0: mov rdx, qword [rsp+0x8]; mov rsi, r13; lea r12, [rax+rdx]; mov rdi, r12; calljump___GI_memcpy; 
0x9d864: mov rdi, qword [rbx]; mov rbp, rax; mov rdx, r15; mov rsi, r13; add rdi, rax; calljump___GI_memcpy; 
0xed7df: mov rsi, r13; mov rdi, r12; calljump___GI_memcpy; 
0x3fd00: mov rdi, rcx; mov rdx, r13; calljump___GI_memcpy; 
0x3fd6c: mov r15, qword [rsp]; mov rdx, rbx; mov rsi, rbp; lea rbx, [rel known_values]; lea rbp, [rel sub_246f0]; mov rdi, r15; calljump___GI_mempcpy; mov rdx, qword [rsp+0x18]; mov rsi, qword [rsp+0x10]; mov byte [rax], 0x3d; lea rdi, [rax+0x1]; calljump___GI_memcpy; 
0x78775: mov rdi, rbp; mov rdx, rbx; mov rsi, r13; sub r14, rbx; calljump___GI_memcpy; 
0x78814: mov rdx, r12; mov rsi, r13; mov rdi, rbp; mov qword [rsp+0x8], r8; calljump___GI_memcpy; 
0x9b936: mov rdx, qword [rsp+0x8]; mov rsi, rbx; mov rdi, rax; calljump___GI_memcpy; 
0x9ba11: mov rdx, qword [rbx-0x8]; mov rsi, rbx; mov rdi, r12; mov rax, rdx; and rdx, 0xfffffffffffffff8; shr rax, 0x1; and eax, 0x1; xor rax, 0x1; lea rdx, [rdx+rax*8-0x10]; calljump___GI_memcpy; 
0x368b1: mov ecx, ebx; add rbp, 0x8; mov rbx, qword [r12+rcx*8]; mov rdi, rbx; calljump___GI_strlen; mov rdi, r15; mov rsi, rbx; mov r14, rax; mov rdx, rax; calljump___GI_memcpy; 
0x36b0b: mov r14d, eax; mov rsi, qword [rsp+0x20]; mov rdi, r15; mov rdx, r14; add r15, r14; calljump___GI_memcpy; 
0x150bc0: mov rax, 0x7374702f7665642f; lea rdi, [rbp+0x9]; mov qword [rbp], rax; mov eax, 0x2f; mov word [rbp+0x8], ax; calljump___GI_memcpy; 
0x47bfe: mov rcx, qword [r12]; lea rbp, [rax-0x1]; mov rdi, qword [rsp+0x10]; lea rax, [rel __tens]; lea rdx, [rbp*8]; lea rsi, [rax+rcx*8+0x8]; calljump___GI_memcpy; 
0x489e8: mov rsi, rdi; mov rdi, qword [rsp+0x8]; lea rdx, [rbp*8]; calljump___GI_memcpy; 
0x48f85: mov rdi, qword [rsp+0x18]; lea rdx, [rbp*8]; calljump___GI_memcpy; 
0x49216: lea r10, [rsp+0x78]; mov rsi, qword [rsp+0x8]; mov dword [rsp+0x10], r11d; lea rdx, [rbp*8]; mov rdi, r10; calljump___GI_memcpy; 
0x493ce: mov rsi, qword [rsp+0x8]; lea rdx, [rbp*8]; calljump___GI_memcpy; 
0xdb4ba: mov rdx, r13; mov rsi, rdi; sub rdx, rdi; mov rdi, qword [rbp-0x498]; calljump___GI_mempcpy; mov rdx, qword [rbp-0x4b0]; mov rsi, r14; mov rdi, rax; calljump___GI_memcpy; 
0xdc94e: mov rsi, r14; mov rdi, r12; calljump___GI_mempcpy; mov rdx, qword [rbp-0x4c0]; mov rdi, rax; mov rax, qword [rbp-0x498]; lea rsi, [rax+0x1]; calljump___GI_memcpy; 
0x54180: sub rbx, rdi; mov rsi, r13; cmp rbx, rbp; cmova   rbx, rbp; mov rdx, rbx; add r13, rbx; calljump___GI_memcpy; 
0xa1db3: mov byte [rax+rbx], 0x0; add rsp, 0x8; mov rdx, rbx; mov rsi, rbp; pop rbx; mov rdi, rax; pop rbp; jmp jump___GI_memcpy; 
0x12b40a: mov rdx, r12; mov rsi, rbx; mov rdi, r13; calljump___GI_memcpy; 
0x12b436: add r12, r13; mov rsi, rbp; mov rdi, r12; calljump___GI_memcpy; 
0x12b498: add rcx, r13; mov rsi, r14; mov rdi, rcx; calljump___GI_memcpy; 
0x12b53c: mov r15, qword [rsp+0x10]; mov rdx, qword [rsp+0x28]; mov rsi, r15; calljump___GI_memcpy; 
0x4e153: lea rdx, [rdx*8-0x8]; calljump___GI_memcpy; 
0x4e206: lea rdx, [r14*8-0x8]; mov qword [rbp-0x38], r9; calljump___GI_memcpy; 
0x803ed: mov rdx, rbp; mov rsi, r13; mov rdi, rax; calljump___GI_memcpy; 
0x81509: add rdi, qword [rbx]; mov rdx, rbp; calljump___GI_memcpy; 
0x815d9: add rsi, qword [rbx]; mov rdx, rbp; calljump___GI_memcpy; 
0x818de: add rdi, qword [rbp]; mov rdx, rbx; calljump___GI_memcpy; 
0x81991: add rsi, qword [rbp]; mov rdx, rbx; calljump___GI_memcpy; 
0x84ca9: lea rsi, [r9+r12]; mov rdi, r15; mov qword [rsp+0x10], rcx; calljump___GI_memcpy; 
0x84d0d: calljump___GI_memcpy; 
0x84d28: mov rsi, qword [rsp+0x28]; mov rdx, r12; mov rdi, r15; mov qword [rsp+0x18], rcx; neg rdx; mov qword [rsp+0x10], r9; add rsi, r12; calljump___GI_mempcpy; mov rsi, qword [rsp+0x10]; mov rdx, rbx; mov rdi, rax; calljump___GI_memcpy; 
0x8694b: mov rdx, qword [rsp+0x18]; mov rsi, r14; mov rdi, rax; calljump___GI_memcpy; 
0x9a747: mov rdx, qword [rbx+0x8]; lea rsi, [rbx+0x10]; mov rdi, r12; mov rax, rdx; and rdx, 0xfffffffffffffff8; shr rax, 0x1; and eax, 0x1; xor rax, 0x1; lea rdx, [rdx+rax*8-0x10]; calljump___GI_memcpy; 
0x12d730: mov dword [rcx-0x4], ebp; movsxd  rdx, dword [r12+0x14]; mov rdi, rcx; calljump___GI_memcpy; 
0x13345d: mov rax, qword [rbx+0x40]; lea rdi, [r12+0x8]; mov rdx, r13; mov rsi, rbp; mov qword [r12], rax; calljump___GI_memcpy; 
0x13aa38: mov rdx, r15; mov rdi, r12; calljump___GI_memcpy; 
0x13aed2: mov rsi, qword [rsp+0x80]; mov rdi, rbx; lea rdx, [r12*8]; calljump___GI_memcpy; 
0x13aed2: mov rsi, qword [rsp+0x80]; mov rdi, rbx; lea rdx, [r12*8]; calljump___GI_memcpy; mov qword [rbx+r12*8], 0x0; mov rsi, qword [rsp+0x120]; mov rdi, rbp; lea rdx, [r13*8]; calljump___GI_memcpy; 
0x13dcfb: mov qword [rax], 0x0; lea rdx, [rbp+0x1]; mov rbx, rax; mov rsi, r15; mov qword [rax+0x14], 0xffffffffffffffff; lea r13, [rax+0x1028]; mov rdi, r13; calljump___GI_memcpy; 
0x13dd4f: lea rdi, [rbx+0x1c]; mov rsi, r13; mov qword [rsp+0x8 {var_40_1}], rdx; calljump___GI_memcpy; 
0xc8116: mov qword [rax+0x8], r14; lea rbp, [rax+0x10]; mov rdx, r14; mov rsi, r12; mov qword [rax], 0x0; mov rdi, rbp; calljump___GI_memcpy; 
0xc8159: mov qword [rbx+0x8], r14; lea rbp, [rbx+0x10]; mov rdx, r14; mov rsi, r12; mov qword [rbx], 0x0; mov rdi, rbp; calljump___GI_memcpy; 
0xce75e: mov rdx, r9; mov rsi, rcx; mov rdi, rbp; mov qword [rsp+0x10], r9; calljump___GI_memcpy; 
0xce9c7: mov rdx, r10; mov rsi, r8; mov rdi, rbp; mov qword [rsp+0x10], r10; calljump___GI_memcpy; 
0xceae4: mov rdx, r14; mov rdi, rbp; mov qword [rsp+0x10], r8; calljump___GI_memcpy; 
0xcebe7: mov rdx, r13; mov rdi, rbp; mov qword [rsp+0x10], r8; calljump___GI_memcpy; 
0xcf127: mov rsi, qword [rsp+0x18]; mov rdx, r13; mov rdi, rbp; mov qword [rsp+0x10], r10; calljump___GI_memcpy; 
0xcf33c: mov rsi, qword [rcx+rax*8+0x168]; mov rdx, r8; mov rdi, rbp; mov qword [rsp+0x10], r8; calljump___GI_memcpy; 
0xcfb26: mov rdx, r14; mov rdi, rbp; mov qword [rsp+0x10], r8; calljump___GI_memcpy; 
0xd4b90: lea rdi, [r12+0x10]; shl rdx, 0x3; add rsi, 0x8; calljump___GI_memcpy; 
0xda829: mov rdx, qword [rsp+0x8]; mov rsi, qword [rsp+0x18]; mov rdi, rax; calljump___GI_mempcpy; mov rdx, rbx; mov rsi, rbp; mov byte [rax], 0x2f; lea rdi, [rax+0x1]; calljump___GI_memcpy; 
0xdaeb7: mov rdx, qword [rbp-0x730]; mov rsi, qword [rbp-0x728]; mov rdi, rbx; calljump___GI_mempcpy; mov rsi, qword [rbp-0x700]; mov rdx, r14; mov byte [rax], 0x2f; lea rdi, [rax+0x1]; calljump___GI_memcpy; 
0xdafa8: mov rdx, qword [rbp-0x730]; mov rsi, qword [rbp-0x728]; mov rdi, qword [rbp-0x440]; calljump___GI_mempcpy; xor edx, edx; mov rsi, rbx; cmp byte [rax-0x1], 0x2f; mov byte [rax], 0x2f; setne   dl; lea rdi, [rax+rdx]; mov rdx, qword [rbp-0x710]; add rdx, 0x1; calljump___GI_memcpy; 
0xdccf9: mov rdx, qword [rsp+0x8]; mov rsi, qword [rsp+0x18]; mov rdi, rax; calljump___GI_mempcpy; mov rdx, rbx; mov rsi, rbp; mov byte [rax], 0x2f; lea rdi, [rax+0x1]; calljump___GI_memcpy; 
0xdd387: mov rdx, qword [rbp-0x730]; mov rsi, qword [rbp-0x728]; mov rdi, rbx; calljump___GI_mempcpy; mov rsi, qword [rbp-0x700]; mov rdx, r14; mov byte [rax], 0x2f; lea rdi, [rax+0x1]; calljump___GI_memcpy; 
0xdd478: mov rdx, qword [rbp-0x730]; mov rsi, qword [rbp-0x728]; mov rdi, qword [rbp-0x440]; calljump___GI_mempcpy; xor edx, edx; mov rsi, rbx; cmp byte [rax-0x1], 0x2f; mov byte [rax], 0x2f; setne   dl; lea rdi, [rax+rdx]; mov rdx, qword [rbp-0x710]; add rdx, 0x1; calljump___GI_memcpy; 
0xddb30: mov rdi, rbx; mov byte [rbp+rax-0x1030], 0x0; call__basename; mov rdi, rax; mov r12, rax; calljump___GI_strlen; mov rsi, r12; lea rdx, [rax+0x1]; add rax, 0x18; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rdi, [rsp+0xf]; and rdi, 0xfffffffffffffff0; calljump___GI_memcpy; 
0xdef9c: mov rdi, qword [r12+0x8]; mov rdx, r14; mov rsi, r10; add rdi, rbp; calljump___GI_memcpy; 
0xdf082: mov rdi, qword [r12+0x8]; mov rsi, qword [rsp+0x20]; mov rdx, r14; add rdi, rbp; calljump___GI_memcpy; 
0xdf17e: mov rdi, qword [r12+0x8]; movsxd  rsi, dword [r12+0x28]; mov rdx, r14; add rsi, rbp; add rdi, rbp; add rsi, qword [r12]; calljump___GI_memcpy; 
0xdf29d: mov rdi, qword [r12+0x8]; mov rsi, qword [rsp+0x18]; mov rdx, r14; add rdi, rbp; calljump___GI_memcpy; 
0xdf3c9: mov rdi, qword [r12+0x8]; mov rsi, r10; mov qword [rsp+0x8], rdx; add rdi, rbp; calljump___GI_memcpy; 
0xdf55f: add ecx, 0x1; mov rax, qword [rbp+0x8]; mov rsi, qword [r12+0x8]; sub ebx, ecx; movsxd  rcx, ecx; movsxd  rdx, ebx; lea rdi, [rax+rdx*4]; lea rdx, [rcx*4]; calljump___GI_memcpy; 
0xdf5e7: movsxd  rdx, ecx; movsxd  rbx, ebx; shl rdx, 0x2; lea rsi, [rdi+rbx*4]; calljump___GI_memcpy; 
0xdf651: mov rdi, qword [rbp+0x8]; mov rsi, qword [r12+0x8]; mov dword [rbp+0x4], edx; shl rdx, 0x2; calljump___GI_memcpy; 
0xdf6b3: mov rsi, qword [r12+0x8]; mov rdx, rbx; calljump___GI_memcpy; 
0xdf818: sub r14d, eax; movsxd  rdx, ebx; cdqe; lea rdi, [rdi+rdx*4]; movsxd  rdx, r14d; lea rsi, [r9+rax*4]; shl rdx, 0x2; calljump___GI_memcpy; 
0xdf840: sub r13d, ecx; movsxd  rax, ebx; movsxd  rcx, ecx; movsxd  rdx, r13d; lea rdi, [rdi+rax*4]; lea rsi, [r8+rcx*4]; shl rdx, 0x2; calljump___GI_memcpy; 
0xdf967: movsxd  r9, r9d; mov rdi, r8; lea rsi, [r8+r9*4]; calljump___GI_memcpy; 
0xe00ba: sub ebx, 0x1; movsxd  r13, edx; mov rdx, qword [rbp+0x8]; mov rdi, rcx; mov dword [rbp], ebx; movsxd  rbx, ebx; shl r13, 0x3; mov r14, r9; shl rbx, 0x5; mov r12, r8; add rdx, rbx; mov ecx, dword [rdx]; mov dword [rsi], ecx; mov rsi, qword [rdx+0x8]; mov rdx, r13; calljump___GI_memcpy; 
0xe00ba: sub ebx, 0x1; movsxd  r13, edx; mov rdx, qword [rbp+0x8]; mov rdi, rcx; mov dword [rbp], ebx; movsxd  rbx, ebx; shl r13, 0x3; mov r14, r9; shl rbx, 0x5; mov r12, r8; add rdx, rbx; mov ecx, dword [rdx]; mov dword [rsi], ecx; mov rsi, qword [rdx+0x8]; mov rdx, r13; calljump___GI_memcpy; mov rax, qword [rbp+0x8]; mov rdx, r13; mov rdi, r12; mov rsi, qword [rax+rbx+0x8]; add rsi, r13; calljump___GI_memcpy; 
0xe4d6a: mov rsi, qword [r8+0x10]; calljump___GI_memcpy; 
0xe5608: mov rsi, qword [rsp+0x10]; mov rdx, r12; calljump___GI_memcpy; 
0xe6349: mov rsi, qword [rbx+0x10]; mov rdx, r12; calljump___GI_memcpy; 
0xe892d: mov rdx, qword [rsp+0x28]; mov rsi, qword [rsp+0x298]; calljump___GI_memcpy; 
0xe8cbe: mov rdx, qword [rsp+0x28]; mov rdi, rbp; mov dword [rsp+0x60], ecx; calljump___GI_memcpy; 
0xe8d5e: mov r12, qword [rsp+0x28]; mov rsi, rbp; mov rdx, r12; calljump___GI_memcpy; 
0xe8d5e: mov r12, qword [rsp+0x28]; mov rsi, rbp; mov rdx, r12; calljump___GI_memcpy; mov rdi, qword [r13+0x8]; mov rsi, qword [rsp+0x20]; mov rdx, r12; add rdi, r12; calljump___GI_memcpy; 
0xe90be: mov dword [rdx+0x4], ecx; mov rdi, qword [rsp+0x20]; mov rsi, rbp; mov rdx, qword [rsp+0x28]; mov dword [rsp+0x60], ecx; calljump___GI_memcpy; 
0xecaa1: mov rsi, qword [r14+0x8]; mov rdx, r15; mov rdi, rax; calljump___GI_memcpy; 
0xefb99: lea rdi, [rbx+0x10]; lea rdx, [rax-0x10]; add rsi, 0x8; calljump___GI_memcpy; 
0xefc6d: mov rdi, r13; calljump___GI_strlen; mov rdx, rbx; mov rsi, r15; mov r14, rax; lea rax, [rbx+rax+0x1a]; and rax, 0xfffffffffffffff0; sub rsp, rax; mov rdi, rsp; calljump___GI_mempcpy; mov edx, 0x5f36; mov rsi, r13; mov rcx, 0x565f5849534f502f; mov qword [rax], rcx; lea rdi, [rax+0xa]; mov word [rax+0x8], dx; lea rdx, [r14+0x1]; calljump___GI_memcpy; 
0xf16b9: mov rsi, r15; sub rsi, rdi; mov rdi, r14; sub rsi, 0x1; calljump___GI___strnlen; mov rsi, r14; lea r14, [rbp-0x470]; mov rdx, rax; lea rax, [rax+0x18]; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rdi, [rsp+0xf]; and rdi, 0xfffffffffffffff0; mov byte [rdi+rdx], 0x0; calljump___GI_memcpy; 
0xf6060: lea rcx, [rax+0x70]; mov rdx, rbp; mov rsi, r13; mov rdi, rcx; calljump___GI_memcpy; 
0xf60a1: lea rdi, [rbx+0x70]; mov rdx, rbp; mov rsi, r13; calljump___GI_memcpy; 
0x10bb66: mov rdx, rbp; mov rsi, r12; calljump___GI_memcpy; 
0x10c3a9: calljump___GI_memcpy; 
0x10c6f4: mov rdx, r12; mov rsi, rbp; calljump___GI_memcpy; 
0x10d02d: mov rsi, r14; mov qword [rsp+0x18], rdx; calljump___GI_memcpy; 
0x10d260: mov rdx, r15; mov rsi, rbx; mov rdi, r14; calljump___GI_memcpy; 
0x10d931: mov rax, qword [rbp]; mov rdi, qword [r15]; mov dword [rsp+0x40], r8d; mov dword [rsp+0x44], r9d; mov qword [rsp+0x30], rax; mov eax, r9d; mov rsi, rdi; lea rax, [rax+rax*2]; mov qword [rsp+0x28], rdi; mov rdi, qword [rsp+0x8]; shl rax, 0x4; mov qword [rsp+0x48], rcx; mov rdx, rax; mov qword [rsp+0x38], rax; calljump___GI_mempcpy; mov rsi, qword [rsp+0x30]; mov rdi, rax; mov eax, dword [rsp+0x40]; lea rdx, [rax+rax*2]; shl rdx, 0x4; calljump___GI_memcpy; 
0x10d931: mov rax, qword [rbp]; mov rdi, qword [r15]; mov dword [rsp+0x40], r8d; mov dword [rsp+0x44], r9d; mov qword [rsp+0x30], rax; mov eax, r9d; mov rsi, rdi; lea rax, [rax+rax*2]; mov qword [rsp+0x28], rdi; mov rdi, qword [rsp+0x8]; shl rax, 0x4; mov qword [rsp+0x48], rcx; mov rdx, rax; mov qword [rsp+0x38], rax; calljump___GI_mempcpy; mov rsi, qword [rsp+0x30]; mov rdi, rax; mov eax, dword [rsp+0x40]; lea rdx, [rax+rax*2]; shl rdx, 0x4; calljump___GI_memcpy; mov rcx, qword [rsp+0x48]; mov rdx, qword [rsp+0x10]; mov rdi, r14; mov rsi, rcx; mov qword [rsp+0x30], rcx; calljump___GI_memcpy; 
0x10e318: mov rsi, r14; add rbx, 0x30; mov qword [rbp-0xd8], rdx; calljump___GI_memcpy; 
0x10e4db: mov rsi, r12; mov qword [rbp-0x78], rdx; calljump___GI_memcpy; 
0x10f094: mov rsi, r13; mov qword [rbp-0xb8], rdx; calljump___GI_memcpy; 
0x10f19a: mov rdx, r12; mov rsi, r13; calljump___GI_memcpy; 
0x11516b: mov qword [r15+0x30], rbp; lea r12, [rbp+rdx]; mov rsi, rdi; mov rdi, rbp; mov rbp, r12; calljump___GI_memcpy; 
0x115242: mov esi, 0x11; lea rax, [r15+0x44]; mov qword [rsp+0x58], rdx; mov word [r15+0x38], si; mov rsi, rdi; mov rdi, rax; calljump___GI_memcpy; 
0x115527: lea rdi, [rbx+0x82]; calljump___GI_memcpy; 
0x1155aa: lea rdi, [r10+0x2]; calljump___GI_memcpy; 
0x1156f9: mov ecx, 0x11; lea rax, [r15+0x8c]; mov rsi, rdi; mov qword [rsp+0x58], rdx; mov word [r15+0x80], cx; mov rdi, rax; calljump___GI_memcpy; 
0x1158d7: lea rdi, [rbx+0x3a]; calljump___GI_memcpy; 
0x119f2c: xor edx, edx; cmp ax, 0x4; lea rdi, [r9+0x14]; mov rsi, qword [rsp+0x488]; setne   dl; mov qword [rsp+0x30], r9; lea edx, [rdx*8+0x2]; mov dword [r9+0x10], edx; movzx   edx, ax; calljump___GI_memcpy; 
0x11abe0: mov rax, qword [rsp+0xa0]; mov rdi, qword [r14+0x18]; mov rsi, qword [rsp+0xb0]; lea rdx, [rax*8]; calljump___GI_memcpy; 
0x11ac1c: mov rax, qword [rsp+0x140]; mov rdi, qword [r14+0x8]; mov rsi, qword [rsp+0x150]; lea rdx, [rax*8-0x8]; calljump___GI_memcpy; 
0x14eac8: mov qword [rbp-0x40], rsp; sub rsp, rdx; mov rsi, r13; mov r13, rbx; mov rdi, rsp; mov qword [rbp-0x38], rcx; mov r15, rsp; calljump___GI_memcpy; 
0xedcfd: movsxd  rdx, dword [rsp+0x8]; mov rsi, qword [rsp]; mov rdi, rax; calljump___GI_mempcpy; mov rsi, r12; movsxd  rdx, ebx; mov r12, r15; mov rdi, rax; calljump___GI_memcpy; 
0x1409c0: mov rdi, qword [rbp+0x20]; mov rbx, qword [rbp+0x28]; mov rsi, r13; sub rbx, rdi; cmp r12d, ebx; cmovbe  ebx, r12d; mov r14d, ebx; sub r12d, ebx; mov rdx, r14; add r13, r14; calljump___GI_memcpy; 
0x140aa0: cmp r13d, eax; mov rdi, r12; cmovle  eax, r13d; movsxd  r14, eax; mov rdx, r14; sub r13d, r14d; add r12, r14; calljump___GI_memcpy; 
0x14aa40: pushrbp; sub eax, edx; mov rbp, rdi; pushrbx; mov ebx, edx; mov rdx, rbx; sub rsp, 0x8; mov dword [rdi+0x28], eax; mov rdi, qword [rdi+0x18]; calljump___GI_memcpy; 
0x14aa86: sub eax, edx; mov rdi, rsi; mov ebx, edx; mov rsi, qword [rbp+0x18]; mov dword [rbp+0x28], eax; mov rdx, rbx; calljump___GI_memcpy; 
0x14b5d0: mov rdi, qword [rsp+0x8]; mov dword [rsp+0x20], ecx; mov qword [rsp+0x18], r8; mov qword [rsp+0x38], r10; mov qword [rsp+0x30], r9; mov qword [rsp+0x28], r11; calljump___GI_memcpy; 
0x14bbda: mov rdi, qword [rdx]; mov rdx, r15; mov dword [rsp+0x30], ecx; calljump___GI_memcpy; 
0x14bc98: mov rdx, rsi; mov rsi, r8; mov dword [rsp+0x40], ecx; mov qword [rsp+0x38], r8; calljump___GI_memcpy; 
0x14c390: lea rax, [rdx+0x17]; mov dword [rbp-0xfc], r10d; and rax, 0xfffffffffffffff0; mov dword [rbp-0xa8], ecx; sub rsp, rax; mov dword [rbp-0xf8], r8d; lea rdi, [rsp+0xf]; mov qword [rbp-0xe8], r9; and rdi, 0xfffffffffffffff0; mov qword [rbp-0xc8], rdx; mov qword [rbp-0xc0], rsi; calljump___GI_memcpy; 
0x14c5c0: mov rsi, qword [rbp-0xd0]; mov rdx, r9; mov dword [rbp-0xa8], r10d; mov qword [rbp-0xf8], r11; calljump___GI_memcpy; 
0x14c5c0: mov rsi, qword [rbp-0xd0]; mov rdx, r9; mov dword [rbp-0xa8], r10d; mov qword [rbp-0xf8], r11; calljump___GI_memcpy; mov rax, qword [rbp-0xd8]; mov rdx, qword [rbp-0xc0]; mov rsi, qword [rbp-0xc8]; mov rax, qword [rax+0x18]; mov rdi, qword [rax]; calljump___GI_memcpy; 
0x14c69b: mov rdi, qword [rsi]; mov rax, qword [rbp-0xc0]; mov dword [rbp-0xd0], r10d; mov rsi, qword [rbp-0xc8]; mov qword [rbp-0xe8], r11; add rsi, rax; calljump___GI_memcpy; 
0x14d595: mov rdi, qword [rbp-0x98]; add r13, 0x1; mov rdx, r14; testr12, r12; lea rax, [rel data_197b1a]; mov rsi, r15; cmove   r12, rax; calljump___GI_mempcpy; mov rdx, r13; mov byte [rax], 0x2f; lea rdi, [rax+0x1]; mov rsi, r12; calljump___GI_memcpy; 
0x14d702: mov rsi, r12; mov qword [rbp-0xd0], r10; mov dword [rbp-0xc8], ecx; calljump___GI_memcpy; 
0x14dba0: mov rdx, r8; mov rsi, r10; mov rdi, rax; mov qword [rbp-0xd8], r9; mov dword [rbp-0xd0], ecx; calljump___GI_memcpy; 
0x14dc53: mov rdi, qword [rsi]; mov rsi, qword [rbp-0xa0]; calljump___GI_memcpy; 
0x14e84a: mov dword [rbx+0x4], r15d; mov rdx, r14; lea rdi, [rbx+0xc]; xor r15d, r15d; mov dword [rbx+0x8], r14d; mov rsi, qword [rbp-0xc8]; mov r14d, 0x1; mov dword [rbx], 0x2; calljump___GI_memcpy; 
0x14f530: mov rdx, r13; mov rsi, r14; mov rdi, r12; calljump___GI_memcpy; 
0x84170: mov rdx, r15; mov rdi, r12; calljump___GI_memcpy; 
0x13b5ec: mov r15, qword [rsp+0x8]; mov qword [rax], 0x0; xor eax, eax; cmp byte [rsp+0x1f], 0x0; movsxd  rdx, dword [rsp+0x54]; cmovne  r13, rax; mov rdi, qword [r15]; mov eax, dword [rsp+0x50]; mov qword [rdi+0x8], r13; mov rsi, qword [rcx]; add rdi, 0x14; mov dword [rdi-0x4], eax; calljump___GI_memcpy; 
0x50675: mov rcx, qword [r13]; lea rbp, [rax-0x1]; mov rdi, qword [rsp+0x18]; lea rax, [rel __tens]; lea rdx, [rbp*8]; lea rsi, [rax+rcx*8+0x8]; calljump___GI_memcpy; 
0x51496: mov rsi, rdi; mov rdi, qword [rsp+0x10]; lea rdx, [rbp*8]; calljump___GI_memcpy; 
0x51b52: mov rdi, qword [rsp+0x20]; lea rdx, [rbp*8]; mov rsi, rbx; mov dword [rsp+0x18], r11d; calljump___GI_memcpy; 
0x51e5c: lea r10, [rsp+0x80]; mov rsi, qword [rsp+0x10]; mov dword [rsp+0x18], r11d; lea rdx, [rbp*8]; mov rdi, r10; calljump___GI_memcpy; 
0x52171: mov r12d, 0x2; lea r10, [rsp+0x80]; mov rsi, qword [rsp+0x10]; lea rdx, [rbp*8]; sub r12, rbp; mov qword [rsp+0x8], r10; lea rdi, [r10+r12*8]; calljump___GI_memcpy; 
0x3c67a: lea rdx, [rsi+0x1]; lea rdi, [r15+rcx]; mov rsi, r13; mov qword [rsp+0x20], r9; mov qword [rsp+0x18], rcx; calljump___GI_memmove; mov rdx, qword [rsp+0x18]; mov rsi, rbx; mov rdi, r15; calljump___GI_memcpy; 
0x1445d6: mov edx, dword [r15]; mov rsi, qword [r15+0x8]; lea rdi, [rax+0x84]; lea r15, [rsp+0x30]; calljump___GI_memcpy; 
0x144699: mov rdx, r8; mov rsi, r12; mov rdi, rax; calljump___GI_memcpy; 
0x133f87: mov rax, qword [rsp+0x50]; mov rdx, qword [rsp+0x58]; lea rdi, [rcx+0x8]; mov rsi, r15; mov qword [rsp+0x50], rcx; mov qword [rcx], rax; calljump___GI_memcpy; 
0x1053a0: add dword [rbp-0x34], 0x14; movsxd  rax, dword [rbp-0x34]; mov rsi, r9; mov rdx, rbx; lea rax, [rax*8+0x17]; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rdi, [rsp+0xf]; and rdi, 0xfffffffffffffff0; calljump___GI_memcpy; 
0x10543a: add dword [rbp-0x34], 0x14; movsxd  rax, dword [rbp-0x34]; mov rsi, r9; mov rdx, r12; mov qword [rbp-0x48], r10; lea rax, [rax*8+0x17]; mov qword [rbp-0x40], r8; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rdi, [rsp+0xf]; and rdi, 0xfffffffffffffff0; calljump___GI_memcpy; 
0x804cd: mov rdx, r13; mov rsi, r14; mov rdi, rax; calljump___GI_memcpy; 
0xc1b70: endbr64 ; shl rdx, 0x2; jmp jump___GI_memcpy; 
0xa1a17: lea rdx, [rax+0x1]; mov rsi, rbp; mov rdi, r13; calljump___GI_memcpy; 
0xa1a3d: mov rdx, r12; mov rsi, rbp; mov rdi, r13; calljump___GI_memcpy; 
0x7849f: add rdi, r14; mov rdx, r15; mov rsi, r13; calljump___GI_memcpy; 
0x27534: lea rdi, [rax+0x20]; mov rsi, qword [rbp-0x98]; mov rdx, r12; mov qword [rax], rdi; calljump___GI_mempcpy; mov rdx, r13; mov rsi, r14; mov rdi, rax; calljump___GI_memcpy; 
0x2823d: mov rax, r13; mov rdi, r15; mov qword [rbp-0x60], rcx; sub rax, r15; mov rsi, rax; mov qword [rbp-0x78], rax; calljump___GI___strnlen; mov rsi, r15; mov rdx, rax; lea rax, [rax+0x18]; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rdi, [rsp+0xf]; and rdi, 0xfffffffffffffff0; mov byte [rdi+rdx], 0x0; calljump___GI_memcpy; 
0x28384: lea rdi, [rax+0x10]; mov rdx, r13; mov rsi, rbp; mov rbx, rax; calljump___GI_memcpy; 
0x2f640: pushrbp; mov rbp, rsp; pushr15; pushr14; pushr13; mov r13, rdi; pushr12; mov r12, rsi; pushrbx; mov rbx, rdx; sub rsp, 0x8; calljump___GI_strlen; mov rdi, r12; mov r14, rax; calljump___GI_strlen; mov rdx, r14; mov rsi, r13; lea r15, [rax+0x1]; lea rax, [r14+rax+0x10]; and rax, 0xfffffffffffffff0; sub rsp, rax; mov rdi, rsp; calljump___GI_mempcpy; mov rdx, r15; mov rsi, r12; mov rdi, rax; calljump___GI_memcpy; 
0x32e84: add rsp, 0x18; mov rdx, rbx; mov rsi, rbp; pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; jmp jump___GI_memcpy; 
0x34103: mov rdx, qword [rsp]; lea rdi, [r14+0x18]; mov rsi, rbx; calljump___GI_memcpy; 
0x341fd: lea rdi, [r14+0x18]; mov rdx, r15; mov rsi, rbx; calljump___GI_memcpy; 
0x3429f: lea rdi, [r14+0x18]; mov rdx, r15; mov rsi, rbx; calljump___GI_memcpy; 
0x3762f: mov rax, qword [rbp-0x1d0]; lea rdi, [r9+rcx]; mov rsi, rbx; mov qword [rbp-0x1f8], r11; mov qword [rbp-0x1f0], r8; shl rax, 0x4; mov qword [rbp-0x1e8], r9; add r13, rax; calljump___GI_memcpy; 
0x3762f: mov rax, qword [rbp-0x1d0]; lea rdi, [r9+rcx]; mov rsi, rbx; mov qword [rbp-0x1f8], r11; mov qword [rbp-0x1f0], r8; shl rax, 0x4; mov qword [rbp-0x1e8], r9; add r13, rax; calljump___GI_memcpy; mov rdi, qword [rbp-0x1e0]; mov r9, qword [rbp-0x1e8]; mov rsi, r12; mov qword [r13], rax; mov rdx, qword [rbp-0x1d8]; add rdi, r9; calljump___GI_memcpy; 
0x37b29: mov rsi, qword [rsp+0x8]; mov rdx, r13; mov rdi, rax; calljump___GI_memcpy; 
0x37bae: mov byte [rax], 0x2f; mov rsi, qword [rsp+0x98]; lea rdi, [rax+0x1]; lea rdx, [r14+0x1]; calljump___GI_memcpy; 
0x3eabe: mov rax, qword [rsp+0x28]; mov rdx, qword [rsp+0x10]; mov rdi, qword [rsp+0x20]; imulrdx, rax; mov rax, qword [rsp+0x18]; mov rsi, qword [rax+0x20]; add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; jmp jump___GI_memcpy; 
0x3ec00: mov rdx, qword [rsp+0x10]; mov rsi, rbp; mov rdi, r14; imulrdx, r13; calljump___GI_memcpy; 
0x3ed3e: mov rdi, qword [rsp+0x10]; mov rdx, rbx; mov rsi, rbp; mov r13, r12; calljump___GI_memcpy; 
0x3ed63: mov rcx, qword [rsp+0x8]; mov rax, r14; xor edx, edx; mov rsi, r13; mov qword [r15+rsi*8], rdi; mov rsi, r14; sub rax, rcx; div rbx; mov rdx, rbx; mov r13, rax; calljump___GI_memcpy; 
0x3ed97: mov qword [rdx], r14; mov rsi, qword [rsp+0x10]; mov rdx, rbx; calljump___GI_memcpy; 
0x5469d: shl rdx, 0x3; lea rdi, [rdi+r12*8]; mov rsi, r14; calljump___GI_memcpy; 
0x5471b: mov rdx, qword [r15+0x8]; lea rsi, [rel __tens]; mov qword [rbp-0x38], rdx; mov rax, qword [r15]; shl rdx, 0x3; lea rsi, [rsi+rax*8]; calljump___GI_memcpy; 
0x547c0: mov rsi, qword [rbp-0x40]; mov rdi, qword [rbp-0x50]; mov qword [rbp-0x48], rdx; shl rdx, 0x3; calljump___GI_memcpy; 
0x553d0: mov rax, qword [r15+0x8]; lea rsi, [rel __tens]; add rdi, 0x8; lea rdx, [rax+0x1]; mov qword [rbp-0x38], rdx; mov rax, qword [r15]; shl rdx, 0x3; lea rsi, [rsi+rax*8]; calljump___GI_memcpy; 
0x1134b9: jmp jump___wcsncpy_ifunc; 
0xfb4b4: sub rdx, rbx; mov esi, 0x2f; mov rdi, rbx; calljump___GI___memrchr; 
0xb61b0: endbr64 ; pushrbp; pushrbx; mov rbx, rdi; sub rsp, 0x8; calljump___wcslen_ifunc; 
0x7a7d0: endbr64 ; pushr14; pushr13; pushr12; mov r12, rdi; pushrbp; pushrbx; mov rbx, rsi; calljump___wcslen_ifunc; 
0x7cbde: mov rdi, rsi; calljump___wcslen_ifunc; 
0x7a950: endbr64 ; pushr14; pushr13; pushr12; mov r12, rdi; pushrbp; mov rbp, rsi; pushrbx; calljump___wcslen_ifunc; 
0xc4a70: endbr64 ; pushr12; mov r12, rdi; mov rdi, rsi; pushrbp; mov rbp, rsi; pushrbx; calljump___wcslen_ifunc; 
0xc00e6: mov rdi, rsi; mov qword [rbp-0x38], rsi; calljump___wcslen_ifunc; 
0xb6ff0: mov rdi, r13; lea r14, [rsp+0x20]; calljump___wcslen_ifunc; 
0xc4b20: endbr64 ; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; sub rsp, 0x8; calljump___wcslen_ifunc; 
0xd0cb4: mov rdi, rax; mov dword [rsp+0x40], ecx; mov dword [rsp+0x38], r11d; calljump___wcslen_ifunc; 
0xd0dde: mov dword [rsp+0x40], ecx; mov dword [rsp+0x48], esi; mov dword [rsp+0x38], r11d; calljump___wcslen_ifunc; 
0xd0f1b: mov dword [rsp+0x40], edx; mov dword [rsp+0x38], r11d; calljump___wcslen_ifunc; 
0xd108b: mov dword [rsp+0x38], ecx; mov dword [rsp+0x40], r11d; mov dword [rsp+0x30], esi; calljump___wcslen_ifunc; 
0xd11c5: mov dword [rsp+0x38], ecx; mov dword [rsp+0x40], r11d; mov dword [rsp+0x30], esi; calljump___wcslen_ifunc; 
0xd1377: mov dword [rsp+0x40], ecx; mov dword [rsp+0x48], esi; mov dword [rsp+0x38], r11d; calljump___wcslen_ifunc; 
0xd147d: mov rax, qword [rsp]; mov dword [rsp+0x30], ecx; mov rcx, qword [rsp+0x8]; mov dword [rsp+0x38], r11d; mov ebx, dword [rax+0x8]; xor eax, eax; cmp ebx, 0xb; setgal; mov rdi, qword [rcx+rax*8+0x308]; calljump___wcslen_ifunc; 
0xd2173: mov dword [rsp+0x40], ecx; mov dword [rsp+0x48], edx; mov dword [rsp+0x38], r11d; calljump___wcslen_ifunc; 
0xd257d: mov rcx, qword [rax+0x30]; mov dword [rsp+0x48], r11d; mov rdi, rcx; mov qword [rsp+0x40], rcx; calljump___wcslen_ifunc; 
0xd7110: pushr15; pushr14; mov r14, 0xffffffff3ffff9fe; pushr13; xor r13d, r13d; pushr12; pushrbp; mov rbp, rsi; pushrbx; lea rbx, [rbp+0x4]; mov r12, rbx; sub rsp, 0xa8; mov dword [rsp], edi; mov rdi, rsi; mov qword [rsp+0x20], rdx; mov qword [rsp+0x28], rcx; mov dword [rsp+0x30], r8d; mov dword [rsp+0x1c], r9d; mov byte [rsp+0x38], r8b; calljump___wcslen_ifunc; 
0x6b610: mov rdi, r15; mov dword [rsp+0x8], r9d; calljump___wcslen_ifunc; 
0x6bc1b: mov r13, qword [rsp+0x50]; mov dword [rsp+0x8], r10d; mov rdi, r13; calljump___wcslen_ifunc; 
0xb6280: endbr64 ; pushr13; mov r13, rdi; mov rdi, rsi; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; sub rsp, 0x8; calljump___wcslen_ifunc; 
0xb6200: endbr64 ; pushr14; pushr13; pushr12; mov r12, rdi; mov rdi, rsi; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdx; calljump___wcslen_ifunc; 
0xc59b0: endbr64 ; pushrbp; mov rbp, rdi; mov rdi, rsi; pushrbx; mov rbx, rsi; sub rsp, 0x8; calljump___wcslen_ifunc; 
0xc5c20: endbr64 ; pushr13; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; sub rsp, 0x8; calljump___wcslen_ifunc; 
0x68f0c: mov rdi, r13; mov dword [rsp+0x20], r11d; calljump___wcslen_ifunc; 
0x69453: mov r14, qword [rsp+0x80]; mov dword [rsp+0x20], r9d; mov rdi, r14; calljump___wcslen_ifunc; 
0x10fc6c: mov rdx, qword [rsp+0x8]; mov r8, qword [rsp+0x18]; add r15, rax; xor esi, esi; mov rcx, qword [rsp+0x10]; mov qword [rsp+0x180], rax; lea rdi, [r8+r8*8]; mov qword [rsp+0x138], r15; add rcx, rdx; lea rdi, [rax+rdi*8]; shl rdx, 0x3; mov dword [rsp+0x150], 0x0; lea r8, [rax+rcx*8]; mov rax, qword [rel conversion_rate]; mov qword [rsp+0x190], rdi; mov qword [rsp+0x140], r8; mov qword [rsp+0x8], r8; mov qword [rsp+0x148], rax; mov qword [rsp+0x158], 0x0; mov dword [rsp+0x160], 0x0; mov qword [rsp+0x168], 0x0; mov dword [rsp+0x170], 0x0; mov qword [rsp+0x174], 0x0; calljump___GI_memset; 
0x4b629: mov rdi, qword [rsp+0x8]; xor esi, esi; mov dword [rsp], r11d; xor ebx, ebx; lea rdx, [r9*8+0x8]; calljump___GI_memset; 
0x2661d: mov qword [rax+0x8], rdi; xor esi, esi; lea rdi, [rax+0x10]; mov rdx, r14; mov qword [rax], r13; calljump___GI_memset; 
0x11161d: mov rdx, rsi; xor esi, esi; calljump___GI_memset; 
0xb8d51: mov rdi, qword [rsp+0x18]; xor esi, esi; mov dword [rsp+0x38], r11d; lea r15d, [r13-0x1]; lea rdx, [r8*8+0x8]; mov dword [rsp+0x10], r9d; calljump___GI_memset; 
0x9e170: endbr64 ; mov rdx, rsi; xor esi, esi; jmp jump___GI_memset; 
0x9e520: endbr64 ; sub rsp, 0x8; mov rdx, rsi; xor esi, esi; calljump___GI_memset; 
0x9bf58: add rsp, 0x10; xor esi, esi; mov rdi, rax; pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp jump___GI_memset; 
0x86c27: mov rdx, qword [rsp+0x8]; lea rdi, [r15+r12]; xor esi, esi; sub rdx, r12; calljump___GI_memset; 
0x9d224: sub rbx, r13; mov rdi, r13; xor esi, esi; mov rdx, rbx; imulrdi, r14; add rdi, qword [rbp+0x10]; imulrdx, r14; calljump___GI_memset; 
0xee577: mov r9, rdx; cdqe; mov rdx, r8; sub rsp, 0x8; sub rdx, rax; lea rdi, [r9+rax]; xor esi, esi; calljump___GI_memset; 
0xbb791: mov rdi, qword [rsp+0x18]; xor esi, esi; mov dword [rsp+0x38], r11d; lea r15d, [r13-0x1]; lea rdx, [r8*8+0x8]; mov dword [rsp+0x10], r9d; calljump___GI_memset; 
0xc3879: mov rdi, qword [rsp+0x8]; xor esi, esi; mov dword [rsp+0x30], r11d; lea rdx, [r9*8+0x8]; mov dword [rsp+0x10], r10d; calljump___GI_memset; 
0x8c850: cdqe; mov edx, 0x80; sub rsp, 0x8; xor esi, esi; sub rdx, rax; lea rdi, [r8+rax]; calljump___GI_memset; 
0x4e3cc: xor esi, esi; calljump___GI_memset; 
0x4e927: xor esi, esi; calljump___GI_memset; 
0xbe8e1: mov rdi, qword [rsp+0x10]; xor esi, esi; mov qword [rsp+0x38], r10; lea rdx, [r8*8+0x8]; mov dword [rsp+0x30], r11d; mov dword [rsp+0x20], r9d; calljump___GI_memset; 
0x1541d3: cdqe; mov edx, 0x80; sub rsp, 0x8; xor esi, esi; sub rdx, rax; lea rdi, [r8+rax]; calljump___GI_memset; 
0x45a71: mov rdi, qword [rsp+0x8]; xor esi, esi; lea rdx, [r9*8+0x8]; mov dword [rsp], r11d; calljump___GI_memset; 
0x8c800: cdqe; sub rsp, 0x8; xor esi, esi; sub r8, rax; lea rdi, [rdx+rax]; mov rdx, r8; calljump___GI_memset; 
0x10b48b: lea rbx, [r12+r14]; mov rdx, r13; mov rsi, r12; sub rdx, r12; mov rdi, rbx; calljump___GI_memmove; add qword [rbp+0x38], r14; mov rdi, r12; mov rdx, r14; mov esi, 0x20; mov r12, rbx; calljump___GI_memset; 
0x48529: mov rdi, qword [rsp+0x8]; xor esi, esi; lea rdx, [r9*8+0x8]; mov dword [rsp], r11d; calljump___GI_memset; 
0x892f0: mov rdx, rbx; mov esi, 0xffffffff; calljump___GI_memset; 
0x89329: sub rbx, rdx; xor esi, esi; mov rdi, rax; mov rdx, rbx; calljump___GI_memset; 
0x4df58: lea rdx, [rdx*8]; xor esi, esi; mov qword [rbp-0x38], r10; calljump___GI_memset; 
0x53dd0: sub rbx, rdi; mov esi, r12d; cmp rbx, rbp; cmova   rbx, rbp; mov rdx, rbx; calljump___GI_memset; 
0x11e0ef: mov rax, qword [rsp]; lea r15, [rsp+0x18]; lea r10, [rsp+0x20]; movsxd  rbp, r14d; lea rsi, [rsp+0x12b]; mov rdi, r15; mov qword [rsp+0x8], r10; mov qword [rsp+0x18], rax; call__ns_name_skip; mov rcx, qword [rsp+0x18]; mov rdx, rbp; xor esi, esi; mov rdi, r12; add rbp, r12; mov dword [rcx], 0x1000100; mov qword [rsp], rcx; calljump___GI_memset; 
0x869d9: mov rdx, rbp; lea rdi, [r15+r13]; xor esi, esi; sub rdx, r13; calljump___GI_memset; 
0x96ba0: xor al, 0xff; mov rdx, rsi; mov esi, eax; jmp jump___GI_memset; 
0x98920: lea rdx, [r12-0x10]; lea rdi, [rbx+0x10]; calljump___GI_memset; 
0x99a02: mov rdi, rcx; xor sil, 0xff; mov rdx, r12; calljump___GI_memset; 
0x9a19d: xor al, 0xff; mov rdi, rcx; mov rdx, r12; mov esi, eax; calljump___GI_memset; 
0x12d700: add rsi, r13; lea r13, [rbx+rbx*4]; shl rbx, 0x3; lea r14, [r15+rsi*8]; shl r13, 0x3; xor esi, esi; xor r15d, r15d; mov rdx, r13; mov rdi, r14; calljump___GI_memset; 
0xce72b: mov esi, 0x20; mov rdi, rbp; calljump___GI_memset; 
0xce999: mov esi, 0x20; mov rdi, rbp; calljump___GI_memset; 
0xcea9b: mov rdi, rbp; mov esi, 0x20; calljump___GI_memset; 
0xceb9f: mov esi, 0x20; mov rdi, rbp; calljump___GI_memset; 
0xcec7a: mov rdi, rbp; mov rbp, r13; calljump___GI_memset; 
0xced3c: mov rdi, rbp; mov esi, 0x20; calljump___GI_memset; 
0xcee25: mov rdi, rbp; mov esi, 0x20; calljump___GI_memset; 
0xcefa5: mov rdi, rbp; mov esi, 0x20; calljump___GI_memset; 
0xcf03d: mov esi, 0x20; mov rdi, rbp; calljump___GI_memset; 
0xcf0f0: mov esi, 0x20; mov rdi, rbp; calljump___GI_memset; 
0xcf1e6: mov esi, 0x20; calljump___GI_memset; 
0xcf2f1: mov rdi, rbp; mov esi, 0x20; mov dword [rsp+0x30], r9d; calljump___GI_memset; 
0xcf4c7: mov rdx, r13; mov rdi, rbp; mov esi, 0x30; mov qword [rsp+0x38], r9; mov qword [rsp+0x30], r8; add r12, r13; add rbp, r13; mov r13d, 0x0; mov dword [rsp+0x28], r11d; calljump___GI_memset; 
0xcf542: mov esi, 0x20; mov rdi, rbp; calljump___GI_memset; 
0xcf5ed: mov esi, 0x20; mov rdi, rbp; calljump___GI_memset; 
0xcf98e: mov rdx, qword [rsp+0x30]; mov esi, 0x20; mov rdi, rbp; calljump___GI_memset; 
0xcfadf: mov esi, 0x20; mov rdi, rbp; calljump___GI_memset; 
0xcfd93: mov rdi, rbp; mov esi, 0x20; mov qword [rsp+0x48], r9; mov qword [rsp+0x40], r8; mov dword [rsp+0x38], r11d; mov dword [rsp+0x30], r10d; mov qword [rsp+0x28], rdx; calljump___GI_memset; 
0xcfe9b: mov esi, 0x30; mov rdi, rbp; calljump___GI_memset; 
0xcfeec: mov esi, 0x30; calljump___GI_memset; 
0xcff1d: mov esi, 0x30; mov rdi, rbp; calljump___GI_memset; 
0xcff43: mov esi, 0x30; mov rdi, rbp; calljump___GI_memset; 
0xd01c8: mov esi, 0x20; mov rdi, rbp; calljump___GI_memset; 
0xd0288: mov rdi, rbp; mov esi, 0x30; calljump___GI_memset; 
0xd0317: mov rdx, qword [rsp+0x30]; mov esi, 0x20; mov rdi, rbp; calljump___GI_memset; 
0xd04a5: mov rdi, rbp; mov esi, 0x30; calljump___GI_memset; 
0xd04ca: mov rdi, rbp; mov esi, 0x30; calljump___GI_memset; 
0xd04ef: mov esi, 0x30; mov rdi, rbp; calljump___GI_memset; 
0xd052c: mov esi, 0x30; mov rdi, rbp; calljump___GI_memset; 
0xd054d: mov esi, 0x30; mov rdi, rbp; calljump___GI_memset; 
0xd05fe: mov rdi, rbp; mov esi, 0x30; calljump___GI_memset; 
0xd0623: mov rdi, rbp; mov esi, 0x30; calljump___GI_memset; 
0xd068e: mov esi, 0x30; mov rdi, rbp; calljump___GI_memset; 
0xd06aa: mov rdx, rax; mov esi, 0x30; mov rdi, rbp; calljump___GI_memset; 
0xd0714: mov esi, 0x30; mov rdi, rbp; calljump___GI_memset; 
0xd072b: mov esi, 0x30; mov rdi, rbp; calljump___GI_memset; 
0xd0742: mov rdx, rax; mov esi, 0x30; mov rdi, rbp; calljump___GI_memset; 
0xd9bf8: mov rdi, qword [rbp-0x48]; xor esi, esi; calljump___GI_memset; 
0xded10: sub eax, 0x2; lea rdi, [rcx+r8+0x4]; mov esi, 0xff; lea rdx, [rax*4+0x4]; calljump___GI_memset; 
0xdefe1: lea ecx, [r14-0x2]; lea rdi, [rax+rdx+0x4]; mov esi, 0xff; lea rcx, [rcx*4+0x4]; mov rdx, rcx; calljump___GI_memset; 
0xdf0b8: lea edx, [r14-0x2]; lea rdi, [rax+rsi+0x4]; mov esi, 0xff; lea rdx, [rdx*4+0x4]; calljump___GI_memset; 
0xe11fa: mov rdi, qword [rbx+0x8]; movsxd  rdx, edx; mov esi, 0xff; calljump___GI_memset; 
0xe15b1: mov rdi, qword [rbx+0x8]; movsxd  rdx, r14d; mov esi, 0xff; calljump___GI_memset; 
0xe3ed0: mov edx, ebp; mov rax, qword [rbx+0x88]; xor esi, esi; sub edx, r12d; movsxd  rdx, edx; lea rdi, [rax+r12*8+0x8]; shl rdx, 0x3; calljump___GI_memset; 
0xe5bf5: mov rdi, rax; mov rdx, r9; xor esi, esi; mov qword [rsp], r8; calljump___GI_memset; 
0xe64aa: mov rdx, qword [rsp+0x60]; movsxd  rcx, ebx; xor esi, esi; shl rcx, 0x3; mov dword [rdx+0x4], r14d; mov qword [rdx+0x8], rax; movsxd  rdx, r12d; lea rdi, [rax+rdx*8]; mov rdx, rcx; calljump___GI_memset; 
0xe667e: movsxd  rsi, dword [rbx+0x94]; movsxd  rdx, dword [rbx+0x98]; mov qword [rbx+0xa0], rax; mov dword [rsp+0xc], ecx; shl rsi, 0x5; shl rdx, 0x5; movaps  xmmword [rsp+0x10], xmm0; lea rdi, [rax+rsi]; xor esi, esi; calljump___GI_memset; 
0xe7a01: movsxd  rdx, r15d; xor esi, esi; mov rdi, r12; shl rdx, 0x3; calljump___GI_memset; 
0xf807c: lea rbp, [rax+rdx]; xor esi, esi; mov qword [rsp+0x20], rax; mov qword [rsp+0x38], rbp; mov qword [rsp+0x40], r14; calljump___GI_memset; 
0x12652a: xor esi, esi; calljump___GI_memset; 
0x10e8be: mov rbx, qword [rbp-0xa8]; mov rsi, qword [rbx+0x20]; mov rdi, qword [rbx+0x10]; callargp_args_levels; xor esi, esi; mov rdx, rax; lea rax, [rax+0x17]; and rax, 0xfffffffffffffff0; sub rsp, rax; lea rax, [rsp+0xf]; and rax, 0xfffffffffffffff0; mov rdi, rax; mov qword [rbp-0x98], rax; calljump___GI_memset; 
0x114f69: mov rdi, qword [rsp+0x90]; mov esi, 0xffffffff; mov dword [rsp+0x20], r11d; lea rdx, [r9*4]; mov qword [rsp+0x18], r9; mov qword [rsp+0x10], rdi; calljump___GI_memset; 
0x11c910: mov rdx, r13; mov rsi, rbp; sub rdx, rbp; sub r12, rdx; mov rdi, r12; calljump___GI_memmove; mov rdx, r12; xor esi, esi; mov rdi, rbp; sub rdx, rbp; calljump___GI_memset; 
0x1402fc: lea rbp, [rsp+0x10]; xor esi, esi; mov edx, 0x2260; mov rdi, rbp; calljump___GI_memset; 
0x50fd1: mov rdi, qword [rsp+0x10]; xor esi, esi; mov dword [rsp+0x8], r11d; xor r13d, r13d; lea rdx, [r9*8+0x8]; calljump___GI_memset; 
0x417c6: mov r12, qword [rsp+0x50]; mov rdx, qword [rsp+0xe8]; lea rdi, [r12+rbp]; sub rdx, r12; mov rsi, r12; calljump___GI_memmove; mov rdx, rbp; mov esi, 0x20; mov rdi, r12; calljump___GI_memset; 
0x8bac6: xor esi, esi; mov rdi, r14; calljump___GI_memset; 
0x546c0: mov rdi, qword [rbp-0x60]; lea rdx, [rax*8]; xor esi, esi; calljump___GI_memset; 
0x56052: mov rdx, r13; mov esi, 0x30; add r13, 0x4; sub rdx, rax; mov rax, qword [rbp-0xe8]; lea rdi, [rax+0x6]; calljump___GI_memset; 
0x56802: sub rax, rdi; mov esi, 0x30; mov rdx, rax; calljump___GI_memset; 
0x5692e: mov rdx, rax; mov esi, 0x30; mov rdi, rcx; movsd   qword [rsp], xmm0; sub rdx, rcx; calljump___GI_memset; 
0x56bb1: sub rsi, rcx; mov rdi, rcx; mov rdx, rsi; mov esi, 0x30; calljump___GI_memset; 
0x56bfc: mov rdx, rax; mov esi, 0x30; mov rdi, rcx; sub rdx, rcx; calljump___GI_memset; 
0x59d4b: mov rdi, qword [rsp+0x8]; mov rax, rbx; lea rdx, [rbx*4]; shl rax, 0x4; mov qword [rsp+0x40], rdx; lea r10, [rdi+rax]; mov qword [rsp+0x38], rax; lea r13, [r10+rdx]; mov qword [rsp+0x10], r10; lea rax, [r13+rdx]; mov rdi, r13; mov qword [rsp+0x30], rax; mov eax, dword [rsp+0x958]; and eax, 0x2; mov esi, eax; mov dword [rsp+0x90], eax; shr esi, 0x1; neg esi; calljump___GI_memset; 
0x6794e: mov rax, rbx; lea rdx, [rbx*4]; mov qword [rsp+0x10], r10; shl rax, 0x4; mov qword [rsp+0x40], rdx; lea r11, [r10+rax]; mov qword [rsp+0x38], rax; lea r13, [r11+rdx]; mov qword [rsp+0x8], r11; lea rax, [r13+rdx]; mov rdi, r13; mov qword [rsp+0x30], rax; mov eax, dword [rsp+0x978]; and eax, 0x2; mov esi, eax; mov dword [rsp+0x98], eax; shr esi, 0x1; neg esi; calljump___GI_memset; 
0x74c60: sub rsi, r12; mov rdi, rbp; sar rsi, 0x2; calljump___wcsnlen_ifunc; 
0xc5c70: endbr64 ; pushr13; mov r13, rdi; pushr12; mov r12, rsi; mov rsi, rdx; pushrbp; mov rdi, r12; pushrbx; mov rbx, rdx; sub rsp, 0x8; calljump___wcsnlen_ifunc; 
0xb6ba0: mov rbx, qword [rsi]; mov r14, rdi; mov r13, rsi; lea rsi, [rdx-0x1]; mov r15, rcx; mov rdi, rbx; calljump___wcsnlen_ifunc; 
0xc4ab0: endbr64 ; pushr13; mov r13, rsi; mov rsi, rdx; pushr12; mov r12, rdi; mov rdi, r13; pushrbp; pushrbx; mov rbx, rdx; sub rsp, 0x8; calljump___wcsnlen_ifunc; 
0xb6f36: mov rsi, rdx; mov rdi, r13; mov qword [rsp], rdx; calljump___wcsnlen_ifunc; 
0x6afc2: movsxd  rsi, r11d; mov rdi, r15; mov dword [rsp+0x8], r9d; calljump___wcsnlen_ifunc; 
0xb6225: mov rsi, rbx; mov rdi, r12; calljump___wcsnlen_ifunc; 
0xc5c20: endbr64 ; pushr13; pushr12; mov r12, rdx; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; sub rsp, 0x8; calljump___wcslen_ifunc; mov rsi, r12; mov rdi, rbp; lea r13, [rbx+rax*4]; calljump___wcsnlen_ifunc; 
0x68281: movsxd  rsi, ebp; mov rdi, r13; mov dword [rsp+0x20], r11d; calljump___wcsnlen_ifunc; 
0x10b28e: mov rsi, rbx; mov rdi, r12; calljump___GI_strcmp; 
0x347e5: mov rdi, qword [rbp-0x78]; calljump___GI_strcmp; 
0x348b9: mov eax, eax; mov rdi, r13; add rsi, rax; calljump___GI_strcmp; 
0x34a10: sub r13, 0x1; mov rax, qword [rbx+0x70]; mov rsi, r14; lea rdx, [r13+r13*2]; lea r12, [rax+rdx*8]; mov rdi, qword [r12]; calljump___GI_strcmp; 
0x34aa8: mov rdi, qword [rbx]; mov rsi, r13; mov r14, rbx; sub r12, 0x1; sub rbx, 0x18; calljump___GI_strcmp; 
0x13df81: mov rsi, rbp; calljump___GI_strcmp; 
0x30f90: mov rsi, r15; mov rdi, rbx; calljump___GI_strcmp; 
0x310d0: add rsi, r14; mov rdi, rbx; mov qword [rbp-0x118], r8; mov qword [rbp-0x110], r10; mov dword [rbp-0x108], r9d; calljump___GI_strcmp; 
0x13d6f9: mov rsi, qword [rbx]; mov rdi, rbp; calljump___GI_strcmp; 
0x107a1c: lea rsi, [rel mode_always]  {"[always] madvise never\n"}; mov rdi, rsp; calljump___GI_strcmp; 
0x107a33: lea rsi, [rel mode_madvise]  {"always [madvise] never\n"}; mov rdi, rsp; calljump___GI_strcmp; 
0x107a4d: lea rsi, [rel mode_never]  {"always madvise [never]\n"}; mov rdi, rsp; calljump___GI_strcmp; 
0x10a9f6: mov rsi, rbx; mov rdi, r12; calljump___GI_strcmp; 
0xfd830: mov rsi, qword [rbx]; mov rdi, rbp; calljump___GI_strcmp; 
0x306f9: mov rsi, r15; mov rdi, rbx; calljump___GI_strcmp; 
0x3070c: lea rsi, [rel _nl_POSIX_name]  {"POSIX"}; mov rdi, rbx; calljump___GI_strcmp; 
0x30837: mov rbx, qword [rbp-0x60]; lea r15, [rel _nl_C_name]; mov rsi, r15; mov rdi, rbx; calljump___GI_strcmp; 
0x12907d: lea rbx, [r15+r14]; mov rdi, rbp; shr rbx, 0x1; lea rax, [rbx+rbx*8]; lea rsi, [rbx+rax*2]; add rsi, r12; calljump___GI_strcmp; 
0x12b5ef: mov r14, rsi; mov rsi, qword [rdi]; mov rdi, qword [r8]; mov rbx, rdx; calljump___GI_strcmp; 
0x27930: mov rsi, rbx; mov rdi, rbp; mov qword [rsp+0x8], rcx; calljump___GI_strcmp; 
0x2794e: mov rsi, rbx; mov rdi, r15; calljump___GI_strcmp; 
0x279a9: mov rsi, rcx; mov rdi, rbp; mov qword [rsp+0x8], rcx; calljump___GI_strcmp; 
0x279cb: mov rsi, rcx; mov rdi, r15; calljump___GI_strcmp; 
0x13db96: mov rsi, qword [r12]; mov rdi, rbx; calljump___GI_strcmp; 
0x13dbc5: mov rdi, rbx; calljump___GI_strcmp; 
0x102d30: mov rdi, qword [rbx+0x10]; mov rsi, r14; calljump___GI_strcmp; 
0x14edaa: mov rsi, qword [rbp-0x170]; mov rdi, qword [rbp-0x168]; calljump___GI_strcmp; 
0x14ee15: mov rsi, qword [rbp-0x170]; mov rdi, qword [rbp-0x168]; calljump___GI_strcmp; 
0x28a40: mov rsi, qword [rbp]; mov rdi, r14; calljump___GI_strcmp; 
0x32ede: lea rdi, [rel __libc_setlocale_lock]; lea r14, [rel _nl_global_locale]; call__pthread_rwlock_wrlock; lea r12, [r15+0x10]; mov rdi, rbp; mov rsi, qword [r14+r12*8]; calljump___GI_strcmp; 
0x331ea: mov r13, qword [r14+r12*8+0x80]; mov rdi, r15; mov dword [rsp+0x8], r8d; mov rsi, r13; calljump___GI_strcmp; 
0x13a229: mov rsi, qword [rbx]; mov rdi, rbp; calljump___GI_strcmp; 
0x13d24b: mov rdi, qword [rbx+0x18]; mov dword [rsp+0x4], edx; calljump___GI_strcmp; 
0x14fdd8: mov rbx, qword [rel __libc_utmp_file_name]; lea rsi, [rel 0x19c04c]  {"/var/run/utmp"}; mov rdi, rbx; calljump___GI_strcmp; 
0x14fdf6: lea rsi, [rel 0x19c05a]  {"/var/log/wtmp"}; mov rdi, rbx; calljump___GI_strcmp; 
0x14fe0d: lea rbp, [rel 0x19c03d]  {"/var/run/utmpx"}; mov rdi, rbx; mov rsi, rbp; calljump___GI_strcmp; 
0x14fe27: lea rbp, [rel 0x19c02e]  {"/var/log/wtmpx"}; mov rdi, rbx; mov rsi, rbp; calljump___GI_strcmp; 
0x105910: mov rdi, qword [rax]; mov rsi, r12; calljump___GI_strcmp; 
0xfe000: endbr64 ; pushr12; mov r12, rdx; pushrbp; mov rbp, rdi; pushrbx; mov rbx, rsi; lea rsi, [rel 0x1998e8]  {"__memcmpeq"}; calljump___GI_strcmp; 
0xfe025: lea rsi, [rel 0x199d4d]  {"memchr"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe03c: lea rsi, [rel 0x19a85b]  {"memcmp"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe053: lea rsi, [rel 0x1999e4]  {"__memmove_chk"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe06a: lea rsi, [rel 0x199a6f]  {"memmove"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe081: lea rsi, [rel 0x199b70]  {"memrchr"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe098: lea rsi, [rel 0x199bb8]  {"__memset_chk"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe0af: lea rsi, [rel 0x19a8b5]  {"memset"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe0c6: lea rsi, [rel 0x199d4a]  {"rawmemchr"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe0dd: lea rsi, [rel 0x199dc5]  {"strlen"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe0f4: lea rsi, [rel 0x199e19]  {"strnlen"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe10b: lea rsi, [rel 0x199e73]  {"stpncpy"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe122: lea rsi, [rel 0x199ec5]  {"stpcpy"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe139: lea rsi, [rel 0x199f20]  {"strcasecmp"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe150: lea rsi, [rel 0x199f8a]  {"strcasecmp_l"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe167: lea rsi, [rel 0x19a000]  {"strcat"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe17e: lea rsi, [rel 0x19a05b]  {"strchr"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe195: lea rsi, [rel 0x19a0c4]  {"strchrnul"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe1ac: lea rsi, [rel 0x19a12a]  {"strrchr"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe1c3: lea rsi, [rel 0x19a184]  {"strcmp"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe1da: lea rsi, [rel 0x19a1ee]  {"strcpy"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe1f1: lea rsi, [rel 0x19a249]  {"strcspn"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe208: lea rsi, [rel 0x19a273]  {"strncasecmp"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe21f: lea rsi, [rel 0x19a2e3]  {"strncasecmp_l"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe236: lea rsi, [rel 0x19a35f]  {"strncat"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe24d: lea rsi, [rel 0x19a3b1]  {"strncpy"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe264: lea rsi, [rel 0x19a403]  {"strpbrk"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe27b: lea rsi, [rel 0x19a42d]  {"strspn"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe292: lea rsi, [rel 0x19a454]  {"strstr"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe2a9: lea rsi, [rel 0x19a494]  {"wcschr"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe2c0: lea rsi, [rel 0x19a4e8]  {"wcsrchr"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe2d7: lea rsi, [rel 0x19a542]  {"wcscmp"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe2ee: lea rsi, [rel 0x19a585]  {"wcsncmp"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe305: lea rsi, [rel 0x19a5d0]  {"wcscpy"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe31c: lea rsi, [rel 0x19a613]  {"wcsncpy"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe333: lea rsi, [rel 0x19a64b]  {"wcpcpy"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe34a: lea rsi, [rel 0x19a67f]  {"wcpncpy"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe361: lea rsi, [rel 0x19a6b7]  {"wcscat"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe378: lea rsi, [rel 0x19a6eb]  {"wcsncat"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe38f: lea rsi, [rel 0x19a723]  {"wcslen"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe3a6: lea rsi, [rel 0x19a787]  {"wcsnlen"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe3bd: lea rsi, [rel 0x199d4c]  {"wmemchr"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe3d4: lea rsi, [rel 0x19a85a]  {"wmemcmp"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe3ed: lea rsi, [rel 0x19a8b4]  {"wmemset"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe404: lea rsi, [rel 0x19a93f]  {"__memcpy_chk"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe41b: lea rsi, [rel 0x19a9e2]  {"memcpy"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe432: lea rsi, [rel 0x19aaf6]  {"__mempcpy_chk"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe449: lea rsi, [rel 0x19ab81]  {"mempcpy"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe460: lea rsi, [rel 0x19ac82]  {"strncmp"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfe477: lea rsi, [rel 0x19acda]  {"__wmemset_chk"}; mov rdi, rbp; calljump___GI_strcmp; 
0xfc478: mov rdi, qword [rax]; mov rsi, rbp; calljump___GI_strcmp; 
0xfc4e8: mov rdi, qword [rax+0x8]; mov rsi, rbp; calljump___GI_strcmp; 
0x150870: call__libc_endutent; mov rbp, qword [rel __libc_utmp_file_name]; mov rdi, rbx; mov rsi, rbp; calljump___GI_strcmp; 
0x1508a8: lea r12, [rel default_file_name]  {"/var/run/utmp"}; mov rdi, rbx; mov rsi, r12; calljump___GI_strcmp; 
0xfbf6e: mov rsi, rdx; calljump___GI_strcmp; 
0x133a20: lea rsi, [r13+0x8]; mov rdi, r15; calljump___GI_strcmp; 
0x133a50: lea rsi, [r13+0x8]; mov rdi, r15; calljump___GI_strcmp; 
0x35272: lea rsi, [r15+0x18]; mov rdi, r12; calljump___GI_strcmp; 
0x3544e: lea rsi, [rel _nl_POSIX_name]  {"POSIX"}; mov rdi, rbx; calljump___GI_strcmp; 
0x13c886: mov rsi, qword [r12]; mov rdi, rbx; calljump___GI_strcmp; 
0x13c8b5: mov rdi, rbx; calljump___GI_strcmp; 
0x38219: mov r8, qword [rsp+0x8]; mov rsi, rax; mov qword [rsp], rax; mov rdi, qword [r8]; calljump___GI_strcmp; 
0x144e30: endbr64 ; pushrbp; mov rbp, rsp; pushr15; mov r15, rdx; pushr14; pushr13; pushr12; mov r12, rdi; mov rdi, rcx; pushrbx; mov rbx, rcx; sub rsp, 0xa8; mov qword [rbp-0xc8], rsi; lea rsi, [rel OPSYS]  {"unix"}; calljump___GI_strcmp; 
0x277c7: mov rsi, r12; calljump___GI_strcmp; 
0x26a30: endbr64 ; mov rsi, qword [rsi]; mov rdi, qword [rdi]; jmp jump___GI_strcmp; 
0x15037a: mov rbp, qword [rel __libc_utmp_file_name]; lea rsi, [rel 0x19c04c]  {"/var/run/utmp"}; mov rdi, rbp; calljump___GI_strcmp; 
0x150398: lea rsi, [rel 0x19c05a]  {"/var/log/wtmp"}; mov rdi, rbp; calljump___GI_strcmp; 
0x1503af: lea r12, [rel 0x19c03d]  {"/var/run/utmpx"}; mov rdi, rbp; mov rsi, r12; calljump___GI_strcmp; 
0x1503c9: lea r12, [rel 0x19c02e]  {"/var/log/wtmpx"}; mov rdi, rbp; mov rsi, r12; calljump___GI_strcmp; 
0x13e82a: mov rdi, qword [r13+0x28]; mov rsi, rbx; calljump___GI_strcmp; 
0xcb935: mov rsi, qword [r12+0x60]; mov rdi, qword [rbx+0x60]; calljump___GI_strcmp; 
0xcb99f: mov rsi, qword [r12]; mov rdi, qword [rbx]; calljump___GI_strcmp; 
0xcba3e: mov r13, rdi; mov rsi, qword [r12+0x308]; mov rdi, qword [rbx+0x308]; calljump___GI_strcmp; 
0xcbbe4: mov r13, qword [rsp+0x50]; mov r12, qword [rsp+0x20]; mov qword [rsp+0x38], r15; mov r15, qword [rsp+0x10]; mov qword [rsp+0x40], r9; mov rsi, qword [r13]; mov rdi, qword [r15+rbp+0x70]; calljump___GI_strcmp; 
0xcc18b: mov rdi, qword [r9+0x168]; mov rsi, qword [rel data_1d4928]; add r15, r13; mov dword [rsp+0x18], r11d; mov qword [rsp+0x10], r9; mov qword [rsp+0x78], r15; calljump___GI_strcmp; 
0xcc3bb: mov rdi, r14; mov r14, r13; calljump___GI_strcmp; 
0xcc45c: mov rsi, qword [rel data_1d4938]; mov rdi, r14; mov qword [rsp+0x18], r9; mov dword [rsp+0x10], r11d; calljump___GI_strcmp; 
0xcccb2: mov rsi, qword [r12+0x308]; mov rdi, qword [rbx+0x3c8]; calljump___GI_strcmp; 
0xcd0bd: mov rax, qword [rsp+0x10]; mov rsi, qword [r13-0x38]; mov qword [rsp+0x20], rdx; mov rdi, qword [rax+rbp+0x38]; calljump___GI_strcmp; 
0xcd268: add r13, rsi; mov rdi, qword [r9+0x170]; mov dword [rsp+0x18], r11d; mov rsi, qword [rel data_1d4930]; mov qword [rsp+0x10], r9; mov qword [rsp+0x78], r13; calljump___GI_strcmp; 
0xcd314: mov rdi, qword [r9+0x190]; mov rsi, qword [rel data_1d4950]; mov dword [rsp+0x18], r11d; mov qword [rsp+0x10], r9; calljump___GI_strcmp; 
0xcd3c6: calljump___GI_strcmp; 
0xcd4a9: mov rdi, qword [r9+0x188]; mov rsi, qword [rel data_1d4948]; mov dword [rsp+0x18], r11d; mov qword [rsp+0x10], r9; calljump___GI_strcmp; 
0xa0f70: add rsp, 0xe8; pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; jmp jump___GI_strcmp; 
0xa0f86: mov rsi, qword [rsp+0xc0]; mov rdi, qword [rsp+0x80]; calljump___GI_strcmp; 
0x667be: mov rsi, qword [rbp-0x660]; mov rdi, qword [rbp-0x6a8]; mov dword [rbp-0x680], r11d; calljump___GI_strcmp; 
0x150940: endbr64 ; pushr12; pushrbp; mov rbp, rsi; lea rsi, [rel 0x19c04c]  {"/var/run/utmp"}; pushrbx; mov rbx, rdi; calljump___GI_strcmp; 
0x150962: lea rsi, [rel 0x19c05a]  {"/var/log/wtmp"}; mov rdi, rbx; calljump___GI_strcmp; 
0x150979: lea r12, [rel 0x19c03d]  {"/var/run/utmpx"}; mov rdi, rbx; mov rsi, r12; calljump___GI_strcmp; 
0x15098f: lea r12, [rel 0x19c02e]  {"/var/log/wtmpx"}; mov rdi, rbx; mov rsi, r12; calljump___GI_strcmp; 
0x379f0: mov rsi, r12; mov rdi, rbx; calljump___GI_strcmp; 
0x379ff: mov rsi, rbp; mov rdi, rbx; calljump___GI_strcmp; 
0xc9f1a: movzx   eax, byte [rbx+0x4]; mov rdi, qword [rsp+0x10]; mov rbp, qword [r13+rax*8]; mov dword [rdi+0x20], eax; movzx   edi, byte [rbx+0x5]; add rdi, qword [rel zone_names]; mov rsi, rbp; calljump___GI_strcmp; 
0x118595: mov rsi, r13; calljump___GI_strcmp; 
0x118608: mov rdi, qword [r12]; mov rsi, r15; calljump___GI_strcmp; 
0x92aa0: add rsi, 0x20; add rdi, 0x20; jmp jump___GI_strcmp; 
0x12e3be: lea rsi, [rel 0x19b91f]  {"reload"}; mov rdi, r12; calljump___GI_strcmp; 
0x12e3d1: lea rsi, [rel 0x198f1e]; mov rdi, r15; calljump___GI_strcmp; 
0x12e62a: lea rsi, [rel 0x19b926]  {"scopev4"}; mov rdi, r12; calljump___GI_strcmp; 
0x12e7b2: lea rsi, [rel 0x19b92e]  {"precedence"}; mov rdi, r12; calljump___GI_strcmp; 
0x12e880: lea rsi, [rel 0x19b919]  {"label"}; mov rdi, r12; calljump___GI_strcmp; 
0x13ab5e: mov rax, qword [rsp+0x20]; mov rsi, qword [rsp]; mov rdi, qword [rax]; calljump___GI_strcmp; 
0xc89c9: mov rsi, rbp; mov rdi, rbx; calljump___GI_strcmp; 
0xc8a2c: lea rsi, [rel 0x19f530]  {"/root/glibc/glibc/build/install/…"}; mov rdi, rbx; calljump___GI_strcmp; 
0xdda9c: mov rbx, qword [rbp-0x15b0]; mov rsi, r15; mov rdi, rbx; calljump___GI_strcmp; 
0xddab2: lea rsi, [rel 0x199609]  {"ext3"}; mov rdi, rbx; calljump___GI_strcmp; 
0xddac5: lea rsi, [rel 0x19960e]  {"ext4"}; mov rdi, rbx; calljump___GI_strcmp; 
0xddaff: mov rdi, qword [rbp-0x15b0]; lea rsi, [rel 0x19960e]  {"ext4"}; calljump___GI_strcmp; 
0xe0166: lea rsi, [rel 0x199c89]  {"upper"}; mov rdi, r8; calljump___GI_strcmp; 
0xe0195: lea eax, [rdx+0x1]; mov dword [r13+0x44], eax; lea r13, [rdi+rdx*8]; mov rdi, r12; call__wctype; lea rsi, [rel data_19961f]  {"alnum"}; mov rdi, r12; mov qword [r13], rax; calljump___GI_strcmp; 
0xe01c3: lea rsi, [rel 0x199625]  {"cntrl"}; mov rdi, r12; calljump___GI_strcmp; 
0xe02e0: mov rdi, r12; lea rsi, [rel 0x199619]  {"lower"}; calljump___GI_strcmp; 
0xe033a: lea rsi, [rel 0x199619]  {"lower"}; mov rdi, r12; calljump___GI_strcmp; 
0xe0351: lea rsi, [rel data_198d26]  {"space"}; mov rdi, r12; calljump___GI_strcmp; 
0xe0461: lea rsi, [rel 0x199613]  {"alpha"}; mov rdi, r12; calljump___GI_strcmp; 
0xe04bc: lea rsi, [rel 0x19963e]  {"digit"}; mov rdi, r12; calljump___GI_strcmp; 
0xe0531: lea rsi, [rel 0x19962b]  {"print"}; mov rdi, r12; calljump___GI_strcmp; 
0xe05c8: lea rsi, [rel 0x199c89]  {"upper"}; mov rdi, r12; calljump___GI_strcmp; 
0xe066a: lea rsi, [rel 0x199631]  {"blank"}; mov rdi, r12; calljump___GI_strcmp; 
0xe06f0: lea rsi, [rel 0x199637]  {"graph"}; mov rdi, r12; calljump___GI_strcmp; 
0xe0781: lea rsi, [rel data_1980e2[5]]  {"punct"}; mov rdi, r12; calljump___GI_strcmp; 
0xe0810: lea rsi, [rel 0x19963d]  {"xdigit"}; mov rdi, r12; calljump___GI_strcmp; 
0xebfae: mov rdi, qword [rax+0xa8]; lea rsi, [rel data_199646]  {"UTF-8"}; calljump___GI_strcmp; 
0x154413: lea rbx, [rax+0x13]; mov rsi, r14; mov rdi, rbx; calljump___GI_strcmp; 
0x154426: mov rsi, r15; mov rdi, rbx; calljump___GI_strcmp; 
0x154435: lea rsi, [rel 0x199826]  {"stderr"}; mov rdi, rbx; calljump___GI_strcmp; 
0x10cb1e: mov rsi, r13; calljump___GI_strcmp; 
0x10f800: mov rsi, r14; calljump___GI_strcmp; 
0x116ba0: mov rdi, qword [rsp+0x18]; calljump___GI_strcmp; 
0x116cac: mov rsi, r14; mov rdi, rbx; calljump___GI_strcmp; 
0x116d84: lea rdi, [rsi+0x1]; mov rsi, qword [rsp+0x18]; calljump___GI_strcmp; 
0x118308: movsxd  rdi, dword [rbp+rbx*8]; mov rsi, r13; add rdi, r12; calljump___GI_strcmp; 
0x123ab0: mov rdi, r13; calljump___GI_strlen; mov rdi, r13; lea r14, [r14+rax+0x1]; mov rax, qword [rbp+0x18]; mov rsi, qword [rax+r12*8]; calljump___GI_strcmp; 
0x12777d: lea rbp, [r15+r14]; mov rdi, r12; shr rbp, 0x1; lea rbx, [rbp*8]; sub rbx, rbp; add rbx, rbx; lea rsi, [rbx+r13]; calljump___GI_strcmp; 
0x128b00: pushrbp; lea rsi, [rel data_19830d]  {"files"}; mov rbp, rsp; pushr15; pushr14; pushr13; lea r13, [rdi+0x218]; pushr12; pushrbx; sub rsp, 0x238; mov qword [rbp-0x258], rdi; mov rdi, r13; calljump___GI_strcmp; 
0x128b39: lea rsi, [rel 0x19b766]; mov rdi, r13; calljump___GI_strcmp; 
0x12b8bd: mov rsi, rbx; calljump___GI_strcmp; 
0x2f93b: mov rsi, rbp; mov rdi, rbx; calljump___GI_strcmp; 
0x13d14e: mov rdi, qword [r12+0x18]; mov rsi, r13; calljump___GI_strcmp; 
0x13d15f: mov rsi, qword [r12]; mov rdi, rbp; calljump___GI_strcmp; 
0x13d18d: mov rdi, rbp; calljump___GI_strcmp; 
0x13cba9: mov rsi, qword [rbx]; mov rdi, rbp; calljump___GI_strcmp; 
0x13d4a9: mov rsi, qword [rbx]; mov rdi, rbp; calljump___GI_strcmp; 
0x133e14: mov rsi, qword [rsp+0x40]; calljump___GI_strcmp; 
0x133ef8: lea rsi, [rbx+0x8]; mov rdi, r15; calljump___GI_strcmp; 
0x133f30: lea rsi, [rbx+0x8]; mov rdi, r15; calljump___GI_strcmp; 
0x133f4c: mov rdi, qword [rsp+0x48]; mov rsi, r15; calljump___GI_strcmp; 
0xfdf38: mov rsi, qword [r8+0x8]; mov rdi, r15; mov dword [rsp+0x14], edx; mov dword [rsp+0x10], r9d; mov qword [rsp+0x8], r8; calljump___GI_strcmp; 
0xfdfb0: mov rsi, qword [r12+0x8]; mov rdi, r15; calljump___GI_strcmp; 
0x26b50: endbr64 ; pushrbp; mov rbp, rsi; pushrbx; mov rbx, rdi; sub rsp, 0x8; mov rsi, qword [rsi]; mov rdi, qword [rdi]; calljump___GI_strcmp; 
0x26b6f: mov rsi, qword [rbp+0x8]; mov rdi, qword [rbx+0x8]; add rsp, 0x8; pop rbx; pop rbp; jmp jump___GI_strcmp; 
0x26e91: mov rsi, qword [r15]; mov rdi, r12; calljump___GI_strcmp; 
0x26ebc: mov rsi, rax; mov rdi, r12; calljump___GI_strcmp; 
0x26f12: mov rsi, qword [rbp-0x78]; mov eax, dword [r14+0x10]; mov rdi, r12; add eax, dword [r15+0x14]; add ebx, dword [r15+0x10]; mov dword [rbp-0x58], eax; calljump___GI_strcmp; 
0x26f5d: mov rsi, qword [r13]; mov rdi, r12; calljump___GI_strcmp; 
0x26fb0: mov rsi, qword [r13]; mov rdi, r12; calljump___GI_strcmp; 
0x2f5c0: mov rax, qword [rsp+0x8]; mov rdi, qword [rsp+0x10]; mov dword [rsp+0x4], ecx; add rsi, rax; add rsi, r12; calljump___GI_strcmp; 
0x27f71: mov rsi, qword [rbx]; mov rdi, r12; calljump___GI_strcmp; 
0x27fa8: mov r15, qword [r13+0x8]; mov rsi, qword [rbx+0x8]; mov rdi, r15; calljump___GI_strcmp; 
0x27fcd: mov rsi, qword [rbx]; mov rdi, r12; calljump___GI_strcmp; 
0x27fdc: mov rsi, qword [rbx+0x8]; mov rdi, r15; calljump___GI_strcmp; 
0x2864c: mov rsi, qword [rdx]; mov rdi, r15; mov qword [rsp], rdx; calljump___GI_strcmp; 
0x28805: lea rdi, [r15+rax-0x5]; lea rsi, [rel data_19b77a[0xd]]  {".conf"}; calljump___GI_strcmp; 
0x2895b: mov rsi, qword [rbp]; mov rdi, rbx; calljump___GI_strcmp; 
0x2fe90: endbr64 ; mov rsi, qword [rsi]; mov rdi, qword [rdi]; jmp jump___GI_strcmp; 
0x32d1a: mov rdi, rbp; xor r13d, r13d; calljump___GI_strcmp; 
0x32d3e: mov rax, qword [rsp]; lea r13, [rel _nl_C_name]; mov rsi, r13; mov rbp, qword [rax]; mov rdi, rbp; calljump___GI_strcmp; 
0x32d5b: lea rsi, [rel _nl_POSIX_name]  {"POSIX"}; mov rdi, rbp; calljump___GI_strcmp; 
0x33f92: lea rsi, [r14+0x18]; mov rdi, rbx; calljump___GI_strcmp; 
0x33fbf: mov rsi, rdx; mov rdi, rbx; mov qword [rsp], rdx; calljump___GI_strcmp; 
0x33fd6: lea rcx, [rel _nl_default_dirname]  {"/root/glibc/glibc/build/install/…"}; mov rdi, rbx; mov qword [rsp+0x8], rdx; mov rsi, rcx; mov qword [rsp], rcx; calljump___GI_strcmp; 
0x34067: mov rsi, rbp; mov rdi, rbx; calljump___GI_strcmp; 
0x34103: mov rdx, qword [rsp]; lea rdi, [r14+0x18]; mov rsi, rbx; calljump___GI_memcpy; lea rcx, [rel _nl_default_dirname]  {"/root/glibc/glibc/build/install/…"}; mov rdi, r15; mov rsi, rcx; mov qword [rsp], rcx; calljump___GI_strcmp; 
0x34167: lea rsi, [rbp+0x18]; mov rdi, rbx; calljump___GI_strcmp; 
0x34180: lea rsi, [rbp+0x18]; mov rdi, rbx; calljump___GI_strcmp; 
0x34676: calljump___GI_strcmp; 
0x3467f: mov rsi, qword [rbx]; mov rdi, qword [rbp]; calljump___GI_strcmp; 
0x3468f: mov rsi, qword [rbx+0x10]; mov rdi, qword [rbp+0x10]; calljump___GI_strcmp; 
0x37bf0: mov rsi, rbp; calljump___GI_strcmp; 
0x139bd0: endbr64 ; pushr13; pushr12; mov r12, rdi; pushrbp; pushrbx; mov rbx, rsi; lea rsi, [rel 0x19bc13]; sub rsp, 0x18; calljump___GI_strpbrk; 
0x129975: mov rsi, rbp; calljump___GI_strpbrk; 
0x1298af: lea rbp, [rel __nss_invalid_field_characters]; mov r14, rsi; mov r13, rdi; mov rsi, rbp; mov r12, r13; calljump___GI_strpbrk; 
0x1298f0: mov byte [rax], 0x20; lea rdi, [rax+0x1]; mov rsi, rbp; calljump___GI_strpbrk; 
0x13bdf8: lea rsi, [rel 0x19bc13]; mov rdi, r12; calljump___GI_strpbrk; 
0x13d784: lea rsi, [rel 0x19bc13]; mov rdi, r13; calljump___GI_strpbrk; 
0x13c474: lea rsi, [rel 0x19bc13]; mov rdi, r13; calljump___GI_strpbrk; 
0x13ccf5: lea rsi, [rel 0x19bc13]; mov rdi, r13; calljump___GI_strpbrk; 
0x11f6da: lea rsi, [rel 0x197ca0]; mov rdi, r13; calljump___GI_strpbrk; 
0x11f719: lea rsi, [rel 0x197ca0]; mov rdi, r13; calljump___GI_strpbrk; 
0x129919: sub rsp, 0x8; lea rsi, [rel __nss_invalid_field_characters]; calljump___GI_strpbrk; 
0x139550: lea rsi, [rel 0x19bc13]; mov rdi, r15; mov qword [rsp+0x10], r8; calljump___GI_strpbrk; 
0x1397a1: lea rsi, [rel 0x19bc13]; mov rdi, rax; calljump___GI_strpbrk; 
0x139852: lea rsi, [rel 0x19bc13]; mov rdi, rax; mov qword [rsp+0x8], r8; calljump___GI_strpbrk; 
0x13a3e9: lea rsi, [rel 0x19bc13]; mov rdi, rbp; calljump___GI_strpbrk; 
0x81a3a: mov rsi, rbp; mov rdi, r12; calljump___GI___strnlen; 
0x81750: mov rsi, r12; mov rdi, rbp; calljump___GI___strnlen; 
